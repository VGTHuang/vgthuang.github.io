{"version":3,"sources":["webpack:///./src/views/ThreeFrontpageTest2.vue?d613","webpack:///./src/scripts/FrontPage2.0/index.ts","webpack:///./src/views/ThreeFrontpageTest2.vue","webpack:///./src/views/ThreeFrontpageTest2.vue?3e9f","webpack:///./src/views/ThreeFrontpageTest2.vue?64c0","webpack:///./src/views/ThreeFrontpageTest2.vue?455d","webpack:///./src/scripts/Three/ParticleEngine.ts"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","attrs","staticClass","class","loadingStat","isLoaded","noLoadingStat","style","width","loaded","total","_v","_s","Math","round","staticRenderFns","_container","onLoad","onProgress","onError","requestAnimationFrame","animate","updateCamera","stats","update","self","cameraZPosition","container","camera","window","innerWidth","innerHeight","renderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","position","top","left","appendChild","zIndex","set","scene","cssScene","cardInsideScene","loadingManager","url","r","urls","textureCube","load","mapping","environment","refractionManager","renderPass","RenderPass","clear","clearDepth","composer","EffectComposer","backRenderTarget","renderToScreen","addPass","texture","readBuffer","frontScene","background","light","x","y","z","add","glassParticleControllerDict","intersectGlassObjs","glassMesh2","RoundedBoxGeometry","color","glassAngle","PI","glassPosRadius","cos","sin","tx","addRefractionMesh","push","particleGeometry","copy","particleMaterial","pe2","_","angle","random","radiusNew","randomOffset","multiplyScalar","ruleIn","atan","originalPosition","interp","posExpand","posYExpand","sqrt","ruleOut","curPosition","curRotation","curScale","curColor","originalColor","lerp","mixColor","mesh","pe","isTransisting","selectedGlassParticleController","loader","TDSLoader","obj","children","dodeca","scale","pe1","rotateAngle","randomFactor","leavesParticleCount","leavesMatrixDummy","leavesParticlesMeshes","material","side","console","log","forEach","leaf","geometry","getRandomLeavePosition","getRandomLeaveRotation","getRandomLeaveScale","waterGeometry","water","SQWater","flowDirection","textureWidth","textureHeight","rotation","cameraWithMouseRotateFactor","cameraWithMouseMoveFactor","cameraTargetPosition","cameraLootAtController","addEventListener","e","onMouseMove","raycaster","undefined","mousePosX","mousePosY","pointer","onWindowResize","onClick","setRenderTarget","cssRenderer","aspect","updateProjectionMatrix","glassParticleController","particleEngine","refObj","transit","tweenEuler","v","Exponential","InOut","tweenNumber","val","refractionMaterialUniforms","value","b","GlassParticleController","clientX","clientY","setFromCamera","intersects","intersectObjects","length","object","gp","inactivateGlassParticleController","activateGlassParticleController","posX","posY","ray","unproject","relX","relY","dampPos","lookAt","currentVec3","vel","velocity","htmlContainer","htmlElem","CustomCSS3DRenderer","index","radius","extend","data","fpm","mounted","$refs","HTMLElement","setTimeout","error","registerCSSCoordinator","methods","onGlassClick","alert","component","ParticleController","instanceIndex","birthTime","deathTime","dummy","updateMatrix","setMatrixAt","matrix","setColorAt","ParticleRuleController","direction","animRuleFunc","resetGeom","originalRotation","originalScale","AbstractParticleEngine","particleCount","instanceMatrix","setUsage","ParticleStaticEngine","setInitPosition","setInitRotation","setInitScale","setInitColor","particleControllers","i","initPosition","initRotation","initScale","initColor","tempParticleController","ParticleRuleEngine","setInitMixColor","isInTransition","initMixColor","transitionTime","pc","updateGeomByRule","needsUpdate","instanceColor"],"mappings":"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","file":"js/chunk-6d343452.2cf1adf9.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}},[_c('div',{staticClass:\"loading-container\",class:{\n            'loading-container--hidden': _vm.loadingStat.isLoaded,\n            'loading-container--none': _vm.loadingStat.noLoadingStat\n        }},[_c('div',{staticClass:\"load-stat\"},[_c('div',{staticClass:\"load-pgbar\",style:({\n                    width: 100 * _vm.loadingStat.loaded / _vm.loadingStat.total + '%'\n                })}),_c('div',{staticClass:\"load-text\"},[_vm._v(_vm._s(Math.round(100 * _vm.loadingStat.loaded / _vm.loadingStat.total))+\" %\")])])])]),_c('div',{ref:\"dom3d-container\",attrs:{\"id\":\"dom3d-container\"}},[_c('div',{ref:\"dom3d-test\",attrs:{\"id\":\"dom3d-test\"}},[_c('p',[_vm._v(\"HTML element: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\")])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as THREE from 'three'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { Stats } from 'three-stats'\r\nimport { TDSLoader } from 'three/examples/jsm/loaders/TDSLoader'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from '../Three/CustomCSS3DRenderer'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { DampingObjectController, DampingVector3Controller } from '../Three/Utils'\r\n// import { RefractionMesh, RefractionManager } from '../Three/Refraction2.0'\r\nimport { RefractionObject, RefractionManager } from '../ThreeRealisticRefraction/ThreeRealisticRefraction'\r\nimport { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry'\r\nimport { controller } from '../AnimUtils/TweenUtils'\r\nimport * as PE from '../Three/ParticleEngine'\r\nimport { randn_bm } from '../Three/Utils'\r\nimport { SQWater } from '../Three/SQWater'\r\n\r\ninterface GlassParticleController {\r\n    mesh: THREE.Mesh,\r\n    pe: PE.AbstractParticleEngine,\r\n    isTransisting: boolean\r\n}\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    // controls: OrbitControls\r\n    cardInsideScene: THREE.Scene\r\n    scene: THREE.Scene\r\n    composer: EffectComposer\r\n    stats: Stats\r\n    // controls: OrbitControls\r\n\r\n\r\n    refractionManager: RefractionManager\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraZPosition: number\r\n    cameraLootAtController: DampingVector3Controller\r\n    cameraTargetPosition: THREE.Vector3\r\n    cameraWithMouseRotateFactor: number\r\n    cameraWithMouseMoveFactor: number\r\n\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectGlassObjs: Array<THREE.Object3D>\r\n\r\n    // glass\r\n    glassPosRadius: number\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    leavesParticleCount: number\r\n    leavesMatrixDummy: THREE.Object3D\r\n    leavesParticlesMeshes: Array<THREE.InstancedMesh>\r\n\r\n    glassParticleControllerDict: Array<GlassParticleController>\r\n    selectedGlassParticleController: GlassParticleController | undefined\r\n\r\n    constructor(_container: HTMLElement,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void\r\n        ) {\r\n        const self = this\r\n\r\n        // *********** basic settings ***********\r\n        this.cameraZPosition = 500\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.camera.position.set(0, 200, 150)\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n        this.cardInsideScene = new THREE.Scene()\r\n\r\n        // \r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n\r\n        // *********** background & env ***********\r\n        const r = './cube1/'\r\n        const urls = [\r\n            r + 'px.jpg', r + 'nx.jpg',\r\n            r + 'py.jpg', r + 'ny.jpg',\r\n            r + 'pz.jpg', r + 'nz.jpg'\r\n        ]\r\n        const textureCube = new THREE.CubeTextureLoader(this.loadingManager).load( urls )\r\n        textureCube.mapping = THREE.CubeRefractionMapping\r\n        // this.scene.background = textureCube\r\n        this.scene.environment = textureCube\r\n\r\n\r\n\r\n        // *********** composers & refraction managers ***********\r\n        this.refractionManager = new RefractionManager(this.scene, this.container, this.renderer, this.camera)\r\n        const renderPass = new RenderPass(this.scene, this.camera)\r\n        renderPass.clear = true\r\n        renderPass.clearDepth = false\r\n        this.composer = new EffectComposer(this.renderer, this.refractionManager.backRenderTarget)\r\n        this.composer.renderToScreen = false\r\n        this.composer.addPass(renderPass)\r\n        this.refractionManager.backRenderTarget.texture = this.composer.readBuffer.texture\r\n        this.refractionManager.frontScene.background = this.composer.readBuffer.texture\r\n\r\n\r\n        // *********** set light ***********\r\n        var light = new THREE.PointLight()\r\n        light.position.x = 0\r\n        light.position.y = 100\r\n        light.position.z = 0\r\n        this.scene.add(light)\r\n\r\n        // *********** refraction objects ***********\r\n        \r\n        this.glassParticleControllerDict = []\r\n\r\n        this.intersectGlassObjs = []\r\n        var glassMesh2 = new THREE.Mesh(\r\n            new RoundedBoxGeometry(40, 40, 40, 5, 5),\r\n            // new THREE.BoxGeometry(40, 40, 40),\r\n            new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(0xff00ff)\r\n            })\r\n        )\r\n        let glassAngle = 0.6 - Math.PI / 2\r\n        this.glassPosRadius = 120\r\n        glassMesh2.position.set(Math.cos(glassAngle) * this.glassPosRadius, 30, Math.sin(glassAngle) * this.glassPosRadius)\r\n        let tx = new THREE.TextureLoader(this.loadingManager).load( './jutabag3ds/texture/normal.jpg' )\r\n        this.refractionManager.addRefractionMesh(glassMesh2, true, tx, 0xff0000, 0xff0000, 2, 0.5)\r\n        this.intersectGlassObjs.push(glassMesh2)\r\n\r\n        var particleGeometry = new THREE.InstancedBufferGeometry().copy(new THREE.SphereGeometry(0.5, 4))\r\n        var particleMaterial = new THREE.MeshBasicMaterial({\r\n            // emissive: new THREE.Color(0xffff80),\r\n            // emissiveIntensity: 0.5\r\n        })\r\n        var pe2 = new PE.ParticleRuleEngine(300, particleGeometry, particleMaterial,\r\n            (_) => {\r\n                // return new THREE.Vector3(0)\r\n                let angle = 2 * Math.PI * Math.random()\r\n                let radiusNew = 60 + randn_bm()\r\n                let randomOffset = new THREE.Vector3(randn_bm() * 10, randn_bm() * 1, randn_bm() * 10)\r\n                return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n            },\r\n            (_) => {\r\n                return new THREE.Euler(0,0,0)\r\n            },\r\n            (_) => {\r\n                return 0\r\n            },\r\n            (_) => {\r\n                if (Math.random() < 0.5) {\r\n                    return new THREE.Color(0xff0000)\r\n                }\r\n                return new THREE.Color(0x800000)\r\n            },\r\n            (_) => {\r\n                return new THREE.Color(0xffff00)\r\n            },\r\n            (ruleIn: PE.ParticleAnimRuleIn) => {\r\n                let rotateAngle = Math.atan(ruleIn.originalPosition.z / ruleIn.originalPosition.x)\r\n                if (ruleIn.originalPosition.x < 0) rotateAngle += Math.PI\r\n                rotateAngle += ruleIn.interp * ruleIn.interp\r\n                let posExpand = new THREE.Vector3().copy(ruleIn.originalPosition).multiplyScalar(ruleIn.interp)\r\n\r\n                // let posXExpand = posExpand\r\n                let posYExpand = Math.sqrt(ruleIn.interp) * 5 - 10\r\n                // posExpand.x += Math.cos(rotateAngle) * 20\r\n                // posExpand.z += Math.sin(rotateAngle) * 20\r\n                // posExpand.y = 0\r\n                posExpand.y += posYExpand\r\n                let ruleOut = {\r\n                    curPosition: posExpand,\r\n                    curRotation: new THREE.Euler(1.0, 0.0, 1.0),\r\n                    curScale: ruleIn.interp * (1 - ruleIn.interp) * 4,\r\n                    curColor: (new THREE.Color()).copy(ruleIn.originalColor).lerp(ruleIn.mixColor, ruleIn.interp * ruleIn.interp)\r\n                }\r\n                return ruleOut\r\n            }\r\n        )\r\n        pe2.mesh.position.copy(glassMesh2.position)\r\n        pe2.mesh.position.y -= 15\r\n        this.scene.add(pe2.mesh)\r\n        this.glassParticleControllerDict.push({\r\n            mesh: glassMesh2,\r\n            pe: pe2,\r\n            isTransisting: false\r\n        })\r\n        this.selectedGlassParticleController = this.glassParticleControllerDict[0]\r\n\r\n\r\n        const loader = new TDSLoader(this.loadingManager)\r\n        loader.load( './dodeca/dodeca.3ds', (obj) => {\r\n            if (obj instanceof THREE.Group && obj.children[0] instanceof THREE.Mesh) {\r\n                var dodeca = obj.children[0]\r\n                dodeca.scale.multiplyScalar(0.3)\r\n                glassAngle = -0.6 - Math.PI / 2\r\n                dodeca.position.set(Math.cos(glassAngle) * this.glassPosRadius, 30, Math.sin(glassAngle) * this.glassPosRadius)\r\n                this.refractionManager.addRefractionMesh(dodeca, true, tx, 0xffa000, 0x00c0ff, 2, 0.8)\r\n                this.intersectGlassObjs.push(dodeca)\r\n\r\n                var pe1 = new PE.ParticleRuleEngine(300, particleGeometry, particleMaterial,\r\n                    (_) => {\r\n                        // return new THREE.Vector3(0)\r\n                        let angle = 2 * Math.PI * Math.random()\r\n                        let radiusNew = 2 + randn_bm()\r\n                        let randomOffset = new THREE.Vector3(randn_bm() * 1, randn_bm() * 1, randn_bm() * 1)\r\n                        return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n                    },\r\n                    (_) => {\r\n                        return new THREE.Euler(0,0,0)\r\n                    },\r\n                    (_) => {\r\n                        return 0\r\n                    },\r\n                    (_) => {\r\n                        if (Math.random() < 0.5) {\r\n                            return new THREE.Color(0x002080)\r\n                        }\r\n                        return new THREE.Color(0x22ff70)\r\n                    },\r\n                    (_) => {\r\n                        return new THREE.Color(0xffff00)\r\n                    },\r\n                    (ruleIn: PE.ParticleAnimRuleIn) => {\r\n                        let rotateAngle = Math.atan(ruleIn.originalPosition.z / ruleIn.originalPosition.x)\r\n                        if (ruleIn.originalPosition.x < 0) rotateAngle += Math.PI\r\n                        rotateAngle -= ruleIn.interp * ruleIn.interp\r\n                        let posExpand = new THREE.Vector3(\r\n                            Math.cos(rotateAngle) * 10 + ruleIn.originalPosition.x,\r\n                            0,\r\n                            Math.sin(rotateAngle) * 10 + ruleIn.originalPosition.z).multiplyScalar(ruleIn.interp * 3 + 1 + ruleIn.randomFactor)\r\n\r\n                        let ruleOut = {\r\n                            curPosition: posExpand,\r\n                            curRotation: new THREE.Euler(1.0, 0.0, 1.0),\r\n                            curScale: ruleIn.interp * (1 - ruleIn.interp) * 4,\r\n                            curColor: (new THREE.Color()).copy(ruleIn.originalColor).lerp(ruleIn.mixColor, ruleIn.interp * ruleIn.interp)\r\n                        }\r\n                        return ruleOut\r\n                    }\r\n                )\r\n                pe1.mesh.position.copy(dodeca.position)\r\n                pe1.mesh.position.y -= 15\r\n                this.scene.add(pe1.mesh)\r\n                this.glassParticleControllerDict.push({\r\n                    mesh: dodeca,\r\n                    pe: pe1,\r\n                    isTransisting: false\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n        // *********** some leaves ***********\r\n        this.leavesParticleCount = 50\r\n        this.leavesMatrixDummy = new THREE.Object3D()\r\n        this.leavesParticlesMeshes = []\r\n\r\n        const material = new THREE.MeshNormalMaterial({\r\n            side: THREE.DoubleSide\r\n        })\r\n        loader.load( './particles/leaves.3ds', (obj) => {\r\n            if (obj instanceof THREE.Group) {\r\n                console.log(obj)\r\n                obj.children.forEach(leaf => {\r\n                    // if (leaf instanceof THREE.Mesh) {\r\n                    //     const material = new THREE.MeshNormalMaterial({\r\n                    //         side: THREE.DoubleSide\r\n                    //     });\r\n                    //     leaf.material = material\r\n                    //     this.scene.add(leaf)\r\n                    // }\r\n                    if (leaf instanceof THREE.Mesh) {\r\n                        // var mesh = new THREE.InstancedMesh( leaf.geometry, material, this.leavesParticleCount )\r\n                        var pe = new PE.ParticleStaticEngine(self.leavesParticleCount, leaf.geometry, material,\r\n                            self.getRandomLeavePosition,\r\n                            self.getRandomLeaveRotation,\r\n                            self.getRandomLeaveScale,\r\n                            (_) => new THREE.Color(0xff00000)\r\n                        )\r\n                        // for (let i = 0; i < this.leavesParticleCount; i++) {\r\n                        //     this.leavesMatrixDummy.position.copy(this.getRandomLeavePosition())\r\n                        //     this.leavesMatrixDummy.rotation.copy(this.getRandomLeaveRotation())\r\n                        //     this.leavesMatrixDummy.scale.copy(this.getRandomLeaveScale())\r\n                        //     this.leavesMatrixDummy.updateMatrix()\r\n                        //     mesh.setMatrixAt(i, this.leavesMatrixDummy.matrix)\r\n                        // }\r\n                        // // mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage ); // will be updated every frame\r\n                        \r\n                        self.scene.add( pe.mesh )\r\n                        // this.leavesParticlesMeshes.push(mesh)\r\n                    }\r\n                })\r\n                // obj.clear()\r\n                \r\n            }\r\n            // contentGroupInTardisCard1.add(obj)\r\n        })\r\n\r\n\r\n        \r\n        // var cubeGeo = ParticleEngine.getGeom(20)\r\n\r\n\r\n        // var mat = ParticleEngine.genParticleMaterial(spriteAlphaMapTexture)\r\n\r\n        // var mesh11 = new THREE.InstancedMesh(cubeGeo, mat, 8);\r\n\r\n        // this.scene.add(mesh11);\r\n\r\n\r\n\r\n        // *********** water ***********\r\n        const waterGeometry = new THREE.PlaneGeometry( 2000, 2000 )\r\n        console.log(this.composer.readBuffer)\r\n        // const water = new THREE.Mesh( waterGeometry, new THREE.MeshPhongMaterial({\r\n        //     color: new THREE.Color(0xfff0ff),\r\n        //     // map: this.composer.readBuffer.texture,\r\n        //     emissive: new THREE.Color(0x005080),\r\n        //     emissiveIntensity: 0.6\r\n        // }) );\r\n\r\n        const water = new SQWater( waterGeometry, this.scene, {\r\n            // color: params.color,\r\n            // scale: params.scale,\r\n            color: new THREE.Color(0xffff00),\r\n            flowDirection: new THREE.Vector2( 1, 1 ),\r\n            textureWidth: 1024,\r\n            textureHeight: 1024\r\n        } );\r\n\r\n        water.position.y = -10;\r\n        water.position.z -= 500;\r\n        water.rotation.x = Math.PI * - 0.5;\r\n        this.scene.add( water );\r\n\r\n        // this.refractionManager.frontScene.background = textureCube\r\n\r\n\r\n        // *********** camera movement ***********\r\n        // this.cameraTargetPosition = new THREE.Vector3(0, 0, this.cameraZPosition)\r\n        // this.camera.position.copy(this.cameraTargetPosition)\r\n        // this.camera.lookAt(0, 0, 0)\r\n        this.cameraWithMouseRotateFactor = 0.07\r\n        this.cameraWithMouseMoveFactor = 4\r\n        this.cameraTargetPosition = new THREE.Vector3().copy(glassMesh2.position)\r\n        this.cameraLootAtController = new DampingVector3Controller(new THREE.Vector3().copy(this.cameraTargetPosition), 0.9, 0.002)\r\n        window.addEventListener('mousemove', e => {\r\n            self.onMouseMove(e)\r\n        })\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.selectedGlassParticleController = undefined\r\n\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n        window.addEventListener( 'resize', () => {\r\n            self.onWindowResize()\r\n        } )\r\n        window.addEventListener( 'click', (e) => {\r\n            self.onClick(e)\r\n        } )\r\n\r\n        // *********** final animate ***********\r\n        this.animate()\r\n    }\r\n\r\n    animate = () => {\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        // this.updatecornerObject()\r\n        this.updateCamera()\r\n        this.render()\r\n        this.stats.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render()\r\n    {\r\n        this.renderer.setRenderTarget(this.refractionManager.backRenderTarget)\r\n        this.composer.render()\r\n\r\n        this.refractionManager.render()\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize() {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.refractionManager.onWindowResize()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        this.composer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    activateGlassParticleController(glassParticleController: GlassParticleController) {\r\n        const particleEngine = glassParticleController.pe\r\n        const mesh = glassParticleController.mesh\r\n        const refObj = mesh ? mesh['refractionObject'] : null\r\n        this.cameraTargetPosition.copy(mesh.position)\r\n        if (particleEngine instanceof PE.ParticleRuleEngine) {\r\n            particleEngine.transit(3000)\r\n        }\r\n        if (refObj instanceof RefractionObject) {\r\n            glassParticleController.isTransisting = true\r\n            controller.tweenEuler(mesh.rotation, new THREE.Euler(0.5,0.8,1), (v) => {\r\n                mesh.rotation.copy(v)\r\n                },\r\n                () => {\r\n                    glassParticleController.isTransisting = false\r\n                },\r\n                1500,\r\n                TWEEN.Easing.Exponential.InOut\r\n            )\r\n            controller.tweenNumber(1, 0, (val) => {\r\n                refObj.refractionMaterialUniforms['absorbColor'].value.b = val\r\n            },\r\n            () => {},\r\n            1500,\r\n            TWEEN.Easing.Exponential.InOut)\r\n        }\r\n    }\r\n\r\n    inactivateGlassParticleController(GlassParticleController: GlassParticleController) {\r\n        const mesh = GlassParticleController.mesh\r\n        const refObj = mesh ? mesh['refractionObject'] : null\r\n        \r\n        if (refObj instanceof RefractionObject) {\r\n            GlassParticleController.isTransisting = true\r\n            controller.tweenEuler(mesh.rotation, new THREE.Euler(0, 0, 0), (v) => {\r\n                mesh.rotation.copy(v)\r\n                },\r\n                () => {GlassParticleController.isTransisting = false},\r\n                1500,\r\n                TWEEN.Easing.Exponential.InOut\r\n            )\r\n            controller.tweenNumber(0, 1, (val) => {\r\n                refObj.refractionMaterialUniforms['absorbColor'].value.b = val\r\n            },\r\n            () => {},\r\n            1500,\r\n            TWEEN.Easing.Exponential.InOut)\r\n        }\r\n    }\r\n    \r\n    onMouseMove(e: MouseEvent) {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectGlassObjs, false )\r\n        if (intersects.length == 1 && this.selectedGlassParticleController?.mesh != intersects[0].object) {\r\n            this.glassParticleControllerDict.forEach(gp => {\r\n                if (gp.mesh !== intersects[0].object) {\r\n                    this.inactivateGlassParticleController(gp)\r\n                }\r\n                else {\r\n                    this.selectedGlassParticleController = gp\r\n                    this.activateGlassParticleController(gp)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onClick(e: MouseEvent) {\r\n        const intersects = this.raycaster.intersectObjects( this.intersectGlassObjs, false )\r\n        if (intersects.length == 1 && this.selectedGlassParticleController?.mesh != intersects[0].object) {\r\n            this.glassParticleControllerDict.forEach(gp => {\r\n                if (gp.mesh !== intersects[0].object) {\r\n                    this.inactivateGlassParticleController(gp)\r\n                }\r\n                else {\r\n                    this.selectedGlassParticleController = gp\r\n                    this.activateGlassParticleController(gp)\r\n                }\r\n            })\r\n        }\r\n        else if (intersects.length == 1 && this.selectedGlassParticleController?.mesh == intersects[0].object) {\r\n            if (this.selectedGlassParticleController.pe instanceof PE.ParticleRuleEngine) {\r\n                this.selectedGlassParticleController.pe.transit(3000)\r\n            }\r\n        }\r\n        // if (this.glassSelected) {\r\n        //     this.pe2.transit(2000)\r\n        // }\r\n    }\r\n\r\n    getRaycastPos(posX: number, posY: number) {\r\n        let x = (2.0 * posX) / window.innerWidth - 1.0\r\n        let y = 1.0 - (2.0 * posY) / window.innerHeight\r\n        // let z = 1.0\r\n        // let ray_nds = new THREE.Vector3(x, y, z)\r\n        let ray = new THREE.Vector3(x, y, 0.995)\r\n        ray.unproject(this.camera)\r\n        return ray\r\n    }\r\n\r\n    // updatecornerObject() {\r\n    //     let targetPos = this.getRaycastPos(window.innerWidth - 200, window.innerHeight / 2)\r\n    //     this.glassMesh1Controller.update(targetPos)\r\n    // }\r\n\r\n    updateCamera() {\r\n        const relX = window.innerWidth / 2 - this.mousePosX\r\n        const relY = window.innerHeight / 2 - this.mousePosY\r\n        // console.log(this.cameraTargetPosition)\r\n        const dampPos = (new THREE.Vector3(\r\n            -relX * this.cameraWithMouseRotateFactor,\r\n            relY * this.cameraWithMouseRotateFactor,\r\n            0\r\n        )).add(this.cameraTargetPosition)\r\n\r\n        this.cameraLootAtController.update(dampPos)\r\n        // this.cameraLootAtController.update(this.cameraTargetPosition)\r\n        this.camera.lookAt(this.cameraLootAtController.currentVec3)\r\n        var vel = this.cameraLootAtController.velocity\r\n        this.camera.position.x = vel.x * this.cameraWithMouseMoveFactor\r\n        this.camera.position.y = 200 - vel.y * this.cameraWithMouseMoveFactor\r\n    }\r\n\r\n    registerCSSCoordinator(htmlContainer: HTMLElement, htmlElem: HTMLElement, position: THREE.Vector3 = new THREE.Vector3(), scale: number = 1.0): CustomCSS3DObject {\r\n        if (this.cssRenderer == undefined) {\r\n            this.cssRenderer = new CustomCSS3DRenderer(htmlContainer)\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n        // controls = new OrbitControls(camera, cssRenderer.domElement)\r\n        const object = new CustomCSS3DObject( htmlElem )\r\n        object.position.copy(position)\r\n        object.scale.multiplyScalar(scale)\r\n        this.cssScene.add(object)\r\n        return object\r\n        // cssCoordinators.push(new ThreeCSSCoordinator(htmlContainer, htmlCamera, htmlElem, camera, position))\r\n    }\r\n\r\n\r\n    getRandomLeavePosition(index: number, radius: number = 300): THREE.Vector3 {\r\n        let angle = randn_bm() * 0.8 - Math.PI / 2\r\n        let radiusNew = radius + randn_bm()\r\n        let randomOffset = new THREE.Vector3(randn_bm() * 60, randn_bm() * 5, randn_bm() * 60)\r\n        return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n    }\r\n\r\n    getRandomLeaveRotation(index: number, scale: number = 10): THREE.Euler {\r\n        return new THREE.Euler(Math.random() * scale, Math.random() * scale, 0)\r\n    }\r\n\r\n    getRandomLeaveScale(): number {\r\n        return Math.random() * 0.2 + 0.2\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport {\r\n    FrontPageManager\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { FrontPageManager } from '../scripts/FrontPage2.0'\r\n\r\ntype Data = {\r\n    fpm: FrontPageManager | null,\r\n    loadingStat: {\r\n        loaded: number,\r\n        total: number,\r\n        isLoaded: boolean,\r\n        noLoadingStat: boolean\r\n    }\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            fpm: null,\r\n            loadingStat: {\r\n                loaded: 0,\r\n                total: 1,\r\n                isLoaded: false,\r\n                noLoadingStat: false\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.fpm = new FrontPageManager(\r\n                this.$refs['canvas-container'],\r\n                () => {\r\n                    console.log('loaded')\r\n                    self.loadingStat.isLoaded = true\r\n                    setTimeout(() => {\r\n                        self.loadingStat.noLoadingStat = true\r\n                    }, 501)\r\n                },\r\n                (_, loaded, total) => {\r\n                    this.loadingStat.loaded = loaded\r\n                    this.loadingStat.total = total\r\n                },\r\n                (url) => {\r\n                    console.error('failed to load asset: ' + url)\r\n                    self.loadingStat.isLoaded = true\r\n                }\r\n            )\r\n            if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n                this.fpm.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-200, 200, 0))\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        onGlassClick() {\r\n            alert('glass clicked!')\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeFrontpageTest2.vue?vue&type=template&id=504acd3e&scoped=true&\"\nimport script from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=504acd3e&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"504acd3e\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=504acd3e&scoped=true&lang=css&\"","// inspired by https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js\r\n\r\nimport * as THREE from 'three'\r\n// import { loadShader } from '../Three/ShaderLoader'\r\nimport { controller } from '../AnimUtils/TweenUtils'\r\n\r\nexport class ParticleController {\r\n    birthTime: number\r\n    deathTime: number\r\n    position: THREE.Vector3\r\n    scale: number\r\n    rotation: THREE.Euler\r\n    // velocity: THREE.Vector3\r\n    // acceleration: THREE.Vector3\r\n    color: THREE.Color\r\n    instanceIndex: number\r\n    dummy: THREE.Object3D\r\n    constructor(position: THREE.Vector3, rotation: THREE.Euler, scale: number, color: THREE.Color, instanceIndex: number) {\r\n        this.birthTime = 0\r\n        this.deathTime = 1\r\n        this.position = position\r\n        this.rotation = rotation\r\n        this.scale = scale\r\n        this.dummy = new THREE.Object3D()\r\n        // this.velocity = new THREE.Vector3(0, 0, 0)\r\n        // this.acceleration = new THREE.Vector3(0, 0, 0)\r\n        this.color = color\r\n        this.instanceIndex = instanceIndex\r\n    }\r\n    resetGeom(mesh: THREE.InstancedMesh) {\r\n        this.dummy.position.copy(this.position)\r\n        this.dummy.rotation.copy(this.rotation)\r\n        this.dummy.scale.set(this.scale, this.scale, this.scale)\r\n        this.dummy.updateMatrix()\r\n        mesh.setMatrixAt(this.instanceIndex, this.dummy.matrix)\r\n        mesh.setColorAt(this.instanceIndex, this.color)\r\n    }\r\n}\r\n\r\nexport type ParticleAnimRuleIn = {\r\n    index: number,\r\n    interp: number,\r\n    originalPosition: THREE.Vector3,\r\n    originalRotation: THREE.Euler,\r\n    originalScale: number,\r\n    originalColor: THREE.Color,\r\n    mixColor: THREE.Color,\r\n    randomFactor: number\r\n}\r\n\r\nexport type ParticleAnimRuleOut = {\r\n    curPosition: THREE.Vector3,\r\n    curRotation: THREE.Euler,\r\n    curScale: number,\r\n    curColor: THREE.Color\r\n}\r\n\r\nexport class ParticleRuleController extends ParticleController {\r\n    direction: THREE.Vector3\r\n    mixColor: THREE.Color\r\n    randomFactor: number\r\n    constructor(position: THREE.Vector3, rotation: THREE.Euler, scale: number, color: THREE.Color, mixColor: THREE.Color, instanceIndex: number) {\r\n        super(position, rotation, scale, color, instanceIndex)\r\n        this.direction = new THREE.Vector3().copy(position)\r\n        this.birthTime = Math.random() * 0.2\r\n        this.deathTime = Math.random() * 0.2 + 0.8\r\n        this.mixColor = mixColor\r\n        this.randomFactor = Math.random()\r\n    }\r\n    updateGeomByRule(\r\n    mesh: THREE.InstancedMesh, interp: number,\r\n    animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut) {\r\n        if (interp < this.birthTime) {\r\n            return\r\n        }\r\n        else if (interp >= this.deathTime) {\r\n            this.resetGeom(mesh)\r\n            return\r\n        }\r\n        else {\r\n            let ruleOut = animRuleFunc({\r\n                index: this.instanceIndex,\r\n                interp: (interp - this.birthTime) / (this.deathTime - this.birthTime),\r\n                originalPosition: this.position,\r\n                originalRotation: this.rotation,\r\n                originalColor: this.color,\r\n                originalScale: this.scale,\r\n                mixColor: this.mixColor,\r\n                randomFactor: this.randomFactor\r\n            })\r\n            this.dummy.position.copy(ruleOut.curPosition)\r\n            this.dummy.rotation.copy(ruleOut.curRotation)\r\n            this.dummy.scale.set(ruleOut.curScale, ruleOut.curScale, ruleOut.curScale)\r\n            this.dummy.updateMatrix()\r\n            mesh.setMatrixAt(this.instanceIndex, this.dummy.matrix)\r\n            mesh.setColorAt(this.instanceIndex, ruleOut.curColor)\r\n        }\r\n    }\r\n}\r\n\r\nexport class AbstractParticleEngine {\r\n    particleCount: number\r\n    mesh: THREE.InstancedMesh\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        // setInitPosition: (index: number) => THREE.Vector3,\r\n        // setInitRotation: (index: number) => THREE.Euler,\r\n        // setInitScale: (index: number) => number,\r\n        // setInitColor: (index: number) => THREE.Color,\r\n        ) {\r\n        this.particleCount = particleCount\r\n        this.mesh = new THREE.InstancedMesh(geometry, material, particleCount)\r\n        this.mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage )\r\n        // this.particleControllers = []\r\n        // for (let i = 0; i < particleCount; i++) {\r\n        //     let initPosition = setInitPosition(i)\r\n        //     let initRotation = setInitRotation(i)\r\n        //     let initScale = setInitScale(i)\r\n        //     let initColor = setInitColor(i)\r\n        //     let tempParticleController = new ParticleController(initPosition, initRotation, initScale, initColor)\r\n        //     this.particleControllers.push(\r\n        //         tempParticleController\r\n        //     )\r\n        //     tempParticleController.updateGeomForMesh(this.mesh, this.dummy, i)\r\n        // }\r\n    }\r\n}\r\n\r\n\r\nexport class ParticleStaticEngine extends AbstractParticleEngine {\r\n    particleControllers: Array<ParticleController>\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        setInitPosition: (index: number) => THREE.Vector3,\r\n        setInitRotation: (index: number) => THREE.Euler,\r\n        setInitScale: (index: number) => number,\r\n        setInitColor: (index: number) => THREE.Color,\r\n    ) {\r\n        super(particleCount, geometry, material)\r\n        this.particleControllers = []\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let initPosition = setInitPosition(i)\r\n            let initRotation = setInitRotation(i)\r\n            let initScale = setInitScale(i)\r\n            let initColor = setInitColor(i)\r\n            let tempParticleController = new ParticleController(initPosition, initRotation, initScale, initColor, i)\r\n            this.particleControllers.push(\r\n                tempParticleController\r\n            )\r\n            tempParticleController.resetGeom(this.mesh)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class ParticleRuleEngine extends AbstractParticleEngine {\r\n    isInTransition: boolean\r\n    particleControllers: Array<ParticleRuleController>\r\n    animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        setInitPosition: (index: number) => THREE.Vector3,\r\n        setInitRotation: (index: number) => THREE.Euler,\r\n        setInitScale: (index: number) => number,\r\n        setInitColor: (index: number) => THREE.Color,\r\n        setInitMixColor: (index: number) => THREE.Color,\r\n        animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut\r\n    ) {\r\n        super(particleCount, geometry, material)\r\n        this.isInTransition = false\r\n        this.particleControllers = []\r\n        this.animRuleFunc = animRuleFunc\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let initPosition = setInitPosition(i)\r\n            let initRotation = setInitRotation(i)\r\n            let initScale = setInitScale(i)\r\n            let initColor = setInitColor(i)\r\n            let initMixColor = setInitMixColor(i)\r\n            let tempParticleController = new ParticleRuleController(\r\n                initPosition, initRotation, initScale, initColor, initMixColor, i\r\n            )\r\n            this.particleControllers.push(\r\n                tempParticleController\r\n            )\r\n            tempParticleController.resetGeom(this.mesh)\r\n        }\r\n    }\r\n    transit(transitionTime: number = 1000) {\r\n        if (this.isInTransition) {\r\n            return\r\n        }\r\n        const self = this\r\n        controller.tweenNumber(0, 1, (interp) => {\r\n            self.particleControllers.forEach(pc => {\r\n                pc.updateGeomByRule(self.mesh, interp, self.animRuleFunc)\r\n            })\r\n            self.mesh.instanceMatrix.needsUpdate = true\r\n            if (self.mesh.instanceColor) {\r\n                self.mesh.instanceColor.needsUpdate = true\r\n            }\r\n        },\r\n        () => {\r\n            self.isInTransition = false\r\n            // self.particleControllers.forEach(pc => {\r\n            //     pc.resetGeom(self.mesh, self.dummy)\r\n            // })\r\n            self.mesh.instanceMatrix.needsUpdate = true\r\n            if (self.mesh.instanceColor) {\r\n                self.mesh.instanceColor.needsUpdate = true\r\n            }\r\n        }, transitionTime)\r\n    }\r\n}"],"sourceRoot":""}