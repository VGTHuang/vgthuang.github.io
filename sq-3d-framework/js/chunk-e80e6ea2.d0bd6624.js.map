{"version":3,"sources":["webpack:///./src/scripts/Three/Utils.ts","webpack:///./node_modules/core-js/modules/es.math.sign.js","webpack:///./src/views/ThreeCarousel.vue?5911","webpack:///./src/views/ThreeCarousel.vue?29cd","webpack:///./src/scripts/FrontPage3.0/index.ts","webpack:///./src/scripts/FrontPage3.0/Carousel.ts","webpack:///./src/views/ThreeCarousel.vue","webpack:///./src/views/ThreeCarousel.vue?07d0","webpack:///./src/views/ThreeCarousel.vue?3a68","webpack:///./node_modules/core-js/internals/math-sign.js"],"names":["DampingObjectController","object","damp","attract","this","velocity","childObjects","push","target","multiplyScalar","currentPath","sub","position","add","forEach","obj","copy","rotation","DampingVector3Controller","currentVec3","randn_bm","u","v","Math","random","sqrt","log","cos","PI","$","sign","stat","render","_vm","_h","$createElement","_c","_self","ref","attrs","staticClass","class","loadingStat","isLoaded","noLoadingStat","style","width","loaded","total","_v","_s","round","staticRenderFns","angle","radius","z","momentum","attraction","relVelocity","staticThreshold","angleTarget","radiusTarget","zTarget","angleV","radiusV","zV","isAlmostStatic","afterStaticEvent","undefined","sin","val","abs","nonlinear","isPreviousAlmostStatic","mesh","info","controller","getPosition","getRotation","update","_container","cardInfos","onLoad","onProgress","onError","onCardFocus","onCardRouteJump","configs","cardSizeX","cardSizeY","cardRingRadius","cardRingFocusRadius","cardMomentum","cardAttraction","cardRelVelocity","wheelSpeedFactor","cameraDist","isScenePaused","requestAnimationFrame","animate","cards","card","updateByController","stats","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","cssRenderer","e","lastWheelTime","Date","getTime","deltaY","carouselRotateAngle","self","setTimeout","newTime","newCarouselRotateAngle","newIndex","length","console","pickCard","pickedCardIndex","makeCarousel","mousePosX","clientX","mousePosY","clientY","pointer","x","y","raycaster","setFromCamera","intersects","intersectObjects","intersectObjs","clickedCardIndex","container","alpha","setClearColor","setPixelRatio","devicePixelRatio","domElement","top","left","appendChild","shadowMap","enabled","type","zIndex","cameraBasicLookAt","cameraBasicPosition","lookAt","scene","cssScene","loadingManager","url","cardGroup","cardGeom","cardInfo","cardIndex","tx","load","imgUrl","map","side","castShadow","receiveShadow","cameraPositionController","cameraWithMouseRotateFactor","resumeScene","angleUnit","index","oldIndex","makeCarouselFocus","dampPos","removeEventListener","onWindowResize","onMouseWheel","onMouseMove","onClick","addEventListener","extend","data","cm","Array","mounted","i","floor","$refs","HTMLElement","_","error","methods","onGlassClick","alert","component","module","exports"],"mappings":"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","file":"js/chunk-e80e6ea2.d0bd6624.js","sourcesContent":["import { Vector3, Object3D } from 'three'\r\n\r\nexport class DampingObjectController {\r\n    damp: number\r\n    attract: number\r\n    object: Object3D\r\n    velocity: Vector3\r\n    childObjects: Array<Object3D>\r\n    constructor(object: Object3D, damp: number = 0.5, attract: number = 0.5) {\r\n        this.damp = damp\r\n        this.attract = attract\r\n        this.object = object\r\n        this.velocity = new Vector3()\r\n        this.childObjects = []\r\n    }\r\n    addChildObj(object: Object3D) {\r\n        this.childObjects.push(object)\r\n    }\r\n    update(target: Vector3) {\r\n        this.velocity.multiplyScalar(this.damp)\r\n        let currentPath = target.sub(this.object.position)\r\n        this.velocity.add(currentPath.multiplyScalar(this.attract))\r\n        this.object.position.add(this.velocity)\r\n        this.childObjects.forEach(obj => {\r\n            obj.position.copy(this.object.position)\r\n            obj.rotation.copy(this.object.rotation)\r\n        })\r\n    }\r\n}\r\n\r\nexport class DampingVector3Controller {\r\n    damp: number\r\n    attract: number\r\n    velocity: Vector3\r\n    currentVec3: Vector3\r\n    constructor(currentVec3: Vector3, damp: number = 0.5, attract: number = 0.5) {\r\n        this.damp = damp\r\n        this.attract = attract\r\n        this.velocity = new Vector3()\r\n        this.currentVec3 = currentVec3\r\n    }\r\n    update(target: Vector3) {\r\n        this.velocity.multiplyScalar(this.damp)\r\n        let currentPath = new Vector3().copy(target).sub(this.currentVec3)\r\n        this.velocity.add(currentPath.multiplyScalar(this.attract))\r\n        this.currentVec3.add(this.velocity)\r\n    }\r\n}\r\n\r\nexport function randn_bm(): number {\r\n    var u = 0, v = 0;\r\n    while(u === 0) u = Math.random(); //Converting [0,1) to (0,1)\r\n    while(v === 0) v = Math.random();\r\n    return Math.sqrt( -2.0 * Math.log( u ) ) * Math.cos( 2.0 * Math.PI * v );\r\n}","var $ = require('../internals/export');\nvar sign = require('../internals/math-sign');\n\n// `Math.sign` method\n// https://tc39.es/ecma262/#sec-math.sign\n$({ target: 'Math', stat: true }, {\n  sign: sign\n});\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeCarousel.vue?vue&type=style&index=0&id=d72f668e&scoped=true&lang=css&\"","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}},[_c('div',{staticClass:\"loading-container\",class:{\n            'loading-container--hidden': _vm.loadingStat.isLoaded,\n            'loading-container--none': _vm.loadingStat.noLoadingStat\n        }},[_c('div',{staticClass:\"load-stat\"},[_c('div',{staticClass:\"load-pgbar\",style:({\n                    width: 100 * _vm.loadingStat.loaded / _vm.loadingStat.total + '%'\n                })}),_c('div',{staticClass:\"load-text\"},[_vm._v(_vm._s(Math.round(100 * _vm.loadingStat.loaded / _vm.loadingStat.total))+\" %\")])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as THREE from 'three'\r\nimport { Stats } from 'three-stats'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from './CustomCSS3DRenderer'\r\nimport { DampingObjectController, DampingVector3Controller } from '../Three/Utils'\r\n\r\ninterface CardInfo {\r\n    imgUrl: string,\r\n    url: string\r\n}\r\n\r\nclass CardController {\r\n\r\n    angle: number\r\n    radius: number\r\n    z: number\r\n\r\n    angleTarget: number\r\n    radiusTarget: number\r\n    zTarget: number\r\n\r\n    angleV: number\r\n    radiusV: number\r\n    zV: number\r\n\r\n    momentum: number\r\n    attraction: number\r\n    relVelocity: number\r\n\r\n    isAlmostStatic: boolean\r\n    staticThreshold: number\r\n\r\n    afterStaticEvent: Function | undefined\r\n\r\n    constructor(\r\n        angle: number, radius: number, z: number,\r\n        momentum: number, attraction: number, relVelocity: number, staticThreshold: number = 1e-2) {\r\n        this.angle = angle\r\n        this.radius = radius\r\n        this.z = z\r\n        this.angleTarget = angle\r\n        this.radiusTarget = radius\r\n        this.zTarget = z\r\n        this.angleV = 0\r\n        this.radiusV = 0\r\n        this.zV = 0\r\n        this.momentum = momentum\r\n        this.attraction = attraction\r\n        this.relVelocity = relVelocity\r\n        this.isAlmostStatic = true\r\n        this.staticThreshold = staticThreshold\r\n        this.afterStaticEvent = undefined\r\n    }\r\n    getPosition () {\r\n        return new THREE.Vector3(-this.radius * Math.cos(this.angle+Math.PI/2), this.radius * Math.sin(this.angle+Math.PI/2), -this.z)\r\n    }\r\n    getRotation () {\r\n        return new THREE.Euler(0, 0, -this.angle-Math.PI/2)\r\n    }\r\n    nonlinear (val: number) {\r\n        return Math.sqrt(Math.abs(val)) * Math.sign(val) \r\n    }\r\n    update () {\r\n        // v\r\n        this.angleV = this.attraction * this.nonlinear(this.angleTarget - this.angle) + this.momentum * this.angleV\r\n        this.radiusV = this.attraction * this.nonlinear(this.radiusTarget - this.radius) + this.momentum * this.radiusV\r\n        this.zV = this.attraction * this.nonlinear(this.zTarget - this.z) + this.momentum * this.zV\r\n        // p\r\n        this.angle += this.relVelocity * this.angleV * 0.1\r\n        this.radius += this.relVelocity * this.radiusV\r\n        this.z += this.relVelocity * this.zV\r\n        // is the card static?\r\n        let isPreviousAlmostStatic = this.isAlmostStatic\r\n        this.isAlmostStatic =\r\n            Math.abs(this.radiusTarget - this.radius)\r\n            + Math.abs(this.angleTarget - this.angle)\r\n            + Math.abs(this.zTarget - this.z) < this.staticThreshold\r\n        // if previous status is active but present static, call the event function\r\n        if (!isPreviousAlmostStatic && this.isAlmostStatic && this.afterStaticEvent) {\r\n            this.afterStaticEvent()\r\n            this.afterStaticEvent = undefined\r\n        }\r\n    }\r\n}\r\n\r\nclass Card {\r\n    mesh: THREE.Mesh\r\n    info: CardInfo\r\n    controller: CardController\r\n    constructor(mesh: THREE.Mesh, info: CardInfo, controller: CardController) {\r\n        this.mesh = mesh\r\n        this.info = info\r\n        this.controller = controller\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n    updateByController() {\r\n        this.controller.update()\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n}\r\n\r\ninterface FrontPageConfigs {\r\n\r\n    cardSizeX: number,\r\n    cardSizeY: number,\r\n\r\n    cardHelixRadius: number,\r\n    cardHelixZGap: number,\r\n    cardHelixRotateRadGap: number,\r\n\r\n    cardHelixFocusRadius: number,\r\n    cardHelixFocusRotateRadGap: number,\r\n\r\n    cardMomentum: number,\r\n    cardAttraction: number,\r\n    cardRelVelocity: number\r\n\r\n}\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    // controls: OrbitControls\r\n    scene: THREE.Scene\r\n    stats: Stats\r\n    // controls: OrbitControls\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraBasicLookAt: THREE.Vector3\r\n    cameraBasicPosition: THREE.Vector3\r\n    // cameraLootAtController: DampingVector3Controller\r\n    // cameraTargetPosition: THREE.Vector3\r\n    // cameraWithMouseRotateFactor: number\r\n    // cameraWithMouseMoveFactor: number\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectObjs: Array<THREE.Object3D>\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    // card controllers\r\n    cards: Array<Card>\r\n    cardGroup: THREE.Group\r\n    configs: FrontPageConfigs\r\n    cardGroupStatus: number\r\n\r\n    pickedCardIndex: number\r\n    onCardFocus: ((index: number) => any) | undefined\r\n    onCardRouteJump: ((url: string) => any) | undefined\r\n\r\n    // camera animations\r\n    cameraPositionController: DampingVector3Controller\r\n    cameraWithMouseRotateFactor: number\r\n\r\n    // scene pausing\r\n    isScenePaused: boolean\r\n\r\n    constructor(_container: HTMLElement,\r\n        cardInfos: Array<CardInfo>,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void,\r\n        onCardFocus?: (index: number) => any,\r\n        onCardRouteJump?: (url: string) => any,\r\n        configs: FrontPageConfigs = {\r\n            cardSizeX: 70,\r\n            cardSizeY: 50,\r\n            cardHelixRadius: 80,\r\n            cardHelixZGap: 10,\r\n            cardHelixRotateRadGap: 0.3,\r\n            cardHelixFocusRadius: 100,\r\n            cardHelixFocusRotateRadGap: 0.5,\r\n            cardMomentum: 0.85,\r\n            cardAttraction: 0.36,\r\n            cardRelVelocity: 0.16,\r\n        },\r\n        ) {\r\n        const self = this\r\n\r\n        // *********** basic settings ***********\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        this.renderer.shadowMap.enabled = true\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.cameraBasicLookAt = new THREE.Vector3(0)\r\n        this.cameraBasicPosition = new THREE.Vector3(0, 300, 350)\r\n        this.camera.position.copy(this.cameraBasicPosition)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n\r\n        // loading manager\r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n                this.stackCard()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n        \r\n        // light\r\n        const light = new THREE.DirectionalLight(0xffffff)\r\n        light.position.set(0, 500, 0)\r\n        light.castShadow = true\r\n        light.shadow.camera.left = -150\r\n        light.shadow.camera.right = 150\r\n        light.shadow.camera.bottom = -150\r\n        light.shadow.camera.top = 150\r\n        light.shadow.camera.near = 10\r\n        light.shadow.camera.far = 511\r\n        light.shadow.mapSize.width = 1024\r\n        light.shadow.mapSize.height = 1024\r\n        light.shadow.bias = -0.0001\r\n        this.scene.add(light)\r\n        // this.scene.add( new THREE.CameraHelper( light.shadow.camera ) )\r\n\r\n\r\n        // *********** floor ***********\r\n        const floorGeometry = new THREE.PlaneGeometry( 1000, 1000 )\r\n        const floor = new THREE.Mesh( floorGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x606060\r\n            })\r\n        )\r\n        floor.castShadow = false\r\n        floor.receiveShadow = true\r\n        floor.position.y = -10;\r\n        // floor.position.z -= 500;\r\n        floor.rotation.x = Math.PI * - 0.5;\r\n        this.scene.add( floor );\r\n        \r\n        // *********** cards ***********\r\n        this.intersectObjs = []\r\n        this.cardGroup = new THREE.Group()\r\n        this.cards = []\r\n        this.configs = configs\r\n        const cardGeom = new THREE.PlaneGeometry(configs.cardSizeX, configs.cardSizeY)\r\n        cardInfos.forEach((cardInfo, cardIndex) => {\r\n            let tx = new THREE.TextureLoader(this.loadingManager).load(cardInfo.imgUrl)\r\n            const card =  new Card(\r\n                    new THREE.Mesh(cardGeom, new THREE.MeshBasicMaterial(\r\n                        {\r\n                            map: tx,\r\n                            side: THREE.DoubleSide\r\n                        }\r\n                    )),\r\n                    cardInfo,\r\n                    new CardController(\r\n                        cardIndex, 200, cardIndex * 50 + 250,\r\n                        this.configs.cardMomentum,\r\n                        this.configs.cardAttraction,\r\n                        this.configs.cardRelVelocity\r\n                    )\r\n                )\r\n            card.mesh.castShadow = true\r\n            card.mesh.receiveShadow = true\r\n            this.cards.push(card)\r\n            this.cardGroup.add(card.mesh)\r\n            this.intersectObjs.push(card.mesh)\r\n        })\r\n        this.cardGroup.rotation.x = Math.PI / 2\r\n        this.scene.add(this.cardGroup)\r\n\r\n        this.pickedCardIndex = 0\r\n        this.cardGroupStatus = 0\r\n        this.onCardFocus = onCardFocus\r\n        this.onCardRouteJump = onCardRouteJump\r\n\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        \r\n\r\n        // *********** camera animations ***********\r\n        this.cameraPositionController = new DampingVector3Controller(new THREE.Vector3(), 0.9, 0.002)\r\n        this.cameraWithMouseRotateFactor = 35\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n\r\n        // *********** animate ***********\r\n        this.isScenePaused = false\r\n        this.resumeScene()\r\n    }\r\n\r\n    animate = () => {\r\n        if (this.isScenePaused) {\r\n            return\r\n        }\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        // this.updatecornerObject()\r\n        this.updateCamera()\r\n        this.cards.forEach(card => {\r\n            card.updateByController()\r\n        })\r\n        this.render()\r\n        this.stats.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render ()\r\n    {\r\n        this.renderer.render(this.scene, this.camera)\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize = () => {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    onMouseWheel = (e: WheelEvent) => {\r\n        if (this.cardGroupStatus == 2) {\r\n            if (e.deltaY > 0) {\r\n                if (this.pickedCardIndex < this.cards.length - 1) {\r\n                    this.pickedCardIndex ++\r\n                }\r\n            } else {\r\n                if (this.pickedCardIndex > 0) {\r\n                    this.pickedCardIndex --\r\n                }\r\n            }\r\n            this.pickCard(this.pickedCardIndex)\r\n        }\r\n    }\r\n    \r\n    onMouseMove = (e: MouseEvent) => {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        // this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        // const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        // if (intersects.length == 1) {\r\n        //     console.log('intersected:', intersects[0])\r\n        // }\r\n    }\r\n\r\n    onClick = (e: MouseEvent) => {\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        if (intersects.length >= 1) {\r\n            if (this.cardGroupStatus == 0) {\r\n                this.cardGroupStatus = 1\r\n                this.fanCard()\r\n            } else {\r\n                // get index of clicked card\r\n                var clickedCardIndex = 0\r\n                for (; clickedCardIndex < this.cards.length; clickedCardIndex++) {\r\n                    if (intersects[0].object == this.cards[clickedCardIndex].mesh) {\r\n                        break\r\n                    }\r\n                }\r\n                if (this.cardGroupStatus == 1) {\r\n                    this.cardGroupStatus = 2\r\n                    this.pickCard(clickedCardIndex)\r\n                    this.pickedCardIndex = clickedCardIndex\r\n                } else if (this.cardGroupStatus == 2) {\r\n                    if (this.pickedCardIndex == clickedCardIndex) {\r\n                        // focus on card (jump to related url later)\r\n                        this.cardGroupStatus = 3\r\n                        this.focusOnCard(this.pickedCardIndex)\r\n                    } else {\r\n                        this.pickCard(clickedCardIndex)\r\n                        this.pickedCardIndex = clickedCardIndex\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.cardGroupStatus == 3) {\r\n                this.cardGroupStatus = 2\r\n                this.pickCard(this.pickedCardIndex)\r\n            } else  if (this.cardGroupStatus == 2) {\r\n                this.cardGroupStatus = 1\r\n                this.fanCard()\r\n            } else if (this.cardGroupStatus == 1) {\r\n                this.cardGroupStatus = 0\r\n                this.stackCard()\r\n            }\r\n        }\r\n    }\r\n\r\n    stackCard () {\r\n        this.cards.forEach((card, index) => {\r\n            card.controller.angleTarget = 0\r\n            card.controller.radiusTarget = 0\r\n            card.controller.zTarget = index * 2\r\n        })\r\n    }\r\n\r\n    pickCard (index: number) {\r\n        /**\r\n         * focus on a single card by pulling it out a little bit\r\n         */\r\n        if (index < 0 || index > this.cards.length - 1) {\r\n            return\r\n        }\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            let card = this.cards[i]\r\n            card.controller.angleTarget = \r\n                (i - index) * this.configs.cardHelixRotateRadGap\r\n                - (this.configs.cardHelixFocusRotateRadGap - this.configs.cardHelixRotateRadGap)\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * i\r\n        }\r\n        for (let i = index + 1; i < this.cards.length; i++) {\r\n            let card = this.cards[i]\r\n            card.controller.angleTarget = \r\n                (i - index) * this.configs.cardHelixRotateRadGap\r\n                + (this.configs.cardHelixFocusRotateRadGap - this.configs.cardHelixRotateRadGap)\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * i\r\n        }\r\n        let card = this.cards[index]\r\n        card.controller.angleTarget = 0\r\n        card.controller.radiusTarget = this.configs.cardHelixFocusRadius\r\n        card.controller.zTarget = this.configs.cardHelixZGap * index\r\n        \r\n        if (this.onCardFocus) {\r\n            this.onCardFocus(index)\r\n        }\r\n    }\r\n\r\n    fanCard () {\r\n        this.cards.forEach((card, index) => {\r\n            card.controller.angleTarget = (index + 0.5 - this.cards.length/2) * this.configs.cardHelixRotateRadGap\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * index\r\n        })\r\n    }\r\n\r\n    focusOnCard (focusIndex: number) {\r\n        this.cards.forEach((card, index) => {\r\n            if (focusIndex == index) {\r\n                card.controller.radiusTarget = 0\r\n                card.controller.zTarget = 10\r\n                card.controller.afterStaticEvent = () => {\r\n                    // TODO routing!!!!!!!!!!\r\n                    this.pauseScene()\r\n                    console.log('url jumps to: ', this.cards[focusIndex].info.url)\r\n                }\r\n            } else {\r\n                card.controller.radiusTarget = 500\r\n                card.controller.afterStaticEvent = undefined\r\n            }\r\n        })\r\n    }\r\n\r\n    updateCamera() {\r\n        const dampPos = (new THREE.Vector3(\r\n            this.pointer.x * this.cameraWithMouseRotateFactor,\r\n            this.pointer.y * this.cameraWithMouseRotateFactor,\r\n            -this.pointer.y * this.cameraWithMouseRotateFactor,\r\n        ))\r\n\r\n        this.cameraPositionController.update(dampPos)\r\n        dampPos.copy(this.cameraPositionController.currentVec3).add(this.cameraBasicPosition)\r\n        // this.cameraLootAtController.update(this.cameraTargetPosition)\r\n        this.camera.position.copy(dampPos)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n        // var vel = this.cameraLootAtController.velocity\r\n        // this.camera.position.x = vel.x * this.cameraWithMouseMoveFactor\r\n        // this.camera.position.y = 200 - vel.y * this.cameraWithMouseMoveFactor\r\n    }\r\n\r\n    pauseScene () {\r\n        this.isScenePaused = true\r\n        const self = this\r\n        window.removeEventListener( 'resize', self.onWindowResize )\r\n        window.removeEventListener( 'wheel', self.onMouseWheel )\r\n        window.removeEventListener('mousemove', self.onMouseMove )\r\n        window.removeEventListener( 'click', self.onClick )\r\n    }\r\n    resumeScene () {\r\n        this.isScenePaused = false\r\n        this.animate()\r\n        const self = this\r\n        window.addEventListener( 'resize', self.onWindowResize )\r\n        window.addEventListener( 'wheel', self.onMouseWheel )\r\n        window.addEventListener('mousemove', self.onMouseMove )\r\n        window.addEventListener( 'click', self.onClick )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {\r\n    CardInfo,\r\n    CardController,\r\n    FrontPageManager\r\n}","import * as THREE from 'three'\r\nimport { Stats } from 'three-stats'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from './CustomCSS3DRenderer'\r\nimport { DampingObjectController, DampingVector3Controller } from '../Three/Utils'\r\nimport { CardInfo, CardController } from './index'\r\n\r\n\r\nclass CarouselCardController extends CardController {\r\n\r\n    constructor(\r\n        angle: number, radius: number, z: number,\r\n        momentum: number, attraction: number, relVelocity: number, staticThreshold: number = 1e-2) {\r\n        super(angle, radius, z, momentum, attraction, relVelocity, staticThreshold)\r\n    }\r\n    getPosition () {\r\n        return new THREE.Vector3(-this.radius * Math.cos(this.angle+Math.PI/2), this.radius * Math.sin(this.angle+Math.PI/2), -this.z)\r\n    }\r\n    getRotation () {\r\n        return new THREE.Euler(Math.PI/2, -this.angle, Math.PI/2)\r\n    }\r\n    nonlinear (val: number) {\r\n        return Math.sqrt(Math.abs(val)) * Math.sign(val) \r\n    }\r\n    update () {\r\n        // v\r\n        this.angleV = this.attraction * this.nonlinear(this.angleTarget - this.angle) + this.momentum * this.angleV\r\n        this.radiusV = this.attraction * this.nonlinear(this.radiusTarget - this.radius) + this.momentum * this.radiusV\r\n        this.zV = this.attraction * this.nonlinear(this.zTarget - this.z) + this.momentum * this.zV\r\n        // p\r\n        this.angle += this.relVelocity * this.angleV * 0.1\r\n        this.radius += this.relVelocity * this.radiusV\r\n        this.z += this.relVelocity * this.zV\r\n        // is the card static?\r\n        let isPreviousAlmostStatic = this.isAlmostStatic\r\n        this.isAlmostStatic =\r\n            Math.abs(this.radiusTarget - this.radius)\r\n            + Math.abs(this.angleTarget - this.angle)\r\n            + Math.abs(this.zTarget - this.z) < this.staticThreshold\r\n        // if previous status is active but present static, call the event function\r\n        if (!isPreviousAlmostStatic && this.isAlmostStatic && this.afterStaticEvent) {\r\n            this.afterStaticEvent()\r\n            this.afterStaticEvent = undefined\r\n        }\r\n    }\r\n}\r\n\r\nclass Card {\r\n    mesh: THREE.Mesh\r\n    info: CardInfo\r\n    controller: CarouselCardController\r\n    constructor(mesh: THREE.Mesh, info: CardInfo, controller: CarouselCardController) {\r\n        this.mesh = mesh\r\n        this.info = info\r\n        this.controller = controller\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n    updateByController() {\r\n        this.controller.update()\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n}\r\n\r\ninterface CarouselConfigs {\r\n\r\n    cardSizeX: number,\r\n    cardSizeY: number,\r\n\r\n    cardRingRadius: number,\r\n    cardRingFocusRadius: number,\r\n\r\n    cardMomentum: number,\r\n    cardAttraction: number,\r\n    cardRelVelocity: number,\r\n\r\n    wheelSpeedFactor: number,\r\n\r\n    cameraDist: number\r\n\r\n}\r\n\r\nclass CarouselManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    // controls: OrbitControls\r\n    scene: THREE.Scene\r\n    stats: Stats\r\n    // controls: OrbitControls\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraBasicLookAt: THREE.Vector3\r\n    cameraBasicPosition: THREE.Vector3\r\n    // cameraLootAtController: DampingVector3Controller\r\n    // cameraTargetPosition: THREE.Vector3\r\n    // cameraWithMouseRotateFactor: number\r\n    // cameraWithMouseMoveFactor: number\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectObjs: Array<THREE.Object3D>\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    // card controllers\r\n    cards: Array<Card>\r\n    cardGroup: THREE.Group\r\n    configs: CarouselConfigs\r\n    // // 0 - hide\r\n    // // 1 - carousel\r\n    // // 2 - focused carousel\r\n    // cardGroupStatus: number\r\n\r\n    pickedCardIndex: number\r\n    carouselRotateAngle: number\r\n    lastWheelTime: number\r\n    onCardFocus: ((index: number) => any) | undefined\r\n    onCardRouteJump: ((url: string) => any) | undefined\r\n\r\n    // camera animations\r\n    cameraPositionController: DampingVector3Controller\r\n    cameraWithMouseRotateFactor: number\r\n\r\n    // scene pausing\r\n    isScenePaused: boolean\r\n\r\n    constructor(_container: HTMLElement,\r\n        cardInfos: Array<CardInfo>,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void,\r\n        onCardFocus?: (index: number) => any,\r\n        onCardRouteJump?: (url: string) => any,\r\n        configs: CarouselConfigs = {\r\n            cardSizeX: 70,\r\n            cardSizeY: 50,\r\n            cardRingRadius: 90,\r\n            cardRingFocusRadius: 70,\r\n            cardMomentum: 0.87,\r\n            cardAttraction: 0.25,\r\n            cardRelVelocity: 0.18,\r\n            wheelSpeedFactor: 0.4,\r\n            cameraDist: 220,\r\n        },\r\n        ) {\r\n        const self = this\r\n\r\n        // *********** basic settings ***********\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        this.renderer.shadowMap.enabled = true\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.cameraBasicLookAt = new THREE.Vector3(0)\r\n        this.cameraBasicPosition = new THREE.Vector3(0, 0, configs.cameraDist)\r\n        this.camera.position.copy(this.cameraBasicPosition)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n\r\n        // loading manager\r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n                this.makeCarousel()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n\r\n        \r\n        // *********** cards ***********\r\n        this.intersectObjs = []\r\n        this.cardGroup = new THREE.Group()\r\n        this.cards = []\r\n        this.configs = configs\r\n        const cardGeom = new THREE.PlaneGeometry(configs.cardSizeX, configs.cardSizeY)\r\n        cardInfos.forEach((cardInfo, cardIndex) => {\r\n            let tx = new THREE.TextureLoader(this.loadingManager).load(cardInfo.imgUrl)\r\n            const card =  new Card(\r\n                    new THREE.Mesh(cardGeom, new THREE.MeshBasicMaterial(\r\n                        {\r\n                            map: tx,\r\n                            side: THREE.DoubleSide\r\n                        }\r\n                    )),\r\n                    cardInfo,\r\n                    new CarouselCardController(\r\n                        Math.random()*2 + cardIndex * Math.PI * 2 / cardInfos.length, 200, Math.random() * 200 + 100,\r\n                        this.configs.cardMomentum,\r\n                        this.configs.cardAttraction,\r\n                        this.configs.cardRelVelocity\r\n                    )\r\n                )\r\n            card.mesh.castShadow = true\r\n            card.mesh.receiveShadow = true\r\n            this.cards.push(card)\r\n            this.cardGroup.add(card.mesh)\r\n            this.intersectObjs.push(card.mesh)\r\n        })\r\n        this.cardGroup.rotation.x = Math.PI / 2\r\n        this.scene.add(this.cardGroup)\r\n\r\n        this.carouselRotateAngle = 0\r\n        this.pickedCardIndex = 0\r\n        this.lastWheelTime = 0\r\n        // this.cardGroupStatus = 0\r\n        this.onCardFocus = onCardFocus\r\n        this.onCardRouteJump = onCardRouteJump\r\n\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        \r\n\r\n        // *********** camera animations ***********\r\n        this.cameraPositionController = new DampingVector3Controller(new THREE.Vector3(), 0.9, 0.002)\r\n        this.cameraWithMouseRotateFactor = 35\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n\r\n        // *********** animate ***********\r\n        this.isScenePaused = false\r\n        this.resumeScene()\r\n    }\r\n\r\n    animate = () => {\r\n        if (this.isScenePaused) {\r\n            return\r\n        }\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        // this.updatecornerObject()\r\n        // this.updateCamera()\r\n        this.cards.forEach(card => {\r\n            card.updateByController()\r\n        })\r\n        this.render()\r\n        this.stats.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render ()\r\n    {\r\n        this.renderer.render(this.scene, this.camera)\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize = () => {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    onMouseWheel = (e: WheelEvent) => {\r\n        this.lastWheelTime = (new Date()).getTime()\r\n        if (e.deltaY > 0) {\r\n            this.carouselRotateAngle += this.configs.wheelSpeedFactor\r\n        } else {\r\n            this.carouselRotateAngle -= this.configs.wheelSpeedFactor\r\n        }\r\n        const self = this\r\n        setTimeout(() => {\r\n            var newTime = (new Date()).getTime()\r\n            if (newTime - self.lastWheelTime >= 199) {\r\n                // to int\r\n                var newCarouselRotateAngle = Math.round(self.carouselRotateAngle)\r\n                var newIndex = ((newCarouselRotateAngle % self.cards.length) + self.cards.length) % self.cards.length\r\n                console.log('AAAAAAAAAA', newIndex, newCarouselRotateAngle)\r\n                self.pickCard(self.pickedCardIndex, newIndex)\r\n            }\r\n        }, 200)\r\n        this.makeCarousel()\r\n    }\r\n    \r\n    onMouseMove = (e: MouseEvent) => {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        // this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        // const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        // if (intersects.length == 1) {\r\n        //     console.log('intersected:', intersects[0])\r\n        // }\r\n    }\r\n\r\n    onClick = (e: MouseEvent) => {\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        if (intersects.length >= 1) {\r\n            // get index of clicked card\r\n            var clickedCardIndex = 0\r\n            for (; clickedCardIndex < this.cards.length; clickedCardIndex++) {\r\n                if (intersects[0].object == this.cards[clickedCardIndex].mesh) {\r\n                    break\r\n                }\r\n            }\r\n            this.pickCard(this.pickedCardIndex, clickedCardIndex)\r\n        }\r\n    }\r\n\r\n    makeCarousel () {\r\n        var angleUnit = Math.PI * 2 / this.cards.length\r\n        this.cards.forEach((card, index) => {\r\n            card.controller.angleTarget = (index - this.carouselRotateAngle) * angleUnit\r\n            card.controller.radiusTarget = this.configs.cardRingRadius\r\n            card.controller.zTarget = 0\r\n        })\r\n    }\r\n\r\n    makeCarouselFocus (oldIndex: number, newIndex: number) {\r\n        if (newIndex < oldIndex) {\r\n            newIndex += this.cards.length\r\n        }\r\n        this.carouselRotateAngle = Math.round(this.carouselRotateAngle)\r\n        if (newIndex <= oldIndex + this.cards.length/2) {\r\n            // clockwise\r\n            this.carouselRotateAngle += (newIndex - oldIndex)\r\n        } else {\r\n            // anti-clockwise\r\n            this.carouselRotateAngle += (newIndex - oldIndex - this.cards.length)\r\n        }\r\n        this.makeCarousel()\r\n    }\r\n\r\n    pickCard (oldIndex: number, newIndex: number) {\r\n        /**\r\n         * focus on a single card by pulling it out a little bit\r\n         */\r\n        if (newIndex < 0 || newIndex > this.cards.length - 1) {\r\n            return\r\n        }\r\n        this.makeCarouselFocus(oldIndex, newIndex)\r\n        if (this.onCardFocus) {\r\n            this.onCardFocus(newIndex)\r\n        }\r\n        this.pickedCardIndex = newIndex\r\n    }\r\n\r\n    updateCamera() {\r\n        const dampPos = (new THREE.Vector3(\r\n            this.pointer.x * this.cameraWithMouseRotateFactor,\r\n            this.pointer.y * this.cameraWithMouseRotateFactor,\r\n            -this.pointer.y * this.cameraWithMouseRotateFactor,\r\n        ))\r\n\r\n        this.cameraPositionController.update(dampPos)\r\n        dampPos.copy(this.cameraPositionController.currentVec3).add(this.cameraBasicPosition)\r\n        // this.cameraLootAtController.update(this.cameraTargetPosition)\r\n        this.camera.position.copy(dampPos)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n        // var vel = this.cameraLootAtController.velocity\r\n        // this.camera.position.x = vel.x * this.cameraWithMouseMoveFactor\r\n        // this.camera.position.y = 200 - vel.y * this.cameraWithMouseMoveFactor\r\n    }\r\n\r\n    pauseScene () {\r\n        this.isScenePaused = true\r\n        const self = this\r\n        window.removeEventListener( 'resize', self.onWindowResize )\r\n        window.removeEventListener( 'wheel', self.onMouseWheel )\r\n        window.removeEventListener('mousemove', self.onMouseMove )\r\n        window.removeEventListener( 'click', self.onClick )\r\n    }\r\n    resumeScene () {\r\n        this.isScenePaused = false\r\n        this.animate()\r\n        const self = this\r\n        window.addEventListener( 'resize', self.onWindowResize )\r\n        window.addEventListener( 'wheel', self.onMouseWheel )\r\n        window.addEventListener('mousemove', self.onMouseMove )\r\n        window.addEventListener( 'click', self.onClick )\r\n    }\r\n\r\n}\r\n\r\n\r\nexport {\r\n    CarouselManager\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { CardInfo } from '../scripts/FrontPage3.0'\r\nimport { CarouselManager } from '../scripts/FrontPage3.0/Carousel'\r\n\r\ntype Data = {\r\n    cm: CarouselManager | null,\r\n    loadingStat: {\r\n        loaded: number,\r\n        total: number,\r\n        isLoaded: boolean,\r\n        noLoadingStat: boolean\r\n    },\r\n    cardInfos: Array<CardInfo>\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            cm: null,\r\n            loadingStat: {\r\n                loaded: 0,\r\n                total: 1,\r\n                isLoaded: false,\r\n                noLoadingStat: false\r\n            },\r\n            cardInfos: new Array<CardInfo>()\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this\r\n        for (let i = 0; i < 10; i++) {\r\n            this.cardInfos.push(\r\n                {\r\n                    imgUrl: `card${Math.floor(i%3)+1}.jpg`,\r\n                    url: 'fakeUrl_' + i\r\n                }\r\n            )\r\n        }\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.cm = new CarouselManager(\r\n                this.$refs['canvas-container'],\r\n                this.cardInfos,\r\n                () => {\r\n                    console.log('loaded')\r\n                    self.loadingStat.isLoaded = true\r\n                    setTimeout(() => {\r\n                        self.loadingStat.noLoadingStat = true\r\n                    }, 501)\r\n                },\r\n                (_, loaded, total) => {\r\n                    this.loadingStat.loaded = loaded\r\n                    this.loadingStat.total = total\r\n                },\r\n                (url) => {\r\n                    console.error('failed to load asset: ' + url)\r\n                    self.loadingStat.isLoaded = true\r\n                },\r\n                (index) => {\r\n                    console.log('focused on card: ', index)\r\n                }\r\n            )\r\n            // if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n            //     this.fpm.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-200, 200, 0))\r\n            // }\r\n        }\r\n    },\r\n    methods: {\r\n        onGlassClick() {\r\n            alert('glass clicked!')\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeCarousel.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeCarousel.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeCarousel.vue?vue&type=template&id=d72f668e&scoped=true&\"\nimport script from \"./ThreeCarousel.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeCarousel.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeCarousel.vue?vue&type=style&index=0&id=d72f668e&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"d72f668e\",\n  null\n  \n)\n\nexport default component.exports","// `Math.sign` method implementation\n// https://tc39.es/ecma262/#sec-math.sign\n// eslint-disable-next-line es/no-math-sign -- safe\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n"],"sourceRoot":""}