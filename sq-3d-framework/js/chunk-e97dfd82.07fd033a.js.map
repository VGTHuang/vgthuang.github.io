{"version":3,"sources":["webpack:///./src/views/ThreeSceneTest.vue?60a9","webpack:///./node_modules/three/examples/jsm/shaders/FXAAShader.js","webpack:///./src/scripts/Three/ThreeSceneLoader.ts","webpack:///./src/views/ThreeSceneTest.vue","webpack:///./src/views/ThreeSceneTest.vue?8407","webpack:///./src/views/ThreeSceneTest.vue?51e8","webpack:///./src/views/ThreeSceneTest.vue?c875"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","attrs","_v","staticClass","on","cornerClicked","staticRenderFns","FXAAShader","uniforms","value","vertexShader","fragmentShader","container","renderer","camera","controls","fxaaPass","composer","cardOutsideScene","cardInsideScene","stats","cornerObject","cornerObjectClone","cornerObjectController","cssScene","cssRenderer","cursorLightGroup","cursorLight","cursorLightController","mouseX","mouseY","glassBackScene","glassFrontScene","glassBackRenderTarget","glassBackdepthTexture","glassFrontMaterial","initScene","_container","window","innerWidth","innerHeight","position","set","lookAt","antialias","setClearColor","setPixelRatio","devicePixelRatio","setSize","appendChild","domElement","OrbitControls","style","top","left","zIndex","tardisCard1","TardisCard","contentInTardisCard1","color","contentInTardisCard2","contentGroupInTardisCard1","add","copy","cardMesh","z","addVisibleObjectGroup","glassNormalTexture","load","tardisCard2","contentInTardisCard3","metalness","roughness","clearcoat","normalMap","contentInTardisCard4","contentGroupInTardisCard2","hemiLight","dirLight","r","urls","reflectionTextureCube","environment","addFrontWall","reflectivity","clearcoatRoughness","addSkybox","intensity","decay","distance","addEventListener","e","clientX","clientY","renderPass1","RenderPass","clear","renderPass2","clearDepth","ShaderPass","material","x","offsetWidth","y","offsetHeight","EffectComposer","addPass","renderTarget1","stencilBuffer","renderTarget2","renderToScreen","depthBuffer","depthTexture","type","glassDiffuseMaterial","cornerGeom","map","transparent","side","rotation","Math","random","PI","glassFrontVS","glassFrontFS","console","log","glassFrontUniforms","texture","depthTest","clone","addChildObj","background","onWindowResize","animate","registerCSSCoordinator","htmlContainer","htmlElem","undefined","CustomCSS3DRenderer","object","getRaycastPos","posX","posY","ray","unproject","updatecornerObject","targetPos","update","updateCursorLight","isNaN","camPosZ","targetPosVec","sub","newz","multiplyScalar","aspect","updateProjectionMatrix","requestAnimationFrame","setRenderTarget","extend","mounted","$refs","HTMLElement","cornerObj","setFollowObject","methods","alert","component"],"mappings":"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","file":"js/chunk-e97dfd82.07fd033a.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}}),_c('div',{ref:\"dom3d-container\",attrs:{\"id\":\"dom3d-container\"}},[_c('div',{ref:\"dom3d-test\",attrs:{\"id\":\"dom3d-test\"}},[_c('p',[_vm._v(\"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.\")]),_c('p',[_vm._v(\"Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.\")])]),_c('div',{ref:\"dom3d-corner\",attrs:{\"id\":\"dom3d-corner\"}},[_c('div',{staticClass:\"dom3d-corner-ball\",on:{\"click\":_vm.cornerClicked}},[_c('div',{staticClass:\"dom3d-corner-ball__text\"},[_vm._v(\"click me!\")])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import {\n\tVector2\n} from 'three';\n\n/**\n * NVIDIA FXAA by Timothy Lottes\n * https://developer.download.nvidia.com/assets/gamedev/files/sdk/11/FXAA_WhitePaper.pdf\n * - WebGL port by @supereggbert\n * http://www.glge.org/demos/fxaa/\n */\n\nconst FXAAShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'resolution': { value: new Vector2( 1 / 1024, 1 / 512 ) }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader:\n\n\t// FXAA 3.11 implementation by NVIDIA, ported to WebGL by Agost Biro (biro@archilogic.com)\n\n\t//----------------------------------------------------------------------------------\n\t// File:\t\t\t\tes3-kepler\\FXAA\\assets\\shaders/FXAA_DefaultES.frag\n\t// SDK Version: v3.00\n\t// Email:\t\t\t gameworks@nvidia.com\n\t// Site:\t\t\t\thttp://developer.nvidia.com/\n\t//\n\t// Copyright (c) 2014-2015, NVIDIA CORPORATION. All rights reserved.\n\t//\n\t// Redistribution and use in source and binary forms, with or without\n\t// modification, are permitted provided that the following conditions\n\t// are met:\n\t//\t* Redistributions of source code must retain the above copyright\n\t//\t\tnotice, this list of conditions and the following disclaimer.\n\t//\t* Redistributions in binary form must reproduce the above copyright\n\t//\t\tnotice, this list of conditions and the following disclaimer in the\n\t//\t\tdocumentation and/or other materials provided with the distribution.\n\t//\t* Neither the name of NVIDIA CORPORATION nor the names of its\n\t//\t\tcontributors may be used to endorse or promote products derived\n\t//\t\tfrom this software without specific prior written permission.\n\t//\n\t// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS ``AS IS\\'\\' AND ANY\n\t// EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n\t// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\n\t// PURPOSE ARE DISCLAIMED.\tIN NO EVENT SHALL THE COPYRIGHT OWNER OR\n\t// CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\n\t// EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n\t// PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\n\t// PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n\t// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n\t// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n\t// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\t//\n\t//----------------------------------------------------------------------------------\n\n\t/* glsl */`\n\n\t\tprecision highp float;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tuniform vec2 resolution;\n\n\t\tvarying vec2 vUv;\n\n\t\t#define FXAA_PC 1\n\t\t#define FXAA_GLSL_100 1\n\t\t#define FXAA_QUALITY_PRESET 12\n\n\t\t#define FXAA_GREEN_AS_LUMA 1\n\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_PC_CONSOLE\n\t\t\t\t//\n\t\t\t\t// The console algorithm for PC is included\n\t\t\t\t// for developers targeting really low spec machines.\n\t\t\t\t// Likely better to just run FXAA_PC, and use a really low preset.\n\t\t\t\t//\n\t\t\t\t#define FXAA_PC_CONSOLE 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GLSL_120\n\t\t\t\t#define FXAA_GLSL_120 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GLSL_130\n\t\t\t\t#define FXAA_GLSL_130 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_3\n\t\t\t\t#define FXAA_HLSL_3 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_4\n\t\t\t\t#define FXAA_HLSL_4 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_HLSL_5\n\t\t\t\t#define FXAA_HLSL_5 0\n\t\t#endif\n\t\t/*==========================================================================*/\n\t\t#ifndef FXAA_GREEN_AS_LUMA\n\t\t\t\t//\n\t\t\t\t// For those using non-linear color,\n\t\t\t\t// and either not able to get luma in alpha, or not wanting to,\n\t\t\t\t// this enables FXAA to run using green as a proxy for luma.\n\t\t\t\t// So with this enabled, no need to pack luma in alpha.\n\t\t\t\t//\n\t\t\t\t// This will turn off AA on anything which lacks some amount of green.\n\t\t\t\t// Pure red and blue or combination of only R and B, will get no AA.\n\t\t\t\t//\n\t\t\t\t// Might want to lower the settings for both,\n\t\t\t\t//\t\tfxaaConsoleEdgeThresholdMin\n\t\t\t\t//\t\tfxaaQualityEdgeThresholdMin\n\t\t\t\t// In order to insure AA does not get turned off on colors\n\t\t\t\t// which contain a minor amount of green.\n\t\t\t\t//\n\t\t\t\t// 1 = On.\n\t\t\t\t// 0 = Off.\n\t\t\t\t//\n\t\t\t\t#define FXAA_GREEN_AS_LUMA 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_EARLY_EXIT\n\t\t\t\t//\n\t\t\t\t// Controls algorithm\\'s early exit path.\n\t\t\t\t// On PS3 turning this ON adds 2 cycles to the shader.\n\t\t\t\t// On 360 turning this OFF adds 10ths of a millisecond to the shader.\n\t\t\t\t// Turning this off on console will result in a more blurry image.\n\t\t\t\t// So this defaults to on.\n\t\t\t\t//\n\t\t\t\t// 1 = On.\n\t\t\t\t// 0 = Off.\n\t\t\t\t//\n\t\t\t\t#define FXAA_EARLY_EXIT 1\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_DISCARD\n\t\t\t\t//\n\t\t\t\t// Only valid for PC OpenGL currently.\n\t\t\t\t// Probably will not work when FXAA_GREEN_AS_LUMA = 1.\n\t\t\t\t//\n\t\t\t\t// 1 = Use discard on pixels which don\\'t need AA.\n\t\t\t\t//\t\t For APIs which enable concurrent TEX+ROP from same surface.\n\t\t\t\t// 0 = Return unchanged color on pixels which don\\'t need AA.\n\t\t\t\t//\n\t\t\t\t#define FXAA_DISCARD 0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\n\t\t\t\t//\n\t\t\t\t// Used for GLSL 120 only.\n\t\t\t\t//\n\t\t\t\t// 1 = GL API supports fast pixel offsets\n\t\t\t\t// 0 = do not use fast pixel offsets\n\t\t\t\t//\n\t\t\t\t#ifdef GL_EXT_gpu_shader4\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_NV_gpu_shader5\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 1\n\t\t\t\t#endif\n\t\t\t\t#ifndef FXAA_FAST_PIXEL_OFFSET\n\t\t\t\t\t\t#define FXAA_FAST_PIXEL_OFFSET 0\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#ifndef FXAA_GATHER4_ALPHA\n\t\t\t\t//\n\t\t\t\t// 1 = API supports gather4 on alpha channel.\n\t\t\t\t// 0 = API does not support gather4 on alpha channel.\n\t\t\t\t//\n\t\t\t\t#if (FXAA_HLSL_5 == 1)\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_ARB_gpu_shader5\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifdef GL_NV_gpu_shader5\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 1\n\t\t\t\t#endif\n\t\t\t\t#ifndef FXAA_GATHER4_ALPHA\n\t\t\t\t\t\t#define FXAA_GATHER4_ALPHA 0\n\t\t\t\t#endif\n\t\t#endif\n\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tFXAA QUALITY - TUNING KNOBS\n\t\t------------------------------------------------------------------------------\n\t\tNOTE the other tuning knobs are now in the shader function inputs!\n\t\t============================================================================*/\n\t\t#ifndef FXAA_QUALITY_PRESET\n\t\t\t\t//\n\t\t\t\t// Choose the quality preset.\n\t\t\t\t// This needs to be compiled into the shader as it effects code.\n\t\t\t\t// Best option to include multiple presets is to\n\t\t\t\t// in each shader define the preset, then include this file.\n\t\t\t\t//\n\t\t\t\t// OPTIONS\n\t\t\t\t// -----------------------------------------------------------------------\n\t\t\t\t// 10 to 15 - default medium dither (10=fastest, 15=highest quality)\n\t\t\t\t// 20 to 29 - less dither, more expensive (20=fastest, 29=highest quality)\n\t\t\t\t// 39\t\t\t - no dither, very expensive\n\t\t\t\t//\n\t\t\t\t// NOTES\n\t\t\t\t// -----------------------------------------------------------------------\n\t\t\t\t// 12 = slightly faster then FXAA 3.9 and higher edge quality (default)\n\t\t\t\t// 13 = about same speed as FXAA 3.9 and better than 12\n\t\t\t\t// 23 = closest to FXAA 3.9 visually and performance wise\n\t\t\t\t//\t_ = the lowest digit is directly related to performance\n\t\t\t\t// _\t= the highest digit is directly related to style\n\t\t\t\t//\n\t\t\t\t#define FXAA_QUALITY_PRESET 12\n\t\t#endif\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - PRESETS\n\n\t\t============================================================================*/\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - MEDIUM DITHER PRESETS\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 10)\n\t\t\t\t#define FXAA_QUALITY_PS 3\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\n\t\t\t\t#define FXAA_QUALITY_P1 3.0\n\t\t\t\t#define FXAA_QUALITY_P2 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 11)\n\t\t\t\t#define FXAA_QUALITY_PS 4\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 3.0\n\t\t\t\t#define FXAA_QUALITY_P3 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 12)\n\t\t\t\t#define FXAA_QUALITY_PS 5\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 4.0\n\t\t\t\t#define FXAA_QUALITY_P4 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 13)\n\t\t\t\t#define FXAA_QUALITY_PS 6\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 4.0\n\t\t\t\t#define FXAA_QUALITY_P5 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 14)\n\t\t\t\t#define FXAA_QUALITY_PS 7\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 4.0\n\t\t\t\t#define FXAA_QUALITY_P6 12.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 15)\n\t\t\t\t#define FXAA_QUALITY_PS 8\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\n\t\t\t\t#define FXAA_QUALITY_P7 12.0\n\t\t#endif\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - LOW DITHER PRESETS\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 20)\n\t\t\t\t#define FXAA_QUALITY_PS 3\n\t\t\t\t#define FXAA_QUALITY_P0 1.5\n\t\t\t\t#define FXAA_QUALITY_P1 2.0\n\t\t\t\t#define FXAA_QUALITY_P2 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 21)\n\t\t\t\t#define FXAA_QUALITY_PS 4\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 22)\n\t\t\t\t#define FXAA_QUALITY_PS 5\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 23)\n\t\t\t\t#define FXAA_QUALITY_PS 6\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 24)\n\t\t\t\t#define FXAA_QUALITY_PS 7\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 3.0\n\t\t\t\t#define FXAA_QUALITY_P6 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 25)\n\t\t\t\t#define FXAA_QUALITY_PS 8\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 4.0\n\t\t\t\t#define FXAA_QUALITY_P7 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 26)\n\t\t\t\t#define FXAA_QUALITY_PS 9\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 4.0\n\t\t\t\t#define FXAA_QUALITY_P8 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 27)\n\t\t\t\t#define FXAA_QUALITY_PS 10\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 4.0\n\t\t\t\t#define FXAA_QUALITY_P9 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 28)\n\t\t\t\t#define FXAA_QUALITY_PS 11\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 4.0\n\t\t\t\t#define FXAA_QUALITY_P10 8.0\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_QUALITY_PRESET == 29)\n\t\t\t\t#define FXAA_QUALITY_PS 12\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.5\n\t\t\t\t#define FXAA_QUALITY_P2 2.0\n\t\t\t\t#define FXAA_QUALITY_P3 2.0\n\t\t\t\t#define FXAA_QUALITY_P4 2.0\n\t\t\t\t#define FXAA_QUALITY_P5 2.0\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\n\t\t#endif\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t\t FXAA QUALITY - EXTREME QUALITY\n\t\t============================================================================*/\n\t\t#if (FXAA_QUALITY_PRESET == 39)\n\t\t\t\t#define FXAA_QUALITY_PS 12\n\t\t\t\t#define FXAA_QUALITY_P0 1.0\n\t\t\t\t#define FXAA_QUALITY_P1 1.0\n\t\t\t\t#define FXAA_QUALITY_P2 1.0\n\t\t\t\t#define FXAA_QUALITY_P3 1.0\n\t\t\t\t#define FXAA_QUALITY_P4 1.0\n\t\t\t\t#define FXAA_QUALITY_P5 1.5\n\t\t\t\t#define FXAA_QUALITY_P6 2.0\n\t\t\t\t#define FXAA_QUALITY_P7 2.0\n\t\t\t\t#define FXAA_QUALITY_P8 2.0\n\t\t\t\t#define FXAA_QUALITY_P9 2.0\n\t\t\t\t#define FXAA_QUALITY_P10 4.0\n\t\t\t\t#define FXAA_QUALITY_P11 8.0\n\t\t#endif\n\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tAPI PORTING\n\n\t\t============================================================================*/\n\t\t#if (FXAA_GLSL_100 == 1) || (FXAA_GLSL_120 == 1) || (FXAA_GLSL_130 == 1)\n\t\t\t\t#define FxaaBool bool\n\t\t\t\t#define FxaaDiscard discard\n\t\t\t\t#define FxaaFloat float\n\t\t\t\t#define FxaaFloat2 vec2\n\t\t\t\t#define FxaaFloat3 vec3\n\t\t\t\t#define FxaaFloat4 vec4\n\t\t\t\t#define FxaaHalf float\n\t\t\t\t#define FxaaHalf2 vec2\n\t\t\t\t#define FxaaHalf3 vec3\n\t\t\t\t#define FxaaHalf4 vec4\n\t\t\t\t#define FxaaInt2 ivec2\n\t\t\t\t#define FxaaSat(x) clamp(x, 0.0, 1.0)\n\t\t\t\t#define FxaaTex sampler2D\n\t\t#else\n\t\t\t\t#define FxaaBool bool\n\t\t\t\t#define FxaaDiscard clip(-1)\n\t\t\t\t#define FxaaFloat float\n\t\t\t\t#define FxaaFloat2 float2\n\t\t\t\t#define FxaaFloat3 float3\n\t\t\t\t#define FxaaFloat4 float4\n\t\t\t\t#define FxaaHalf half\n\t\t\t\t#define FxaaHalf2 half2\n\t\t\t\t#define FxaaHalf3 half3\n\t\t\t\t#define FxaaHalf4 half4\n\t\t\t\t#define FxaaSat(x) saturate(x)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t#define FxaaTexTop(t, p) texture2D(t, p, 0.0)\n\t\t\t#define FxaaTexOff(t, p, o, r) texture2D(t, p + (o * r), 0.0)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_120 == 1)\n\t\t\t\t// Requires,\n\t\t\t\t//\t#version 120\n\t\t\t\t// And at least,\n\t\t\t\t//\t#extension GL_EXT_gpu_shader4 : enable\n\t\t\t\t//\t(or set FXAA_FAST_PIXEL_OFFSET 1 to work like DX9)\n\t\t\t\t#define FxaaTexTop(t, p) texture2DLod(t, p, 0.0)\n\t\t\t\t#if (FXAA_FAST_PIXEL_OFFSET == 1)\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLodOffset(t, p, 0.0, o)\n\t\t\t\t#else\n\t\t\t\t\t\t#define FxaaTexOff(t, p, o, r) texture2DLod(t, p + (o * r), 0.0)\n\t\t\t\t#endif\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_GLSL_130 == 1)\n\t\t\t\t// Requires \"#version 130\" or better\n\t\t\t\t#define FxaaTexTop(t, p) textureLod(t, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) textureLodOffset(t, p, 0.0, o)\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t// use #extension GL_ARB_gpu_shader5 : enable\n\t\t\t\t\t\t#define FxaaTexAlpha4(t, p) textureGather(t, p, 3)\n\t\t\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) textureGatherOffset(t, p, o, 3)\n\t\t\t\t\t\t#define FxaaTexGreen4(t, p) textureGather(t, p, 1)\n\t\t\t\t\t\t#define FxaaTexOffGreen4(t, p, o) textureGatherOffset(t, p, o, 1)\n\t\t\t\t#endif\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_3 == 1)\n\t\t\t\t#define FxaaInt2 float2\n\t\t\t\t#define FxaaTex sampler2D\n\t\t\t\t#define FxaaTexTop(t, p) tex2Dlod(t, float4(p, 0.0, 0.0))\n\t\t\t\t#define FxaaTexOff(t, p, o, r) tex2Dlod(t, float4(p + (o * r), 0, 0))\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_4 == 1)\n\t\t\t\t#define FxaaInt2 int2\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t#if (FXAA_HLSL_5 == 1)\n\t\t\t\t#define FxaaInt2 int2\n\t\t\t\tstruct FxaaTex { SamplerState smpl; Texture2D tex; };\n\t\t\t\t#define FxaaTexTop(t, p) t.tex.SampleLevel(t.smpl, p, 0.0)\n\t\t\t\t#define FxaaTexOff(t, p, o, r) t.tex.SampleLevel(t.smpl, p, 0.0, o)\n\t\t\t\t#define FxaaTexAlpha4(t, p) t.tex.GatherAlpha(t.smpl, p)\n\t\t\t\t#define FxaaTexOffAlpha4(t, p, o) t.tex.GatherAlpha(t.smpl, p, o)\n\t\t\t\t#define FxaaTexGreen4(t, p) t.tex.GatherGreen(t.smpl, p)\n\t\t\t\t#define FxaaTexOffGreen4(t, p, o) t.tex.GatherGreen(t.smpl, p, o)\n\t\t#endif\n\n\n\t\t/*============================================================================\n\t\t\t\t\t\t\t\t\t\t\t GREEN AS LUMA OPTION SUPPORT FUNCTION\n\t\t============================================================================*/\n\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.w; }\n\t\t#else\n\t\t\t\tFxaaFloat FxaaLuma(FxaaFloat4 rgba) { return rgba.y; }\n\t\t#endif\n\n\n\n\n\t\t/*============================================================================\n\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t FXAA3 QUALITY - PC\n\n\t\t============================================================================*/\n\t\t#if (FXAA_PC == 1)\n\t\t/*--------------------------------------------------------------------------*/\n\t\tFxaaFloat4 FxaaPixelShader(\n\t\t\t\t//\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\n\t\t\t\t// {xy} = center of pixel\n\t\t\t\tFxaaFloat2 pos,\n\t\t\t\t//\n\t\t\t\t// Used only for FXAA Console, and not used on the 360 version.\n\t\t\t\t// Use noperspective interpolation here (turn off perspective interpolation).\n\t\t\t\t// {xy_} = upper left of pixel\n\t\t\t\t// {_zw} = lower right of pixel\n\t\t\t\tFxaaFloat4 fxaaConsolePosPos,\n\t\t\t\t//\n\t\t\t\t// Input color texture.\n\t\t\t\t// {rgb_} = color in linear or perceptual color space\n\t\t\t\t// if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t//\t\t {__a} = luma in perceptual color space (not linear)\n\t\t\t\tFxaaTex tex,\n\t\t\t\t//\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\n\t\t\t\t// For everything but 360, just use the same input here as for \"tex\".\n\t\t\t\t// For 360, same texture, just alias with a 2nd sampler.\n\t\t\t\t// This sampler needs to have an exponent bias of -1.\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegOne,\n\t\t\t\t//\n\t\t\t\t// Only used on the optimized 360 version of FXAA Console.\n\t\t\t\t// For everything but 360, just use the same input here as for \"tex\".\n\t\t\t\t// For 360, same texture, just alias with a 3nd sampler.\n\t\t\t\t// This sampler needs to have an exponent bias of -2.\n\t\t\t\tFxaaTex fxaaConsole360TexExpBiasNegTwo,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x_} = 1.0/screenWidthInPixels\n\t\t\t\t// {_y} = 1.0/screenHeightInPixels\n\t\t\t\tFxaaFloat2 fxaaQualityRcpFrame,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// This effects sub-pixel AA quality and inversely sharpness.\n\t\t\t\t//\t Where N ranges between,\n\t\t\t\t//\t\t N = 0.50 (default)\n\t\t\t\t//\t\t N = 0.33 (sharper)\n\t\t\t\t// {x__} = -N/screenWidthInPixels\n\t\t\t\t// {_y_} = -N/screenHeightInPixels\n\t\t\t\t// {_z_} =\tN/screenWidthInPixels\n\t\t\t\t// {__w} =\tN/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// Not used on 360, but used on PS3 and PC.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x__} = -2.0/screenWidthInPixels\n\t\t\t\t// {_y_} = -2.0/screenHeightInPixels\n\t\t\t\t// {_z_} =\t2.0/screenWidthInPixels\n\t\t\t\t// {__w} =\t2.0/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsoleRcpFrameOpt2,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// Only used on 360 in place of fxaaConsoleRcpFrameOpt2.\n\t\t\t\t// This must be from a constant/uniform.\n\t\t\t\t// {x__} =\t8.0/screenWidthInPixels\n\t\t\t\t// {_y_} =\t8.0/screenHeightInPixels\n\t\t\t\t// {_z_} = -4.0/screenWidthInPixels\n\t\t\t\t// {__w} = -4.0/screenHeightInPixels\n\t\t\t\tFxaaFloat4 fxaaConsole360RcpFrameOpt2,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_SUBPIX define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Choose the amount of sub-pixel aliasing removal.\n\t\t\t\t// This can effect sharpness.\n\t\t\t\t//\t 1.00 - upper limit (softer)\n\t\t\t\t//\t 0.75 - default amount of filtering\n\t\t\t\t//\t 0.50 - lower limit (sharper, less sub-pixel aliasing removal)\n\t\t\t\t//\t 0.25 - almost off\n\t\t\t\t//\t 0.00 - completely off\n\t\t\t\tFxaaFloat fxaaQualitySubpix,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// The minimum amount of local contrast required to apply algorithm.\n\t\t\t\t//\t 0.333 - too little (faster)\n\t\t\t\t//\t 0.250 - low quality\n\t\t\t\t//\t 0.166 - default\n\t\t\t\t//\t 0.125 - high quality\n\t\t\t\t//\t 0.063 - overkill (slower)\n\t\t\t\tFxaaFloat fxaaQualityEdgeThreshold,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Quality.\n\t\t\t\t// This used to be the FXAA_QUALITY_EDGE_THRESHOLD_MIN define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Trims the algorithm from processing darks.\n\t\t\t\t//\t 0.0833 - upper limit (default, the start of visible unfiltered edges)\n\t\t\t\t//\t 0.0625 - high quality (faster)\n\t\t\t\t//\t 0.0312 - visible limit (slower)\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\n\t\t\t\t//\t Likely want to set this to zero.\n\t\t\t\t//\t As colors that are mostly not-green\n\t\t\t\t//\t will appear very dark in the green channel!\n\t\t\t\t//\t Tune by looking at mostly non-green content,\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\n\t\t\t\tFxaaFloat fxaaQualityEdgeThresholdMin,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_SHARPNESS define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_SHARPNESS for PS3.\n\t\t\t\t//\t Due to the PS3 being ALU bound,\n\t\t\t\t//\t there are only three safe values here: 2 and 4 and 8.\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\n\t\t\t\t// For all other platforms can be a non-power of two.\n\t\t\t\t//\t 8.0 is sharper (default!!!)\n\t\t\t\t//\t 4.0 is softer\n\t\t\t\t//\t 2.0 is really soft (good only for vector graphics inputs)\n\t\t\t\tFxaaFloat fxaaConsoleEdgeSharpness,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// This does not effect PS3, as this needs to be compiled in.\n\t\t\t\t//\t Use FXAA_CONSOLE_PS3_EDGE_THRESHOLD for PS3.\n\t\t\t\t//\t Due to the PS3 being ALU bound,\n\t\t\t\t//\t there are only two safe values here: 1/4 and 1/8.\n\t\t\t\t//\t These options use the shaders ability to a free *|/ by 2|4|8.\n\t\t\t\t// The console setting has a different mapping than the quality setting.\n\t\t\t\t// Other platforms can use other values.\n\t\t\t\t//\t 0.125 leaves less aliasing, but is softer (default!!!)\n\t\t\t\t//\t 0.25 leaves more aliasing, and is sharper\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThreshold,\n\t\t\t\t//\n\t\t\t\t// Only used on FXAA Console.\n\t\t\t\t// This used to be the FXAA_CONSOLE_EDGE_THRESHOLD_MIN define.\n\t\t\t\t// It is here now to allow easier tuning.\n\t\t\t\t// Trims the algorithm from processing darks.\n\t\t\t\t// The console setting has a different mapping than the quality setting.\n\t\t\t\t// This only applies when FXAA_EARLY_EXIT is 1.\n\t\t\t\t// This does not apply to PS3,\n\t\t\t\t// PS3 was simplified to avoid more shader instructions.\n\t\t\t\t//\t 0.06 - faster but more aliasing in darks\n\t\t\t\t//\t 0.05 - default\n\t\t\t\t//\t 0.04 - slower and less aliasing in darks\n\t\t\t\t// Special notes when using FXAA_GREEN_AS_LUMA,\n\t\t\t\t//\t Likely want to set this to zero.\n\t\t\t\t//\t As colors that are mostly not-green\n\t\t\t\t//\t will appear very dark in the green channel!\n\t\t\t\t//\t Tune by looking at mostly non-green content,\n\t\t\t\t//\t then start at zero and increase until aliasing is a problem.\n\t\t\t\tFxaaFloat fxaaConsoleEdgeThresholdMin,\n\t\t\t\t//\n\t\t\t\t// Extra constants for 360 FXAA Console only.\n\t\t\t\t// Use zeros or anything else for other platforms.\n\t\t\t\t// These must be in physical constant registers and NOT immediates.\n\t\t\t\t// Immediates will result in compiler un-optimizing.\n\t\t\t\t// {xyzw} = float4(1.0, -1.0, 0.25, -0.25)\n\t\t\t\tFxaaFloat4 fxaaConsole360ConstDir\n\t\t) {\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posM;\n\t\t\t\tposM.x = pos.x;\n\t\t\t\tposM.y = pos.y;\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 1)\n\t\t\t\t\t\t#if (FXAA_DISCARD == 0)\n\t\t\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n\t\t\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\n\t\t\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\n\t\t\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexAlpha4(tex, posM);\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffAlpha4(tex, posM, FxaaInt2(-1, -1));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4A = FxaaTexGreen4(tex, posM);\n\t\t\t\t\t\t\t\tFxaaFloat4 luma4B = FxaaTexOffGreen4(tex, posM, FxaaInt2(-1, -1));\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\t\t\t#define lumaM luma4A.w\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#define lumaE luma4A.z\n\t\t\t\t\t\t#define lumaS luma4A.x\n\t\t\t\t\t\t#define lumaSE luma4A.y\n\t\t\t\t\t\t#define lumaNW luma4B.w\n\t\t\t\t\t\t#define lumaN luma4B.z\n\t\t\t\t\t\t#define lumaW luma4B.x\n\t\t\t\t#else\n\t\t\t\t\t\tFxaaFloat4 rgbyM = FxaaTexTop(tex, posM);\n\t\t\t\t\t\t#if (FXAA_GREEN_AS_LUMA == 0)\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.w\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\t#define lumaM rgbyM.y\n\t\t\t\t\t\t#endif\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 0.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 0.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 0.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tFxaaFloat lumaS = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaN = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 0,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#endif\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat maxSM = max(lumaS, lumaM);\n\t\t\t\tFxaaFloat minSM = min(lumaS, lumaM);\n\t\t\t\tFxaaFloat maxESM = max(lumaE, maxSM);\n\t\t\t\tFxaaFloat minESM = min(lumaE, minSM);\n\t\t\t\tFxaaFloat maxWN = max(lumaN, lumaW);\n\t\t\t\tFxaaFloat minWN = min(lumaN, lumaW);\n\t\t\t\tFxaaFloat rangeMax = max(maxWN, maxESM);\n\t\t\t\tFxaaFloat rangeMin = min(minWN, minESM);\n\t\t\t\tFxaaFloat rangeMaxScaled = rangeMax * fxaaQualityEdgeThreshold;\n\t\t\t\tFxaaFloat range = rangeMax - rangeMin;\n\t\t\t\tFxaaFloat rangeMaxClamped = max(fxaaQualityEdgeThresholdMin, rangeMaxScaled);\n\t\t\t\tFxaaBool earlyExit = range < rangeMaxClamped;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(earlyExit)\n\t\t\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\t\t\tFxaaDiscard;\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\t\treturn rgbyM;\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t#if (FXAA_GATHER4_ALPHA == 0)\n\t\t\t\t\t\t#if (FXAA_GLSL_100 == 1)\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2( 1.0,-1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaFloat2(-1.0, 1.0), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#else\n\t\t\t\t\t\t\tFxaaFloat lumaNW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2( 1,-1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\t#endif\n\t\t\t\t#else\n\t\t\t\t\t\tFxaaFloat lumaNE = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(1, -1), fxaaQualityRcpFrame.xy));\n\t\t\t\t\t\tFxaaFloat lumaSW = FxaaLuma(FxaaTexOff(tex, posM, FxaaInt2(-1, 1), fxaaQualityRcpFrame.xy));\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNS = lumaN + lumaS;\n\t\t\t\tFxaaFloat lumaWE = lumaW + lumaE;\n\t\t\t\tFxaaFloat subpixRcpRange = 1.0/range;\n\t\t\t\tFxaaFloat subpixNSWE = lumaNS + lumaWE;\n\t\t\t\tFxaaFloat edgeHorz1 = (-2.0 * lumaM) + lumaNS;\n\t\t\t\tFxaaFloat edgeVert1 = (-2.0 * lumaM) + lumaWE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNESE = lumaNE + lumaSE;\n\t\t\t\tFxaaFloat lumaNWNE = lumaNW + lumaNE;\n\t\t\t\tFxaaFloat edgeHorz2 = (-2.0 * lumaE) + lumaNESE;\n\t\t\t\tFxaaFloat edgeVert2 = (-2.0 * lumaN) + lumaNWNE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat lumaNWSW = lumaNW + lumaSW;\n\t\t\t\tFxaaFloat lumaSWSE = lumaSW + lumaSE;\n\t\t\t\tFxaaFloat edgeHorz4 = (abs(edgeHorz1) * 2.0) + abs(edgeHorz2);\n\t\t\t\tFxaaFloat edgeVert4 = (abs(edgeVert1) * 2.0) + abs(edgeVert2);\n\t\t\t\tFxaaFloat edgeHorz3 = (-2.0 * lumaW) + lumaNWSW;\n\t\t\t\tFxaaFloat edgeVert3 = (-2.0 * lumaS) + lumaSWSE;\n\t\t\t\tFxaaFloat edgeHorz = abs(edgeHorz3) + edgeHorz4;\n\t\t\t\tFxaaFloat edgeVert = abs(edgeVert3) + edgeVert4;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat subpixNWSWNESE = lumaNWSW + lumaNESE;\n\t\t\t\tFxaaFloat lengthSign = fxaaQualityRcpFrame.x;\n\t\t\t\tFxaaBool horzSpan = edgeHorz >= edgeVert;\n\t\t\t\tFxaaFloat subpixA = subpixNSWE * 2.0 + subpixNWSWNESE;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(!horzSpan) lumaN = lumaW;\n\t\t\t\tif(!horzSpan) lumaS = lumaE;\n\t\t\t\tif(horzSpan) lengthSign = fxaaQualityRcpFrame.y;\n\t\t\t\tFxaaFloat subpixB = (subpixA * (1.0/12.0)) - lumaM;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat gradientN = lumaN - lumaM;\n\t\t\t\tFxaaFloat gradientS = lumaS - lumaM;\n\t\t\t\tFxaaFloat lumaNN = lumaN + lumaM;\n\t\t\t\tFxaaFloat lumaSS = lumaS + lumaM;\n\t\t\t\tFxaaBool pairN = abs(gradientN) >= abs(gradientS);\n\t\t\t\tFxaaFloat gradient = max(abs(gradientN), abs(gradientS));\n\t\t\t\tif(pairN) lengthSign = -lengthSign;\n\t\t\t\tFxaaFloat subpixC = FxaaSat(abs(subpixB) * subpixRcpRange);\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posB;\n\t\t\t\tposB.x = posM.x;\n\t\t\t\tposB.y = posM.y;\n\t\t\t\tFxaaFloat2 offNP;\n\t\t\t\toffNP.x = (!horzSpan) ? 0.0 : fxaaQualityRcpFrame.x;\n\t\t\t\toffNP.y = ( horzSpan) ? 0.0 : fxaaQualityRcpFrame.y;\n\t\t\t\tif(!horzSpan) posB.x += lengthSign * 0.5;\n\t\t\t\tif( horzSpan) posB.y += lengthSign * 0.5;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat2 posN;\n\t\t\t\tposN.x = posB.x - offNP.x * FXAA_QUALITY_P0;\n\t\t\t\tposN.y = posB.y - offNP.y * FXAA_QUALITY_P0;\n\t\t\t\tFxaaFloat2 posP;\n\t\t\t\tposP.x = posB.x + offNP.x * FXAA_QUALITY_P0;\n\t\t\t\tposP.y = posB.y + offNP.y * FXAA_QUALITY_P0;\n\t\t\t\tFxaaFloat subpixD = ((-2.0)*subpixC) + 3.0;\n\t\t\t\tFxaaFloat lumaEndN = FxaaLuma(FxaaTexTop(tex, posN));\n\t\t\t\tFxaaFloat subpixE = subpixC * subpixC;\n\t\t\t\tFxaaFloat lumaEndP = FxaaLuma(FxaaTexTop(tex, posP));\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(!pairN) lumaNN = lumaSS;\n\t\t\t\tFxaaFloat gradientScaled = gradient * 1.0/4.0;\n\t\t\t\tFxaaFloat lumaMM = lumaM - lumaNN * 0.5;\n\t\t\t\tFxaaFloat subpixF = subpixD * subpixE;\n\t\t\t\tFxaaBool lumaMLTZero = lumaMM < 0.0;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tlumaEndN -= lumaNN * 0.5;\n\t\t\t\tlumaEndP -= lumaNN * 0.5;\n\t\t\t\tFxaaBool doneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\tFxaaBool doneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P1;\n\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P1;\n\t\t\t\tFxaaBool doneNP = (!doneN) || (!doneP);\n\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P1;\n\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P1;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tif(doneNP) {\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P2;\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P2;\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P2;\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P2;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 3)\n\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P3;\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P3;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 4)\n\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P4;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P4;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 5)\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P5;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 6)\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P6;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P6;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 7)\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P7;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P7;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t#if (FXAA_QUALITY_PS > 8)\n\t\t\t\tif(doneNP) {\n\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P8;\n\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P8;\n\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P8;\n\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P8;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 9)\n\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P9;\n\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P9;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 10)\n\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P10;\n\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P10;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 11)\n\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P11;\n\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P11;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t#if (FXAA_QUALITY_PS > 12)\n\t\t\t\t\t\t\t\t\t\t\t\tif(doneNP) {\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = FxaaLuma(FxaaTexTop(tex, posN.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = FxaaLuma(FxaaTexTop(tex, posP.xy));\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) lumaEndN = lumaEndN - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) lumaEndP = lumaEndP - lumaNN * 0.5;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneN = abs(lumaEndN) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneP = abs(lumaEndP) >= gradientScaled;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.x -= offNP.x * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneN) posN.y -= offNP.y * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tdoneNP = (!doneN) || (!doneP);\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.x += offNP.x * FXAA_QUALITY_P12;\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif(!doneP) posP.y += offNP.y * FXAA_QUALITY_P12;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t}\n\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t\t\t}\n\t\t\t\t\t\t#endif\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\t}\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat dstN = posM.x - posN.x;\n\t\t\t\tFxaaFloat dstP = posP.x - posM.x;\n\t\t\t\tif(!horzSpan) dstN = posM.y - posN.y;\n\t\t\t\tif(!horzSpan) dstP = posP.y - posM.y;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaBool goodSpanN = (lumaEndN < 0.0) != lumaMLTZero;\n\t\t\t\tFxaaFloat spanLength = (dstP + dstN);\n\t\t\t\tFxaaBool goodSpanP = (lumaEndP < 0.0) != lumaMLTZero;\n\t\t\t\tFxaaFloat spanLengthRcp = 1.0/spanLength;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaBool directionN = dstN < dstP;\n\t\t\t\tFxaaFloat dst = min(dstN, dstP);\n\t\t\t\tFxaaBool goodSpan = directionN ? goodSpanN : goodSpanP;\n\t\t\t\tFxaaFloat subpixG = subpixF * subpixF;\n\t\t\t\tFxaaFloat pixelOffset = (dst * (-spanLengthRcp)) + 0.5;\n\t\t\t\tFxaaFloat subpixH = subpixG * fxaaQualitySubpix;\n\t\t/*--------------------------------------------------------------------------*/\n\t\t\t\tFxaaFloat pixelOffsetGood = goodSpan ? pixelOffset : 0.0;\n\t\t\t\tFxaaFloat pixelOffsetSubpix = max(pixelOffsetGood, subpixH);\n\t\t\t\tif(!horzSpan) posM.x += pixelOffsetSubpix * lengthSign;\n\t\t\t\tif( horzSpan) posM.y += pixelOffsetSubpix * lengthSign;\n\t\t\t\t#if (FXAA_DISCARD == 1)\n\t\t\t\t\t\treturn FxaaTexTop(tex, posM);\n\t\t\t\t#else\n\t\t\t\t\t\treturn FxaaFloat4(FxaaTexTop(tex, posM).xyz, lumaM);\n\t\t\t\t#endif\n\t\t}\n\t\t/*==========================================================================*/\n\t\t#endif\n\n\t\tvoid main() {\n\t\t\tgl_FragColor = FxaaPixelShader(\n\t\t\t\tvUv,\n\t\t\t\tvec4(0.0),\n\t\t\t\ttDiffuse,\n\t\t\t\ttDiffuse,\n\t\t\t\ttDiffuse,\n\t\t\t\tresolution,\n\t\t\t\tvec4(0.0),\n\t\t\t\tvec4(0.0),\n\t\t\t\tvec4(0.0),\n\t\t\t\t0.75,\n\t\t\t\t0.166,\n\t\t\t\t0.0833,\n\t\t\t\t0.0,\n\t\t\t\t0.0,\n\t\t\t\t0.0,\n\t\t\t\tvec4(0.0)\n\t\t\t);\n\n\t\t\t// TODO avoid querying texture twice for same texel\n\t\t\tgl_FragColor.a = texture2D(tDiffuse, vUv).a;\n\t\t}`\n\n};\n\nexport { FXAAShader };\n","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { FXAAShader  } from 'three/examples/jsm/shaders/FXAAShader'\r\n// import { ClearPass } from 'three/examples/jsm/postprocessing/ClearPass'\r\n// import FresnelShader from './FresnelShader'\r\nimport { loadShader } from './ShaderLoader'\r\nimport { Stats } from 'three-stats'\r\nimport { TardisCard } from './TardisCard'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from './CustomCSS3DRenderer'\r\nimport { DampingObjectController } from './Utils'\r\n\r\nvar container: HTMLElement\r\nvar renderer: THREE.WebGLRenderer, camera: THREE.PerspectiveCamera, controls: OrbitControls\r\nvar fxaaPass: ShaderPass\r\nvar composer: EffectComposer\r\nvar cardOutsideScene: THREE.Scene, cardInsideScene: THREE.Scene\r\nvar stats: Stats\r\n\r\nexport var cornerObject: THREE.Mesh\r\nvar cornerObjectClone: THREE.Mesh\r\nvar cornerObjectController: DampingObjectController\r\n\r\nvar cssScene: THREE.Scene\r\nvar cssRenderer: CustomCSS3DRenderer\r\n\r\nvar cursorLightGroup: THREE.Group\r\nvar cursorLight: THREE.PointLight\r\nvar cursorLightController: DampingObjectController\r\nvar mouseX: number, mouseY: number\r\n\r\n// https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/Camera-Texture.html\r\nvar glassBackScene: THREE.Scene\r\nvar glassFrontScene: THREE.Scene\r\nvar glassBackRenderTarget: THREE.WebGLRenderTarget\r\nvar glassBackdepthTexture: THREE.DepthTexture\r\nvar glassBackMaterial: THREE.Material\r\nvar glassFrontMaterial: THREE.ShaderMaterial\r\n\r\nexport function initScene(_container: HTMLElement) {\r\n    container = _container\r\n    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n    camera.position.set(0, 0, 1000)\r\n    camera.lookAt(0, 0, 0)\r\n\r\n    cardOutsideScene = new THREE.Scene()\r\n    cardInsideScene = new THREE.Scene()\r\n\r\n    renderer = new THREE.WebGLRenderer( {antialias: true} )\r\n    // renderer.autoClear = false\r\n    renderer.setClearColor( 0xffffff )\r\n    renderer.setPixelRatio( window.devicePixelRatio )\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    container.appendChild( renderer.domElement )\r\n    controls = new OrbitControls(camera, renderer.domElement)\r\n    renderer.domElement.style.position = 'absolute'\r\n    renderer.domElement.style.top = '0px'\r\n    renderer.domElement.style.left = '0px'\r\n\r\n    // stat\r\n    stats = new Stats()\r\n    stats.domElement.style.zIndex = '100'\r\n    container.appendChild( stats.domElement )\r\n\r\n    // add objects\r\n\r\n    // const cdt = new THREE.TextureLoader().load( './cd.jpg' )\r\n    // const cnt = new THREE.TextureLoader().load( './cn.jpg' )\r\n    // const crt = new THREE.TextureLoader().load( './cr.jpg' )\r\n\r\n    // add a tardis card\r\n    var tardisCard1 = new TardisCard(500, 700, 123, cardOutsideScene, cardInsideScene, new THREE.Vector3(0, 0, 0), new THREE.Euler())\r\n    var contentInTardisCard1 = new THREE.Mesh(\r\n        new THREE.BoxGeometry(200, 200, 200),\r\n        new THREE.MeshPhysicalMaterial({\r\n            color: 0xff00ff\r\n        })\r\n    )\r\n    var contentInTardisCard2 = new THREE.Mesh(\r\n        new THREE.BoxGeometry(200, 200, 200),\r\n        new THREE.MeshPhysicalMaterial({\r\n            color: 0xffff00\r\n        })\r\n    )\r\n    contentInTardisCard1.position.set(30, 30, -30)\r\n    contentInTardisCard2.position.set(-30, -30, 30)\r\n    // scene.add(contentInTardisCard)\r\n    var contentGroupInTardisCard1 = new THREE.Group()\r\n    contentGroupInTardisCard1.add(contentInTardisCard1)\r\n    contentGroupInTardisCard1.add(contentInTardisCard2)\r\n    contentGroupInTardisCard1.position.copy(tardisCard1.cardMesh.position)\r\n    contentGroupInTardisCard1.position.z -= 300\r\n    tardisCard1.addVisibleObjectGroup(contentGroupInTardisCard1)\r\n\r\n    const glassNormalTexture = new THREE.TextureLoader().load( './golf-normal.jpg' )\r\n    // add second tardis card\r\n    var tardisCard2 = new TardisCard(700, 500, 124, cardOutsideScene, cardInsideScene, new THREE.Vector3(650, 0, 0), new THREE.Euler())\r\n    var contentInTardisCard3 = new THREE.Mesh(\r\n        new THREE.SphereGeometry(100),\r\n        new THREE.MeshPhysicalMaterial({\r\n            metalness: 0.5,\r\n            roughness: 0.2,\r\n            clearcoat: 0.2,\r\n            normalMap: glassNormalTexture\r\n        })\r\n    )\r\n    var contentInTardisCard4 = new THREE.Mesh(\r\n        new THREE.SphereGeometry(100),\r\n        new THREE.MeshPhysicalMaterial({\r\n            metalness: 0.2,\r\n            roughness: 0.2,\r\n            clearcoat: 0.5,\r\n            normalMap: glassNormalTexture\r\n        })\r\n    )\r\n    contentInTardisCard3.position.set(30, 30, -30)\r\n    contentInTardisCard4.position.set(-30, -30, 30)\r\n    // scene.add(contentInTardisCard)\r\n    var contentGroupInTardisCard2 = new THREE.Group()\r\n    contentGroupInTardisCard2.add(contentInTardisCard3)\r\n    contentGroupInTardisCard2.add(contentInTardisCard4)\r\n    contentGroupInTardisCard2.position.copy(tardisCard2.cardMesh.position)\r\n    contentGroupInTardisCard2.position.z -= 300\r\n    tardisCard2.addVisibleObjectGroup(contentGroupInTardisCard2)\r\n    \r\n    const hemiLight = new THREE.HemisphereLight( 0xffffff, 0x444444 )\r\n    hemiLight.position.set( 0, 1000, 0 )\r\n\r\n    const dirLight = new THREE.DirectionalLight( 0xffffff, 0.8 )\r\n    dirLight.position.set( - 3000, 1000, - 1000 )\r\n\r\n    cardInsideScene.add( hemiLight )\r\n    cardInsideScene.add( dirLight )\r\n\r\n    // add env\r\n    const r = './cube1/'\r\n\r\n    const urls = [\r\n        r + 'px.jpg', r + 'nx.jpg',\r\n        r + 'py.jpg', r + 'ny.jpg',\r\n        r + 'pz.jpg', r + 'nz.jpg'\r\n    ]\r\n\r\n    const reflectionTextureCube = new THREE.CubeTextureLoader().load( urls )\r\n    // reflectionTextureCube.mapping = THREE.CubeReflectionMapping\r\n\r\n    cardOutsideScene.environment = reflectionTextureCube\r\n    cardInsideScene.environment = reflectionTextureCube\r\n\r\n    \r\n    tardisCard1.addFrontWall(50)\r\n    tardisCard2.addFrontWall(100, new THREE.MeshPhysicalMaterial({\r\n        color: 0xa0a0a0,\r\n        metalness: 0,\r\n        roughness: 0,\r\n        clearcoat: 0.5,\r\n        reflectivity: 0.2,\r\n        clearcoatRoughness: 0.8,\r\n    }))\r\n    tardisCard2.addSkybox(reflectionTextureCube)\r\n    \r\n\r\n    // add cursor light\r\n    cursorLightGroup = new THREE.Group()\r\n    cursorLight = new THREE.PointLight()\r\n    cursorLight.intensity = 0.5\r\n    cursorLight.decay = 1\r\n    cursorLight.distance = 500\r\n    cursorLight.color = new THREE.Color( 0xaaccff )\r\n    cursorLightGroup.add(cursorLight)\r\n    cardInsideScene.add(cursorLightGroup)\r\n    cursorLightController = new DampingObjectController(cursorLightGroup, 0.3, 0.1)\r\n    window.addEventListener('mousemove', e => {\r\n        mouseX = e.clientX\r\n        mouseY = e.clientY\r\n    })\r\n\r\n    cssScene = new THREE.Scene()\r\n\r\n    const renderPass1 = new RenderPass(cardOutsideScene, camera)\r\n    renderPass1.clear = true\r\n\r\n    const renderPass2 = new RenderPass(cardInsideScene, camera)\r\n    renderPass2.clearDepth = true\r\n    renderPass2.clear = false\r\n    \r\n\r\n    fxaaPass = new ShaderPass( FXAAShader )\r\n    fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( container.offsetWidth * window.devicePixelRatio )\r\n    fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( container.offsetHeight * window.devicePixelRatio )\r\n    \r\n    composer = new EffectComposer(renderer)\r\n    composer.addPass(renderPass1)\r\n    composer.addPass(renderPass2)\r\n\tcomposer.addPass( fxaaPass )\r\n    composer.renderTarget1.stencilBuffer = true\r\n    composer.renderTarget2.stencilBuffer = true\r\n\r\n    composer.renderToScreen = false\r\n\r\n    // add corner object\r\n    glassBackdepthTexture = new THREE.DepthTexture(1024, 1024)\r\n    glassBackRenderTarget = new THREE.WebGLRenderTarget(\r\n        container.offsetWidth * window.devicePixelRatio,\r\n        container.offsetHeight * window.devicePixelRatio\r\n    )\r\n    glassBackRenderTarget.depthBuffer = true;\r\n    glassBackRenderTarget.depthTexture = glassBackdepthTexture;\r\n    glassBackRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n\r\n    glassBackScene = new THREE.Scene()\r\n    glassFrontScene = new THREE.Scene()\r\n\r\n    const glassDiffuseMaterial = new THREE.TextureLoader().load( './glass_cube_diffuse.png' )\r\n    let cornerGeom = new THREE.BoxGeometry( 40, 40, 40 )\r\n    cornerObject = new THREE.Mesh( cornerGeom, new THREE.MeshBasicMaterial({\r\n        map: glassDiffuseMaterial,\r\n        transparent: true,\r\n        // depthTest: false,\r\n        // depthWrite: true,\r\n        // stencilWrite: true,\r\n        // stencilRef: 999,\r\n        // stencilZPass: THREE.ReplaceStencilOp,  // write if the depth buffer test passes\r\n        side: THREE.BackSide\r\n    }) )\r\n    // cornerObject.material = new THREE.MeshDepthMaterial({\r\n    //     side: THREE.BackSide\r\n    // })\r\n    cornerObject.rotation.x = Math.random() * Math.PI\r\n    cornerObject.rotation.y = Math.random() * Math.PI\r\n    cornerObject.rotation.z = Math.random() * Math.PI\r\n    glassBackScene.add(cornerObject)\r\n\r\n    var [glassFrontVS, glassFrontFS] = loadShader('GlassFrontShader')\r\n    console.log(glassBackRenderTarget.depthTexture)\r\n    var glassFrontUniforms = \r\n    {\r\n        \"resolution\": { type: \"v\", value: new THREE.Vector2(\r\n            container.offsetWidth * window.devicePixelRatio,\r\n            container.offsetHeight * window.devicePixelRatio\r\n        ) },\r\n        \"tBackground\":    { type: \"t\", value: glassBackRenderTarget.texture },\r\n        \"tBackDepth\": { type: \"t\", value: glassBackRenderTarget.depthTexture },\r\n\r\n    }\r\n    glassFrontMaterial = new THREE.ShaderMaterial( \r\n        {\r\n            vertexShader:   glassFrontVS,\r\n            fragmentShader: glassFrontFS,\r\n            uniforms: glassFrontUniforms,\r\n            depthTest: false,\r\n            // stencilWrite: true,\r\n            // stencilRef: 999,\r\n            // stencilZPass: THREE.ReplaceStencilOp,  // write if the depth buffer test passes\r\n            side: THREE.FrontSide\r\n        }\r\n    )\r\n    cornerObjectClone = cornerObject.clone()\r\n    cornerObjectClone.material = glassFrontMaterial\r\n    glassFrontScene.add(cornerObjectClone)\r\n\r\n    cornerObjectController = new DampingObjectController(cornerObject, 0.5, 0.1)\r\n    cornerObjectController.addChildObj(cornerObjectClone)\r\n    \r\n    glassBackScene.background = composer.renderTarget2.texture\r\n    glassFrontScene.background = glassBackRenderTarget.texture\r\n\r\n\r\n    window.addEventListener( 'resize', onWindowResize )\r\n    animate()\r\n}\r\n\r\nexport function registerCSSCoordinator(htmlContainer: HTMLElement, htmlElem: HTMLElement, position: THREE.Vector3 = new THREE.Vector3()): CustomCSS3DObject {\r\n    if (cssRenderer == undefined) {\r\n        cssRenderer = new CustomCSS3DRenderer(htmlContainer)\r\n        cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n    }\r\n    // controls = new OrbitControls(camera, cssRenderer.domElement)\r\n    const object = new CustomCSS3DObject( htmlElem )\r\n    object.position.copy(position)\r\n    cssScene.add(object)\r\n    return object\r\n    // cssCoordinators.push(new ThreeCSSCoordinator(htmlContainer, htmlCamera, htmlElem, camera, position))\r\n}\r\n\r\nfunction getRaycastPos(posX: number, posY: number) {\r\n    let x = (2.0 * posX) / window.innerWidth - 1.0\r\n    let y = 1.0 - (2.0 * posY) / window.innerHeight\r\n    // let z = 1.0\r\n    // let ray_nds = new THREE.Vector3(x, y, z)\r\n    let ray = new THREE.Vector3(x, y, 0.9975)\r\n    ray.unproject(camera)\r\n    return ray\r\n}\r\n\r\nfunction updatecornerObject() {\r\n    let targetPos = getRaycastPos(200, 200)\r\n    // let lastPos = cornerObject.position\r\n    cornerObjectController.update(targetPos)\r\n    // let currentPath = targetPos.sub(lastPos)\r\n    // cornerObjectVelocity.multiplyScalar(0.3)\r\n    // cornerObjectVelocity.add(currentPath.multiplyScalar(damp))\r\n    // cornerObject.position.add(cornerObjectVelocity)\r\n}\r\n\r\nfunction updateCursorLight() {\r\n    if (!isNaN(mouseX) && !isNaN(mouseY)) {\r\n        let targetPos = getRaycastPos(mouseX, mouseY)\r\n        let camPosZ = camera.position.z\r\n        let targetPosVec = new THREE.Vector3().copy(targetPos)\r\n        targetPosVec = targetPosVec.sub(camera.position)\r\n        let newz = -80\r\n        let x = (newz - camPosZ) / targetPosVec.z\r\n        targetPos.copy(camera.position)\r\n        targetPosVec.multiplyScalar(x)\r\n        targetPos.add(targetPosVec)\r\n        cursorLightController.update(targetPos)\r\n    }\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n    camera.aspect = window.innerWidth / window.innerHeight\r\n    camera.updateProjectionMatrix()\r\n\r\n    fxaaPass.material.uniforms[ 'resolution' ].value.x = 1 / ( container.offsetWidth * window.devicePixelRatio )\r\n    fxaaPass.material.uniforms[ 'resolution' ].value.y = 1 / ( container.offsetHeight * window.devicePixelRatio )\r\n    glassFrontMaterial.uniforms[ 'resolution' ].value.x = container.offsetWidth * window.devicePixelRatio\r\n    glassFrontMaterial.uniforms[ 'resolution' ].value.y = container.offsetHeight * window.devicePixelRatio\r\n    renderer.setSize( window.innerWidth, window.innerHeight )\r\n    composer.setSize( window.innerWidth, window.innerHeight )\r\n    if (cssRenderer) {\r\n        cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n    }\r\n\r\n}\r\n\r\nfunction animate() {\r\n    requestAnimationFrame( animate )\r\n    updatecornerObject()\r\n    updateCursorLight()\r\n    render()\r\n    controls.update()\r\n    stats.update()\r\n\r\n    // https://github.com/mrdoob/three.js/blob/master/examples/js/renderers/CustomCSS3DRenderer.js\r\n\t// camera.updateMatrixWorld();\r\n    // camera.updateMatrixWorld()\r\n    // const fov = camera.projectionMatrix.elements[ 5 ] * window.innerHeight;\r\n    // const style = 'translateZ(' + fov + 'px)' + getCameraCSSMatrix( camera.matrixWorldInverse ) // + 'translate(' + window.innerWidth/2 + 'px,' + window.innerHeight/2 + 'px)';\r\n    // let cameraCSSMatrix = getCameraCSSMatrix( camera.matrixWorldInverse.toArray() )\r\n    // let style = 'translate(' + window.innerWidth/2 + 'px,' + window.innerHeight/2 + 'px)' + cameraCSSMatrix;\r\n    // cssCoordinators.forEach(coordinator => {\r\n    //     coordinator.update(fov, style)\r\n    // })\r\n\r\n}\r\n\r\nfunction render()\r\n{\r\n    composer.render()\r\n    renderer.clearDepth()\r\n    renderer.setRenderTarget(glassBackRenderTarget)\r\n    renderer.render(glassBackScene, camera)\r\n    renderer.setRenderTarget(null)\r\n    renderer.render(glassFrontScene, camera)\r\n    if (cssRenderer) {\r\n        cssRenderer.render(cssScene, camera)\r\n    }\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport * as ThreeSceneLoader from '../scripts/Three/ThreeSceneLoader'\r\n\r\nexport default Vue.extend({\r\n    mounted() {\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            ThreeSceneLoader.initScene(this.$refs['canvas-container'])\r\n        }\r\n        if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n            ThreeSceneLoader.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-350, -250, 0))\r\n        }\r\n        if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-corner'] instanceof HTMLElement) {\r\n            const cornerObj = ThreeSceneLoader.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-corner'], new THREE.Vector3(0, -200, -1000))\r\n            cornerObj.setFollowObject(ThreeSceneLoader.cornerObject, new THREE.Vector3())\r\n            \r\n        }\r\n    },\r\n    methods: {\r\n        cornerClicked() {\r\n            alert('corner clicked!')\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeSceneTest.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeSceneTest.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeSceneTest.vue?vue&type=template&id=38107686&scoped=true&\"\nimport script from \"./ThreeSceneTest.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeSceneTest.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeSceneTest.vue?vue&type=style&index=0&id=38107686&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"38107686\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeSceneTest.vue?vue&type=style&index=0&id=38107686&scoped=true&lang=css&\""],"sourceRoot":""}