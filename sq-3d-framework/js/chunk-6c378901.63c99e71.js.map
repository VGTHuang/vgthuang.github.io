{"version":3,"sources":["webpack:///./src/views/ThreeFrontpageTest2.vue?d613","webpack:///./src/scripts/FrontPage2.0/ParticleEngine.ts","webpack:///./src/scripts/FrontPage2.0/index.ts","webpack:///./src/views/ThreeFrontpageTest2.vue","webpack:///./src/views/ThreeFrontpageTest2.vue?3e9f","webpack:///./src/views/ThreeFrontpageTest2.vue?64c0","webpack:///./src/views/ThreeFrontpageTest2.vue?455d"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","attrs","staticClass","class","loadingStat","isLoaded","noLoadingStat","style","width","loaded","total","_v","_s","Math","round","staticRenderFns","position","rotation","scale","color","instanceIndex","birthTime","deathTime","dummy","mesh","copy","set","updateMatrix","setMatrixAt","matrix","setColorAt","mixColor","direction","random","randomFactor","interp","animRuleFunc","resetGeom","ruleOut","index","originalPosition","originalRotation","originalColor","originalScale","curPosition","curRotation","curScale","curColor","particleCount","geometry","material","instanceMatrix","setUsage","setInitPosition","setInitRotation","setInitScale","setInitColor","particleControllers","i","initPosition","initRotation","initScale","initColor","tempParticleController","push","setInitMixColor","isInTransition","initMixColor","transitionTime","self","tweenNumber","forEach","pc","updateGeomByRule","needsUpdate","instanceColor","_container","onLoad","onProgress","onError","requestAnimationFrame","animate","updateCamera","stats","update","cameraZPosition","container","camera","window","innerWidth","innerHeight","renderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","top","left","appendChild","zIndex","scene","cssScene","cardInsideScene","loadingManager","url","r","urls","textureCube","load","mapping","environment","refractionManager","renderPass","RenderPass","clear","clearDepth","composer","EffectComposer","backRenderTarget","renderToScreen","addPass","texture","readBuffer","frontScene","background","light","x","y","z","add","glassParticleControllerDict","intersectGlassObjs","glassMesh2","RoundedBoxGeometry","glassAngle","PI","glassPosRadius","cos","sin","tx","addRefractionMesh","particleGeometry","particleMaterial","pe2","_","angle","radiusNew","randomOffset","multiplyScalar","ruleIn","atan","posExpand","posYExpand","sqrt","lerp","pe","isTransisting","selectedGlassParticleController","loader","TDSLoader","obj","children","dodeca","pe1","rotateAngle","leavesParticleCount","leavesMatrixDummy","leavesParticlesMeshes","side","console","log","leaf","getRandomLeavePosition","getRandomLeaveRotation","getRandomLeaveScale","waterGeometry","water","SQWater","flowDirection","textureWidth","textureHeight","cameraWithMouseRotateFactor","cameraWithMouseMoveFactor","cameraTargetPosition","cameraLootAtController","addEventListener","e","onMouseMove","raycaster","undefined","mousePosX","mousePosY","pointer","onWindowResize","onClick","setRenderTarget","cssRenderer","aspect","updateProjectionMatrix","glassParticleController","particleEngine","refObj","transit","tweenEuler","v","Exponential","InOut","val","refractionMaterialUniforms","value","b","GlassParticleController","clientX","clientY","setFromCamera","intersects","intersectObjects","length","object","gp","inactivateGlassParticleController","activateGlassParticleController","posX","posY","ray","unproject","relX","relY","dampPos","lookAt","currentVec3","vel","velocity","htmlContainer","htmlElem","CustomCSS3DRenderer","radius","extend","data","fpm","mounted","$refs","HTMLElement","setTimeout","error","registerCSSCoordinator","methods","onGlassClick","alert","component"],"mappings":"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","file":"js/chunk-6c378901.63c99e71.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}},[_c('div',{staticClass:\"loading-container\",class:{\n            'loading-container--hidden': _vm.loadingStat.isLoaded,\n            'loading-container--none': _vm.loadingStat.noLoadingStat\n        }},[_c('div',{staticClass:\"load-stat\"},[_c('div',{staticClass:\"load-pgbar\",style:({\n                    width: 100 * _vm.loadingStat.loaded / _vm.loadingStat.total + '%'\n                })}),_c('div',{staticClass:\"load-text\"},[_vm._v(_vm._s(Math.round(100 * _vm.loadingStat.loaded / _vm.loadingStat.total))+\" %\")])])])]),_c('div',{ref:\"dom3d-container\",attrs:{\"id\":\"dom3d-container\"}},[_c('div',{ref:\"dom3d-test\",attrs:{\"id\":\"dom3d-test\"}},[_c('p',[_vm._v(\"HTML element: Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua\")])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","// inspired by https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/js/ParticleEngine.js\r\n\r\nimport * as THREE from 'three'\r\n// import { loadShader } from '../Three/ShaderLoader'\r\nimport { controller } from '../AnimUtils/TweenUtils'\r\n\r\nexport class ParticleController {\r\n    birthTime: number\r\n    deathTime: number\r\n    position: THREE.Vector3\r\n    scale: number\r\n    rotation: THREE.Euler\r\n    // velocity: THREE.Vector3\r\n    // acceleration: THREE.Vector3\r\n    color: THREE.Color\r\n    instanceIndex: number\r\n    dummy: THREE.Object3D\r\n    constructor(position: THREE.Vector3, rotation: THREE.Euler, scale: number, color: THREE.Color, instanceIndex: number) {\r\n        this.birthTime = 0\r\n        this.deathTime = 1\r\n        this.position = position\r\n        this.rotation = rotation\r\n        this.scale = scale\r\n        this.dummy = new THREE.Object3D()\r\n        // this.velocity = new THREE.Vector3(0, 0, 0)\r\n        // this.acceleration = new THREE.Vector3(0, 0, 0)\r\n        this.color = color\r\n        this.instanceIndex = instanceIndex\r\n    }\r\n    resetGeom(mesh: THREE.InstancedMesh) {\r\n        this.dummy.position.copy(this.position)\r\n        this.dummy.rotation.copy(this.rotation)\r\n        this.dummy.scale.set(this.scale, this.scale, this.scale)\r\n        this.dummy.updateMatrix()\r\n        mesh.setMatrixAt(this.instanceIndex, this.dummy.matrix)\r\n        mesh.setColorAt(this.instanceIndex, this.color)\r\n    }\r\n}\r\n\r\nexport type ParticleAnimRuleIn = {\r\n    index: number,\r\n    interp: number,\r\n    originalPosition: THREE.Vector3,\r\n    originalRotation: THREE.Euler,\r\n    originalScale: number,\r\n    originalColor: THREE.Color,\r\n    mixColor: THREE.Color,\r\n    randomFactor: number\r\n}\r\n\r\nexport type ParticleAnimRuleOut = {\r\n    curPosition: THREE.Vector3,\r\n    curRotation: THREE.Euler,\r\n    curScale: number,\r\n    curColor: THREE.Color\r\n}\r\n\r\nexport class ParticleRuleController extends ParticleController {\r\n    direction: THREE.Vector3\r\n    mixColor: THREE.Color\r\n    randomFactor: number\r\n    constructor(position: THREE.Vector3, rotation: THREE.Euler, scale: number, color: THREE.Color, mixColor: THREE.Color, instanceIndex: number) {\r\n        super(position, rotation, scale, color, instanceIndex)\r\n        this.direction = new THREE.Vector3().copy(position)\r\n        this.birthTime = Math.random() * 0.2\r\n        this.deathTime = Math.random() * 0.2 + 0.8\r\n        this.mixColor = mixColor\r\n        this.randomFactor = Math.random()\r\n    }\r\n    updateGeomByRule(\r\n    mesh: THREE.InstancedMesh, interp: number,\r\n    animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut) {\r\n        if (interp < this.birthTime) {\r\n            return\r\n        }\r\n        else if (interp >= this.deathTime) {\r\n            this.resetGeom(mesh)\r\n            return\r\n        }\r\n        else {\r\n            let ruleOut = animRuleFunc({\r\n                index: this.instanceIndex,\r\n                interp: (interp - this.birthTime) / (this.deathTime - this.birthTime),\r\n                originalPosition: this.position,\r\n                originalRotation: this.rotation,\r\n                originalColor: this.color,\r\n                originalScale: this.scale,\r\n                mixColor: this.mixColor,\r\n                randomFactor: this.randomFactor\r\n            })\r\n            this.dummy.position.copy(ruleOut.curPosition)\r\n            this.dummy.rotation.copy(ruleOut.curRotation)\r\n            this.dummy.scale.set(ruleOut.curScale, ruleOut.curScale, ruleOut.curScale)\r\n            this.dummy.updateMatrix()\r\n            mesh.setMatrixAt(this.instanceIndex, this.dummy.matrix)\r\n            mesh.setColorAt(this.instanceIndex, ruleOut.curColor)\r\n        }\r\n    }\r\n}\r\n\r\nexport class AbstractParticleEngine {\r\n    particleCount: number\r\n    mesh: THREE.InstancedMesh\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        // setInitPosition: (index: number) => THREE.Vector3,\r\n        // setInitRotation: (index: number) => THREE.Euler,\r\n        // setInitScale: (index: number) => number,\r\n        // setInitColor: (index: number) => THREE.Color,\r\n        ) {\r\n        this.particleCount = particleCount\r\n        this.mesh = new THREE.InstancedMesh(geometry, material, particleCount)\r\n        this.mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage )\r\n        // this.particleControllers = []\r\n        // for (let i = 0; i < particleCount; i++) {\r\n        //     let initPosition = setInitPosition(i)\r\n        //     let initRotation = setInitRotation(i)\r\n        //     let initScale = setInitScale(i)\r\n        //     let initColor = setInitColor(i)\r\n        //     let tempParticleController = new ParticleController(initPosition, initRotation, initScale, initColor)\r\n        //     this.particleControllers.push(\r\n        //         tempParticleController\r\n        //     )\r\n        //     tempParticleController.updateGeomForMesh(this.mesh, this.dummy, i)\r\n        // }\r\n    }\r\n}\r\n\r\n\r\nexport class ParticleStaticEngine extends AbstractParticleEngine {\r\n    particleControllers: Array<ParticleController>\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        setInitPosition: (index: number) => THREE.Vector3,\r\n        setInitRotation: (index: number) => THREE.Euler,\r\n        setInitScale: (index: number) => number,\r\n        setInitColor: (index: number) => THREE.Color,\r\n    ) {\r\n        super(particleCount, geometry, material)\r\n        this.particleControllers = []\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let initPosition = setInitPosition(i)\r\n            let initRotation = setInitRotation(i)\r\n            let initScale = setInitScale(i)\r\n            let initColor = setInitColor(i)\r\n            let tempParticleController = new ParticleController(initPosition, initRotation, initScale, initColor, i)\r\n            this.particleControllers.push(\r\n                tempParticleController\r\n            )\r\n            tempParticleController.resetGeom(this.mesh)\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport class ParticleRuleEngine extends AbstractParticleEngine {\r\n    isInTransition: boolean\r\n    particleControllers: Array<ParticleRuleController>\r\n    animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut\r\n    constructor(particleCount: number = 100, geometry: THREE.BufferGeometry, material: THREE.Material, \r\n        setInitPosition: (index: number) => THREE.Vector3,\r\n        setInitRotation: (index: number) => THREE.Euler,\r\n        setInitScale: (index: number) => number,\r\n        setInitColor: (index: number) => THREE.Color,\r\n        setInitMixColor: (index: number) => THREE.Color,\r\n        animRuleFunc: (rule: ParticleAnimRuleIn) => ParticleAnimRuleOut\r\n    ) {\r\n        super(particleCount, geometry, material)\r\n        this.isInTransition = false\r\n        this.particleControllers = []\r\n        this.animRuleFunc = animRuleFunc\r\n        for (let i = 0; i < particleCount; i++) {\r\n            let initPosition = setInitPosition(i)\r\n            let initRotation = setInitRotation(i)\r\n            let initScale = setInitScale(i)\r\n            let initColor = setInitColor(i)\r\n            let initMixColor = setInitMixColor(i)\r\n            let tempParticleController = new ParticleRuleController(\r\n                initPosition, initRotation, initScale, initColor, initMixColor, i\r\n            )\r\n            this.particleControllers.push(\r\n                tempParticleController\r\n            )\r\n            tempParticleController.resetGeom(this.mesh)\r\n        }\r\n    }\r\n    transit(transitionTime: number = 1000) {\r\n        if (this.isInTransition) {\r\n            return\r\n        }\r\n        const self = this\r\n        controller.tweenNumber(0, 1, (interp) => {\r\n            self.particleControllers.forEach(pc => {\r\n                pc.updateGeomByRule(self.mesh, interp, self.animRuleFunc)\r\n            })\r\n            self.mesh.instanceMatrix.needsUpdate = true\r\n            if (self.mesh.instanceColor) {\r\n                self.mesh.instanceColor.needsUpdate = true\r\n            }\r\n        },\r\n        () => {\r\n            self.isInTransition = false\r\n            // self.particleControllers.forEach(pc => {\r\n            //     pc.resetGeom(self.mesh, self.dummy)\r\n            // })\r\n            self.mesh.instanceMatrix.needsUpdate = true\r\n            if (self.mesh.instanceColor) {\r\n                self.mesh.instanceColor.needsUpdate = true\r\n            }\r\n        }, transitionTime)\r\n    }\r\n}","import * as THREE from 'three'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { Stats } from 'three-stats'\r\nimport { TDSLoader } from 'three/examples/jsm/loaders/TDSLoader'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from '../Three/CustomCSS3DRenderer'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { DampingObjectController, DampingVector3Controller } from '../Three/Utils'\r\n// import { RefractionMesh, RefractionManager } from '../Three/Refraction2.0'\r\nimport { RefractionObject, RefractionManager } from '../ThreeRealisticRefraction/ThreeRealisticRefraction'\r\nimport { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry'\r\nimport { controller } from '../AnimUtils/TweenUtils'\r\nimport * as PE from './ParticleEngine'\r\nimport { randn_bm } from '../Three/Utils'\r\nimport { SQWater } from '../Three/SQWater'\r\n\r\ninterface GlassParticleController {\r\n    mesh: THREE.Mesh,\r\n    pe: PE.AbstractParticleEngine,\r\n    isTransisting: boolean\r\n}\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    // controls: OrbitControls\r\n    cardInsideScene: THREE.Scene\r\n    scene: THREE.Scene\r\n    composer: EffectComposer\r\n    stats: Stats\r\n    // controls: OrbitControls\r\n\r\n\r\n    refractionManager: RefractionManager\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraZPosition: number\r\n    cameraLootAtController: DampingVector3Controller\r\n    cameraTargetPosition: THREE.Vector3\r\n    cameraWithMouseRotateFactor: number\r\n    cameraWithMouseMoveFactor: number\r\n\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectGlassObjs: Array<THREE.Object3D>\r\n\r\n    // glass\r\n    glassPosRadius: number\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    leavesParticleCount: number\r\n    leavesMatrixDummy: THREE.Object3D\r\n    leavesParticlesMeshes: Array<THREE.InstancedMesh>\r\n\r\n    glassParticleControllerDict: Array<GlassParticleController>\r\n    selectedGlassParticleController: GlassParticleController | undefined\r\n\r\n    constructor(_container: HTMLElement,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void\r\n        ) {\r\n        const self = this\r\n\r\n        // *********** basic settings ***********\r\n        this.cameraZPosition = 500\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.camera.position.set(0, 200, 150)\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n        this.cardInsideScene = new THREE.Scene()\r\n\r\n        // \r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n\r\n        // *********** background & env ***********\r\n        const r = './cube1/'\r\n        const urls = [\r\n            r + 'px.jpg', r + 'nx.jpg',\r\n            r + 'py.jpg', r + 'ny.jpg',\r\n            r + 'pz.jpg', r + 'nz.jpg'\r\n        ]\r\n        const textureCube = new THREE.CubeTextureLoader(this.loadingManager).load( urls )\r\n        textureCube.mapping = THREE.CubeRefractionMapping\r\n        // this.scene.background = textureCube\r\n        this.scene.environment = textureCube\r\n\r\n\r\n\r\n        // *********** composers & refraction managers ***********\r\n        this.refractionManager = new RefractionManager(this.scene, this.container, this.renderer, this.camera)\r\n        const renderPass = new RenderPass(this.scene, this.camera)\r\n        renderPass.clear = true\r\n        renderPass.clearDepth = false\r\n        this.composer = new EffectComposer(this.renderer, this.refractionManager.backRenderTarget)\r\n        this.composer.renderToScreen = false\r\n        this.composer.addPass(renderPass)\r\n        this.refractionManager.backRenderTarget.texture = this.composer.readBuffer.texture\r\n        this.refractionManager.frontScene.background = this.composer.readBuffer.texture\r\n\r\n\r\n        // *********** set light ***********\r\n        var light = new THREE.PointLight()\r\n        light.position.x = 0\r\n        light.position.y = 100\r\n        light.position.z = 0\r\n        this.scene.add(light)\r\n\r\n        // *********** refraction objects ***********\r\n        \r\n        this.glassParticleControllerDict = []\r\n\r\n        this.intersectGlassObjs = []\r\n        var glassMesh2 = new THREE.Mesh(\r\n            new RoundedBoxGeometry(40, 40, 40, 5, 5),\r\n            // new THREE.BoxGeometry(40, 40, 40),\r\n            new THREE.MeshPhongMaterial({\r\n                color: new THREE.Color(0xff00ff)\r\n            })\r\n        )\r\n        let glassAngle = 0.6 - Math.PI / 2\r\n        this.glassPosRadius = 120\r\n        glassMesh2.position.set(Math.cos(glassAngle) * this.glassPosRadius, 30, Math.sin(glassAngle) * this.glassPosRadius)\r\n        let tx = new THREE.TextureLoader(this.loadingManager).load( './jutabag3ds/texture/normal.jpg' )\r\n        this.refractionManager.addRefractionMesh(glassMesh2, true, tx, 0xff0000, 0xff0000, 2, 0.5)\r\n        this.intersectGlassObjs.push(glassMesh2)\r\n\r\n        var particleGeometry = new THREE.InstancedBufferGeometry().copy(new THREE.SphereGeometry(0.5, 4))\r\n        var particleMaterial = new THREE.MeshBasicMaterial({\r\n            // emissive: new THREE.Color(0xffff80),\r\n            // emissiveIntensity: 0.5\r\n        })\r\n        var pe2 = new PE.ParticleRuleEngine(300, particleGeometry, particleMaterial,\r\n            (_) => {\r\n                // return new THREE.Vector3(0)\r\n                let angle = 2 * Math.PI * Math.random()\r\n                let radiusNew = 60 + randn_bm()\r\n                let randomOffset = new THREE.Vector3(randn_bm() * 10, randn_bm() * 1, randn_bm() * 10)\r\n                return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n            },\r\n            (_) => {\r\n                return new THREE.Euler(0,0,0)\r\n            },\r\n            (_) => {\r\n                return 0\r\n            },\r\n            (_) => {\r\n                if (Math.random() < 0.5) {\r\n                    return new THREE.Color(0xff0000)\r\n                }\r\n                return new THREE.Color(0x800000)\r\n            },\r\n            (_) => {\r\n                return new THREE.Color(0xffff00)\r\n            },\r\n            (ruleIn: PE.ParticleAnimRuleIn) => {\r\n                let rotateAngle = Math.atan(ruleIn.originalPosition.z / ruleIn.originalPosition.x)\r\n                if (ruleIn.originalPosition.x < 0) rotateAngle += Math.PI\r\n                rotateAngle += ruleIn.interp * ruleIn.interp\r\n                let posExpand = new THREE.Vector3().copy(ruleIn.originalPosition).multiplyScalar(ruleIn.interp)\r\n\r\n                // let posXExpand = posExpand\r\n                let posYExpand = Math.sqrt(ruleIn.interp) * 5 - 10\r\n                // posExpand.x += Math.cos(rotateAngle) * 20\r\n                // posExpand.z += Math.sin(rotateAngle) * 20\r\n                // posExpand.y = 0\r\n                posExpand.y += posYExpand\r\n                let ruleOut = {\r\n                    curPosition: posExpand,\r\n                    curRotation: new THREE.Euler(1.0, 0.0, 1.0),\r\n                    curScale: ruleIn.interp * (1 - ruleIn.interp) * 4,\r\n                    curColor: (new THREE.Color()).copy(ruleIn.originalColor).lerp(ruleIn.mixColor, ruleIn.interp * ruleIn.interp)\r\n                }\r\n                return ruleOut\r\n            }\r\n        )\r\n        pe2.mesh.position.copy(glassMesh2.position)\r\n        pe2.mesh.position.y -= 15\r\n        this.scene.add(pe2.mesh)\r\n        this.glassParticleControllerDict.push({\r\n            mesh: glassMesh2,\r\n            pe: pe2,\r\n            isTransisting: false\r\n        })\r\n        this.selectedGlassParticleController = this.glassParticleControllerDict[0]\r\n\r\n\r\n        const loader = new TDSLoader(this.loadingManager)\r\n        loader.load( './dodeca/dodeca.3ds', (obj) => {\r\n            if (obj instanceof THREE.Group && obj.children[0] instanceof THREE.Mesh) {\r\n                var dodeca = obj.children[0]\r\n                dodeca.scale.multiplyScalar(0.3)\r\n                glassAngle = -0.6 - Math.PI / 2\r\n                dodeca.position.set(Math.cos(glassAngle) * this.glassPosRadius, 30, Math.sin(glassAngle) * this.glassPosRadius)\r\n                this.refractionManager.addRefractionMesh(dodeca, true, tx, 0xffa000, 0x00c0ff, 2, 0.8)\r\n                this.intersectGlassObjs.push(dodeca)\r\n\r\n                var pe1 = new PE.ParticleRuleEngine(300, particleGeometry, particleMaterial,\r\n                    (_) => {\r\n                        // return new THREE.Vector3(0)\r\n                        let angle = 2 * Math.PI * Math.random()\r\n                        let radiusNew = 2 + randn_bm()\r\n                        let randomOffset = new THREE.Vector3(randn_bm() * 1, randn_bm() * 1, randn_bm() * 1)\r\n                        return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n                    },\r\n                    (_) => {\r\n                        return new THREE.Euler(0,0,0)\r\n                    },\r\n                    (_) => {\r\n                        return 0\r\n                    },\r\n                    (_) => {\r\n                        if (Math.random() < 0.5) {\r\n                            return new THREE.Color(0x002080)\r\n                        }\r\n                        return new THREE.Color(0x22ff70)\r\n                    },\r\n                    (_) => {\r\n                        return new THREE.Color(0xffff00)\r\n                    },\r\n                    (ruleIn: PE.ParticleAnimRuleIn) => {\r\n                        let rotateAngle = Math.atan(ruleIn.originalPosition.z / ruleIn.originalPosition.x)\r\n                        if (ruleIn.originalPosition.x < 0) rotateAngle += Math.PI\r\n                        rotateAngle -= ruleIn.interp * ruleIn.interp\r\n                        let posExpand = new THREE.Vector3(\r\n                            Math.cos(rotateAngle) * 10 + ruleIn.originalPosition.x,\r\n                            0,\r\n                            Math.sin(rotateAngle) * 10 + ruleIn.originalPosition.z).multiplyScalar(ruleIn.interp * 3 + 1 + ruleIn.randomFactor)\r\n\r\n                        let ruleOut = {\r\n                            curPosition: posExpand,\r\n                            curRotation: new THREE.Euler(1.0, 0.0, 1.0),\r\n                            curScale: ruleIn.interp * (1 - ruleIn.interp) * 4,\r\n                            curColor: (new THREE.Color()).copy(ruleIn.originalColor).lerp(ruleIn.mixColor, ruleIn.interp * ruleIn.interp)\r\n                        }\r\n                        return ruleOut\r\n                    }\r\n                )\r\n                pe1.mesh.position.copy(dodeca.position)\r\n                pe1.mesh.position.y -= 15\r\n                this.scene.add(pe1.mesh)\r\n                this.glassParticleControllerDict.push({\r\n                    mesh: dodeca,\r\n                    pe: pe1,\r\n                    isTransisting: false\r\n                })\r\n            }\r\n        })\r\n\r\n\r\n        // *********** some leaves ***********\r\n        this.leavesParticleCount = 50\r\n        this.leavesMatrixDummy = new THREE.Object3D()\r\n        this.leavesParticlesMeshes = []\r\n\r\n        const material = new THREE.MeshNormalMaterial({\r\n            side: THREE.DoubleSide\r\n        })\r\n        loader.load( './particles/leaves.3ds', (obj) => {\r\n            if (obj instanceof THREE.Group) {\r\n                console.log(obj)\r\n                obj.children.forEach(leaf => {\r\n                    // if (leaf instanceof THREE.Mesh) {\r\n                    //     const material = new THREE.MeshNormalMaterial({\r\n                    //         side: THREE.DoubleSide\r\n                    //     });\r\n                    //     leaf.material = material\r\n                    //     this.scene.add(leaf)\r\n                    // }\r\n                    if (leaf instanceof THREE.Mesh) {\r\n                        // var mesh = new THREE.InstancedMesh( leaf.geometry, material, this.leavesParticleCount )\r\n                        var pe = new PE.ParticleStaticEngine(self.leavesParticleCount, leaf.geometry, material,\r\n                            self.getRandomLeavePosition,\r\n                            self.getRandomLeaveRotation,\r\n                            self.getRandomLeaveScale,\r\n                            (_) => new THREE.Color(0xff00000)\r\n                        )\r\n                        // for (let i = 0; i < this.leavesParticleCount; i++) {\r\n                        //     this.leavesMatrixDummy.position.copy(this.getRandomLeavePosition())\r\n                        //     this.leavesMatrixDummy.rotation.copy(this.getRandomLeaveRotation())\r\n                        //     this.leavesMatrixDummy.scale.copy(this.getRandomLeaveScale())\r\n                        //     this.leavesMatrixDummy.updateMatrix()\r\n                        //     mesh.setMatrixAt(i, this.leavesMatrixDummy.matrix)\r\n                        // }\r\n                        // // mesh.instanceMatrix.setUsage( THREE.DynamicDrawUsage ); // will be updated every frame\r\n                        \r\n                        self.scene.add( pe.mesh )\r\n                        // this.leavesParticlesMeshes.push(mesh)\r\n                    }\r\n                })\r\n                // obj.clear()\r\n                \r\n            }\r\n            // contentGroupInTardisCard1.add(obj)\r\n        })\r\n\r\n\r\n        \r\n        // var cubeGeo = ParticleEngine.getGeom(20)\r\n\r\n\r\n        // var mat = ParticleEngine.genParticleMaterial(spriteAlphaMapTexture)\r\n\r\n        // var mesh11 = new THREE.InstancedMesh(cubeGeo, mat, 8);\r\n\r\n        // this.scene.add(mesh11);\r\n\r\n\r\n\r\n        // *********** water ***********\r\n        const waterGeometry = new THREE.PlaneGeometry( 2000, 2000 )\r\n        console.log(this.composer.readBuffer)\r\n        // const water = new THREE.Mesh( waterGeometry, new THREE.MeshPhongMaterial({\r\n        //     color: new THREE.Color(0xfff0ff),\r\n        //     // map: this.composer.readBuffer.texture,\r\n        //     emissive: new THREE.Color(0x005080),\r\n        //     emissiveIntensity: 0.6\r\n        // }) );\r\n\r\n        const water = new SQWater( waterGeometry, this.scene, {\r\n            // color: params.color,\r\n            // scale: params.scale,\r\n            color: new THREE.Color(0xffff00),\r\n            flowDirection: new THREE.Vector2( 1, 1 ),\r\n            textureWidth: 1024,\r\n            textureHeight: 1024\r\n        } );\r\n\r\n        water.position.y = -10;\r\n        water.position.z -= 500;\r\n        water.rotation.x = Math.PI * - 0.5;\r\n        this.scene.add( water );\r\n\r\n        // this.refractionManager.frontScene.background = textureCube\r\n\r\n\r\n        // *********** camera movement ***********\r\n        // this.cameraTargetPosition = new THREE.Vector3(0, 0, this.cameraZPosition)\r\n        // this.camera.position.copy(this.cameraTargetPosition)\r\n        // this.camera.lookAt(0, 0, 0)\r\n        this.cameraWithMouseRotateFactor = 0.07\r\n        this.cameraWithMouseMoveFactor = 4\r\n        this.cameraTargetPosition = new THREE.Vector3().copy(glassMesh2.position)\r\n        this.cameraLootAtController = new DampingVector3Controller(new THREE.Vector3().copy(this.cameraTargetPosition), 0.9, 0.002)\r\n        window.addEventListener('mousemove', e => {\r\n            self.onMouseMove(e)\r\n        })\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.selectedGlassParticleController = undefined\r\n\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n        window.addEventListener( 'resize', () => {\r\n            self.onWindowResize()\r\n        } )\r\n        window.addEventListener( 'click', (e) => {\r\n            self.onClick(e)\r\n        } )\r\n\r\n        // *********** final animate ***********\r\n        this.animate()\r\n    }\r\n\r\n    animate = () => {\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        // this.updatecornerObject()\r\n        this.updateCamera()\r\n        this.render()\r\n        this.stats.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render()\r\n    {\r\n        this.renderer.setRenderTarget(this.refractionManager.backRenderTarget)\r\n        this.composer.render()\r\n\r\n        this.refractionManager.render()\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize() {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.refractionManager.onWindowResize()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        this.composer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    activateGlassParticleController(glassParticleController: GlassParticleController) {\r\n        const particleEngine = glassParticleController.pe\r\n        const mesh = glassParticleController.mesh\r\n        const refObj = mesh ? mesh['refractionObject'] : null\r\n        this.cameraTargetPosition.copy(mesh.position)\r\n        if (particleEngine instanceof PE.ParticleRuleEngine) {\r\n            particleEngine.transit(3000)\r\n        }\r\n        if (refObj instanceof RefractionObject) {\r\n            glassParticleController.isTransisting = true\r\n            controller.tweenEuler(mesh.rotation, new THREE.Euler(0.5,0.8,1), (v) => {\r\n                mesh.rotation.copy(v)\r\n                },\r\n                () => {\r\n                    glassParticleController.isTransisting = false\r\n                },\r\n                1500,\r\n                TWEEN.Easing.Exponential.InOut\r\n            )\r\n            controller.tweenNumber(1, 0, (val) => {\r\n                refObj.refractionMaterialUniforms['absorbColor'].value.b = val\r\n            },\r\n            () => {},\r\n            1500,\r\n            TWEEN.Easing.Exponential.InOut)\r\n        }\r\n    }\r\n\r\n    inactivateGlassParticleController(GlassParticleController: GlassParticleController) {\r\n        const mesh = GlassParticleController.mesh\r\n        const refObj = mesh ? mesh['refractionObject'] : null\r\n        \r\n        if (refObj instanceof RefractionObject) {\r\n            GlassParticleController.isTransisting = true\r\n            controller.tweenEuler(mesh.rotation, new THREE.Euler(0, 0, 0), (v) => {\r\n                mesh.rotation.copy(v)\r\n                },\r\n                () => {GlassParticleController.isTransisting = false},\r\n                1500,\r\n                TWEEN.Easing.Exponential.InOut\r\n            )\r\n            controller.tweenNumber(0, 1, (val) => {\r\n                refObj.refractionMaterialUniforms['absorbColor'].value.b = val\r\n            },\r\n            () => {},\r\n            1500,\r\n            TWEEN.Easing.Exponential.InOut)\r\n        }\r\n    }\r\n    \r\n    onMouseMove(e: MouseEvent) {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectGlassObjs, false )\r\n        if (intersects.length == 1 && this.selectedGlassParticleController?.mesh != intersects[0].object) {\r\n            this.glassParticleControllerDict.forEach(gp => {\r\n                if (gp.mesh !== intersects[0].object) {\r\n                    this.inactivateGlassParticleController(gp)\r\n                }\r\n                else {\r\n                    this.selectedGlassParticleController = gp\r\n                    this.activateGlassParticleController(gp)\r\n                }\r\n            })\r\n        }\r\n    }\r\n\r\n    onClick(e: MouseEvent) {\r\n        const intersects = this.raycaster.intersectObjects( this.intersectGlassObjs, false )\r\n        if (intersects.length == 1 && this.selectedGlassParticleController?.mesh != intersects[0].object) {\r\n            this.glassParticleControllerDict.forEach(gp => {\r\n                if (gp.mesh !== intersects[0].object) {\r\n                    this.inactivateGlassParticleController(gp)\r\n                }\r\n                else {\r\n                    this.selectedGlassParticleController = gp\r\n                    this.activateGlassParticleController(gp)\r\n                }\r\n            })\r\n        }\r\n        else if (intersects.length == 1 && this.selectedGlassParticleController?.mesh == intersects[0].object) {\r\n            if (this.selectedGlassParticleController.pe instanceof PE.ParticleRuleEngine) {\r\n                this.selectedGlassParticleController.pe.transit(3000)\r\n            }\r\n        }\r\n        // if (this.glassSelected) {\r\n        //     this.pe2.transit(2000)\r\n        // }\r\n    }\r\n\r\n    getRaycastPos(posX: number, posY: number) {\r\n        let x = (2.0 * posX) / window.innerWidth - 1.0\r\n        let y = 1.0 - (2.0 * posY) / window.innerHeight\r\n        // let z = 1.0\r\n        // let ray_nds = new THREE.Vector3(x, y, z)\r\n        let ray = new THREE.Vector3(x, y, 0.995)\r\n        ray.unproject(this.camera)\r\n        return ray\r\n    }\r\n\r\n    // updatecornerObject() {\r\n    //     let targetPos = this.getRaycastPos(window.innerWidth - 200, window.innerHeight / 2)\r\n    //     this.glassMesh1Controller.update(targetPos)\r\n    // }\r\n\r\n    updateCamera() {\r\n        const relX = window.innerWidth / 2 - this.mousePosX\r\n        const relY = window.innerHeight / 2 - this.mousePosY\r\n        // console.log(this.cameraTargetPosition)\r\n        const dampPos = (new THREE.Vector3(\r\n            -relX * this.cameraWithMouseRotateFactor,\r\n            relY * this.cameraWithMouseRotateFactor,\r\n            0\r\n        )).add(this.cameraTargetPosition)\r\n\r\n        this.cameraLootAtController.update(dampPos)\r\n        // this.cameraLootAtController.update(this.cameraTargetPosition)\r\n        this.camera.lookAt(this.cameraLootAtController.currentVec3)\r\n        var vel = this.cameraLootAtController.velocity\r\n        this.camera.position.x = vel.x * this.cameraWithMouseMoveFactor\r\n        this.camera.position.y = 200 - vel.y * this.cameraWithMouseMoveFactor\r\n    }\r\n\r\n    registerCSSCoordinator(htmlContainer: HTMLElement, htmlElem: HTMLElement, position: THREE.Vector3 = new THREE.Vector3(), scale: number = 1.0): CustomCSS3DObject {\r\n        if (this.cssRenderer == undefined) {\r\n            this.cssRenderer = new CustomCSS3DRenderer(htmlContainer)\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n        // controls = new OrbitControls(camera, cssRenderer.domElement)\r\n        const object = new CustomCSS3DObject( htmlElem )\r\n        object.position.copy(position)\r\n        object.scale.multiplyScalar(scale)\r\n        this.cssScene.add(object)\r\n        return object\r\n        // cssCoordinators.push(new ThreeCSSCoordinator(htmlContainer, htmlCamera, htmlElem, camera, position))\r\n    }\r\n\r\n\r\n    getRandomLeavePosition(index: number, radius: number = 300): THREE.Vector3 {\r\n        let angle = randn_bm() * 0.8 - Math.PI / 2\r\n        let radiusNew = radius + randn_bm()\r\n        let randomOffset = new THREE.Vector3(randn_bm() * 60, randn_bm() * 5, randn_bm() * 60)\r\n        return new THREE.Vector3(Math.cos(angle), 0, Math.sin(angle)).multiplyScalar(radiusNew).add(randomOffset)\r\n    }\r\n\r\n    getRandomLeaveRotation(index: number, scale: number = 10): THREE.Euler {\r\n        return new THREE.Euler(Math.random() * scale, Math.random() * scale, 0)\r\n    }\r\n\r\n    getRandomLeaveScale(): number {\r\n        return Math.random() * 0.2 + 0.2\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport {\r\n    FrontPageManager\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { FrontPageManager } from '../scripts/FrontPage2.0'\r\n\r\ntype Data = {\r\n    fpm: FrontPageManager | null,\r\n    loadingStat: {\r\n        loaded: number,\r\n        total: number,\r\n        isLoaded: boolean,\r\n        noLoadingStat: boolean\r\n    }\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            fpm: null,\r\n            loadingStat: {\r\n                loaded: 0,\r\n                total: 1,\r\n                isLoaded: false,\r\n                noLoadingStat: false\r\n            }\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.fpm = new FrontPageManager(\r\n                this.$refs['canvas-container'],\r\n                () => {\r\n                    console.log('loaded')\r\n                    self.loadingStat.isLoaded = true\r\n                    setTimeout(() => {\r\n                        self.loadingStat.noLoadingStat = true\r\n                    }, 501)\r\n                },\r\n                (_, loaded, total) => {\r\n                    this.loadingStat.loaded = loaded\r\n                    this.loadingStat.total = total\r\n                },\r\n                (url) => {\r\n                    console.error('failed to load asset: ' + url)\r\n                    self.loadingStat.isLoaded = true\r\n                }\r\n            )\r\n            if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n                this.fpm.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-200, 200, 0))\r\n            }\r\n        }\r\n    },\r\n    methods: {\r\n        onGlassClick() {\r\n            alert('glass clicked!')\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeFrontpageTest2.vue?vue&type=template&id=504acd3e&scoped=true&\"\nimport script from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=504acd3e&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"504acd3e\",\n  null\n  \n)\n\nexport default component.exports","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=504acd3e&scoped=true&lang=css&\""],"sourceRoot":""}