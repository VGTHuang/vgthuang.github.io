(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-5283e1a6"],{"08fd":function(e,r,t){var n={"./GlassFrontShader/F.glsl":"f430"};function o(e){var r=a(e);return t(r)}function a(e){if(!t.o(n,e)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=a,e.exports=o,o.id="08fd"},1148:function(e,r,t){"use strict";var n=t("da84"),o=t("5926"),a=t("577e"),i=t("1d80"),s=n.RangeError;e.exports=function(e){var r=a(i(this)),t="",n=o(e);if(n<0||n==1/0)throw s("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(r+=r))1&n&&(t+=r);return t}},"38cf":function(e,r,t){var n=t("23e7"),o=t("1148");n({target:"String",proto:!0},{repeat:o})},5303:function(e,r,t){var n={"./GlassFrontShader/V.glsl":"c444"};function o(e){var r=a(e);return t(r)}function a(e){if(!t.o(n,e)){var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=a,e.exports=o,o.id="5303"},6189:function(e,r,t){},7612:function(e,r,t){"use strict";t.d(r,"a",(function(){return i}));var n=t("5a89");const o=new n["kb"];function a(e,r,t,n,a,i){const s=2*Math.PI*a/4,c=Math.max(i-2*a,0),l=Math.PI/4;o.copy(r),o[n]=0,o.normalize();const f=.5*s/(s+c),v=1-o.angleTo(e)/l;if(1===Math.sign(o[t]))return v*f;{const e=c/(s+c);return e+f+f*(1-v)}}class i extends n["c"]{constructor(e=1,r=1,t=1,o=2,i=.1){if(o=2*o+1,i=Math.min(e/2,r/2,t/2,i),super(1,1,1,o,o,o),1===o)return;const s=this.toNonIndexed();this.index=null,this.attributes.position=s.attributes.position,this.attributes.normal=s.attributes.normal,this.attributes.uv=s.attributes.uv;const c=new n["kb"],l=new n["kb"],f=new n["kb"](e,r,t).divideScalar(2).subScalar(i),v=this.attributes.position.array,d=this.attributes.normal.array,h=this.attributes.uv.array,u=v.length/6,g=new n["kb"],b=.5/o;for(let n=0,m=0;n<v.length;n+=3,m+=2){c.fromArray(v,n),l.copy(c),l.x-=Math.sign(l.x)*b,l.y-=Math.sign(l.y)*b,l.z-=Math.sign(l.z)*b,l.normalize(),v[n+0]=f.x*Math.sign(c.x)+l.x*i,v[n+1]=f.y*Math.sign(c.y)+l.y*i,v[n+2]=f.z*Math.sign(c.z)+l.z*i,d[n+0]=l.x,d[n+1]=l.y,d[n+2]=l.z;const o=Math.floor(n/u);switch(o){case 0:g.set(1,0,0),h[m+0]=a(g,l,"z","y",i,t),h[m+1]=1-a(g,l,"y","z",i,r);break;case 1:g.set(-1,0,0),h[m+0]=1-a(g,l,"z","y",i,t),h[m+1]=1-a(g,l,"y","z",i,r);break;case 2:g.set(0,1,0),h[m+0]=1-a(g,l,"x","z",i,e),h[m+1]=a(g,l,"z","x",i,t);break;case 3:g.set(0,-1,0),h[m+0]=1-a(g,l,"x","z",i,e),h[m+1]=1-a(g,l,"z","x",i,t);break;case 4:g.set(0,0,1),h[m+0]=1-a(g,l,"x","y",i,e),h[m+1]=1-a(g,l,"y","x",i,r);break;case 5:g.set(0,0,-1),h[m+0]=a(g,l,"x","y",i,e),h[m+1]=1-a(g,l,"y","x",i,r);break}}}}},"7d52":function(e,r,t){"use strict";t.d(r,"b",(function(){return x})),t.d(r,"a",(function(){return y})),t.d(r,"c",(function(){return w}));var n=t("3835"),o=t("bee2"),a=t("d4ec"),i=t("ade3"),s=(t("d3b7"),t("159b"),t("38cf"),t("5a89")),c=t("4721"),l=t("7612");function f(e){try{var r=t("5303")("./"+e+"/V.glsl"),n=t("08fd")("./"+e+"/F.glsl");return[r,n]}catch(o){return console.error("failed to fetch shader",o),["",""]}}var v,d,h,u,g,b,m,p=t("61d9"),x=Object(o["a"])((function e(r,t,o,c,l,v,d,h,u,g){if(Object(a["a"])(this,e),Object(i["a"])(this,"mesh",void 0),Object(i["a"])(this,"originalMaterial",void 0),Object(i["a"])(this,"refractionMaterial",void 0),Object(i["a"])(this,"backColor",void 0),Object(i["a"])(this,"refractionMaterialUniforms",void 0),this.mesh=t,this.mesh["refractionObject"]=this,this.mesh.material instanceof Array){this.originalMaterial=new Array;for(var b=0;b<this.mesh.material.length;b++)this.originalMaterial.push(this.mesh.material[b].clone())}else this.originalMaterial=this.mesh.material.clone();this.backColor=d,this.refractionMaterialUniforms={resolution:{value:o},tBackground:{value:c},tBackDepth:{value:v},tDisplayImage:{value:l},tSkybox:{value:r.environment},refractionFactor:{value:u},opacity:{value:g},absorbColor:{value:new s["g"](h)},objectCenter:{value:t.position}};var m=f("GlassFrontShader"),p=Object(n["a"])(m,2),x=p[0],y=p[1];this.refractionMaterial=new s["ab"]({vertexShader:x,fragmentShader:y,uniforms:this.refractionMaterialUniforms,side:s["u"]})})),y=function(){function e(r,t,n,o){var c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:512;Object(a["a"])(this,e),Object(i["a"])(this,"container",void 0),Object(i["a"])(this,"backgroundScene",void 0),Object(i["a"])(this,"renderer",void 0),Object(i["a"])(this,"camera",void 0),Object(i["a"])(this,"frontScene",void 0),Object(i["a"])(this,"backdepthTexture",void 0),Object(i["a"])(this,"backRenderTarget",void 0),Object(i["a"])(this,"refractionObjectList",void 0),Object(i["a"])(this,"suResolution",void 0),this.container=t,this.backgroundScene=r,this.renderer=n,this.camera=o,this.frontScene=new s["Y"],this.backdepthTexture=new s["k"](c,c,s["t"]),this.backRenderTarget=new s["nb"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio),this.backRenderTarget.depthBuffer=!0,this.backRenderTarget.depthTexture=this.backdepthTexture,this.backRenderTarget.depthTexture.type=s["ib"],this.frontScene.background=this.backRenderTarget.texture,this.frontScene.environment=this.backgroundScene.environment,this.refractionObjectList=[],this.suResolution=new s["jb"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio)}return Object(o["a"])(e,[{key:"genFresnelMaterial",value:function(e){var r=s["Z"].lib["fresnel"],t=s["hb"].clone(r.uniforms);t["tCube"].value=e;var n={fragmentShader:r.fragmentShader,vertexShader:r.vertexShader,uniforms:t},o=new s["ab"](n);return o}},{key:"addRefractionMesh",value:function(e){var r=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],t=arguments.length>2?arguments[2]:void 0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:16777215,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,a=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1.49,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:.2,c=new s["g"](n);r&&(e.material=new s["L"]({color:c,transparent:!0,opacity:.5,metalness:1,reflectivity:0,roughness:0,side:s["b"]})),this.refractionObjectList.push(new x(this.backgroundScene,e,this.suResolution,this.backRenderTarget.texture,t,this.backRenderTarget.depthTexture,c,o,a,i)),this.backgroundScene.add(e)}},{key:"onWindowResize",value:function(){this.suResolution.x=this.container.offsetWidth*window.devicePixelRatio,this.suResolution.y=this.container.offsetHeight*window.devicePixelRatio}},{key:"render",value:function(){var e=this;this.refractionObjectList.forEach((function(r){r.mesh.material=r.refractionMaterial,e.frontScene.add(r.mesh)})),this.renderer.setRenderTarget(null),this.renderer.render(this.frontScene,this.camera),this.refractionObjectList.forEach((function(r){r.mesh.material=r.originalMaterial,e.backgroundScene.add(r.mesh)}))}}]),e}();function w(e){v=e,h=new s["O"](45,window.innerWidth/window.innerHeight,1,5e3),h.position.set(30,20,200),h.lookAt(0,0,0),b=new s["Y"],d=new s["ob"]({antialias:!0,alpha:!0}),d.setClearColor(16777215),d.setPixelRatio(window.devicePixelRatio),d.setSize(window.innerWidth,window.innerHeight),v.appendChild(d.domElement),u=new c["a"](h,v),v.style.position="absolute",v.style.top="0px",v.style.left="0px",g=new p["Stats"],g.domElement.style.zIndex="100",v.appendChild(g.domElement);var r="./cube/",t=[r+"px.jpg",r+"nx.jpg",r+"py.jpg",r+"ny.jpg",r+"pz.jpg",r+"nz.jpg"],n=(new s["i"]).load(t);n.mapping=s["h"],b.background=n,b.environment=n;var o=new s["l"];o.position.x=300,o.position.y=200,o.position.z=100,b.add(o);var a=(new s["fb"]).load("./checkerboard.jpg");a.wrapS=a.wrapT=s["W"],a.repeat.set(10,10);var i=new s["I"]({map:a,side:s["m"]}),f=new s["R"](1e3,1e3,1,1),x=new s["H"](f,i);x.position.y-=20.1,x.rotation.x=Math.PI/2,m=new y(b,v,d,h);var w=new s["H"](new l["a"](40,40,40,5,5),new s["K"]({}));w.position.x-=40;var P=new s["H"](new s["bb"](20),new s["K"]({})),j=new s["H"](new s["j"](20,20,80,36),new s["K"]({}));j.position.x+=40,j.position.y+=20,m.addRefractionMesh(w,!0,null,0,0),m.addRefractionMesh(P,!0,null,24576,24576),m.addRefractionMesh(j,!0,null,1587,1587);var F=new s["H"](new s["bb"](20),new s["K"]({color:16711680}));F.position.copy(w.position),F.position.z-=50,b.add(F),window.addEventListener("resize",k),C()}function k(){h.aspect=window.innerWidth/window.innerHeight,h.updateProjectionMatrix(),m.onWindowResize(),d.setSize(window.innerWidth,window.innerHeight)}function C(){requestAnimationFrame(C),P(),u.update(),g.update()}function P(){m.render()}},b7b6:function(e,r,t){"use strict";t.r(r);var n=function(){var e=this,r=e.$createElement,t=e._self._c||r;return t("div",[t("div",{ref:"canvas-container",attrs:{id:"canvas-container"}})])},o=[],a=t("2b0e"),i=t("7d52"),s=a["a"].extend({mounted:function(){this.$refs["canvas-container"]instanceof HTMLElement&&i["c"](this.$refs["canvas-container"])}}),c=s,l=(t("b7e4"),t("2877")),f=Object(l["a"])(c,n,o,!1,null,"bb4bef88",null);r["default"]=f.exports},b7e4:function(e,r,t){"use strict";t("6189")},c444:function(e,r){e.exports="varying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\n// varying vec3 vRefract;\r\n// varying vec2 vRefractOffset;\r\nvarying vec4 vImageUVCenter;\r\n\r\nuniform vec3 objectCenter;\r\n\r\n\r\nvoid main() {\r\n    vWorldPosition = modelMatrix * vec4( position, 1.0 );\r\n    vec4 mvPosition = viewMatrix * vWorldPosition;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    vUv = uv;\r\n\r\n    vNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n    vCameraPosition = cameraPosition;\r\n\r\n    vProjectionMatrix = projectionMatrix * modelViewMatrix;\r\n    vImageUVCenter = vProjectionMatrix * vec4( objectCenter, 1.0 );\r\n}\r\n"},f430:function(e,r){e.exports="uniform vec2 resolution;\r\nuniform sampler2D tBackground;\r\nuniform sampler2D tBackDepth;\r\nuniform sampler2D tDisplayImage;\r\n\r\nuniform samplerCube tSkybox;\r\nuniform vec3 absorbColor;\r\nuniform float refractionFactor;\r\nuniform float opacity;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\nvarying vec4 vImageUVCenter;\r\n\r\nfloat near = 0.1;\r\nfloat far  = 5000.0;\r\n\r\nfloat LinearizeDepth(float depth) \r\n{\r\n    float z = depth * 2.0 - 1.0; // back to NDC \r\n    return (2.0 * near * far) / (far + near - z * (far - near));\t\r\n}\r\n\r\nvoid main() {\r\n\r\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n    // return;\r\n    float backDepth = float(texture2D( tBackDepth, vec2( gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y ) ).x);\r\n    float frontDepth = gl_FragCoord.z;\r\n\r\n    if (frontDepth > backDepth) {\r\n        discard;\r\n    }\r\n\r\n    float backDepthlinear = LinearizeDepth(backDepth);\r\n    float frontDepthlinear = LinearizeDepth(frontDepth);\r\n    \r\n    float backToFrontDepth = backDepthlinear - frontDepthlinear;\r\n    backToFrontDepth *= 0.5;\r\n    \r\n    vec3 vCameraRay = vWorldPosition.xyz / vWorldPosition.w - vCameraPosition;\r\n    vCameraRay = normalize(vCameraRay);\r\n    vec3 vRefract = refract( vCameraRay, vNormal, 1.0 / refractionFactor );\r\n    vec4 vOriginalPos = vWorldPosition + vec4(vCameraRay, 0.0);\r\n    vec4 vRefractedPos = vWorldPosition + vec4(vRefract, 0.0);\r\n    // vRefractedPos = vOriginalPos; //vWorldPosition + vec4(vRefract, 0.0);\r\n    vec4 vOriginalProjectedPos = vProjectionMatrix * vOriginalPos;\r\n    vec4 vRefractedProjectedPos = vProjectionMatrix * vRefractedPos;\r\n    vec2 offset = normalize(vRefractedProjectedPos - vOriginalProjectedPos).xy;\r\n    offset = normalize(offset);\r\n\r\n    // reflect\r\n    vec3 vReflect = reflect( vCameraRay, vNormal );\r\n    vec3 refCol = vec3(textureCube(tSkybox, vReflect));\r\n\r\n    // snell's law\r\n    float cosTheta1 = dot(vCameraRay, vNormal);\r\n    float sinTheta1 = 1.0 - cosTheta1 * cosTheta1;\r\n    float sinTheta2 = sinTheta1 / refractionFactor;\r\n    float theta2 = asin(sinTheta2);\r\n    offset *= sinTheta2;\r\n    offset *= 100.0;\r\n\r\n    offset /= backDepth;\r\n\r\n    float samplePointX_r = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.9) / resolution.x;\r\n    float samplePointY_r = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.9) / resolution.y;\r\n\r\n    float samplePointX_g = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.95) / resolution.x;\r\n    float samplePointY_g = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.95) / resolution.y;\r\n\r\n    float samplePointX_b = (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x;\r\n    float samplePointY_b = (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y;\r\n    \r\n    float backColor_r = texture2D( tBackground, vec2( samplePointX_r, samplePointY_r ) * 1.0 ).x;\r\n    float backColor_g = texture2D( tBackground, vec2( samplePointX_g, samplePointY_g ) * 1.0 ).y;\r\n    float backColor_b = texture2D( tBackground, vec2( samplePointX_b, samplePointY_b ) * 1.0 ).z;\r\n\r\n    vec3 backColor = vec3(backColor_r, backColor_g, backColor_b);\r\n    vec3 absorbColor = absorbColor * sqrt(backToFrontDepth) * opacity;\r\n    float sqrtDepth = sqrt(backToFrontDepth) * opacity;\r\n    float absorbFactor = sqrtDepth / (1.0 + sqrtDepth);\r\n    vec3 refractCol = mix(backColor, absorbColor, absorbFactor);\r\n\r\n    // backColor = texture2D( tBackground, vec2( (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x, (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y ) * 1.0 ).xyz;\r\n\r\n    // gl_FragColor = vec4(refCol, 1.0);\r\n    float reflectionCoeff = pow(sinTheta1, 4.0);\r\n    // reflectionCoeff = 1.0;\r\n\r\n    // vec4 image = vec4(vec3(texture2D( tDisplayImage, vec2( (gl_FragCoord.x + vImageUVCenter.x) / resolution.x, (gl_FragCoord.y + vImageUVCenter.y) / resolution.y ) )), 1.0);\r\n    // vec4 image = vec4((gl_FragCoord.x + vImageUVCenter.x) / resolution.x, (gl_FragCoord.y + vImageUVCenter.y) / resolution.y, 1.0, 1.0);\r\n    // vec4 image = vec4(1.0, 0.0, 0.0, 1.0);\r\n\r\n    // gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    // gl_FragColor = image;\r\n    // if (gl_FragCoord.x < 600.0) {\r\n    //     gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    // }\r\n    // gl_FragColor = vec4(backColor, 1.0);\r\n    // gl_FragColor = vec4(vec3(backDepthlinear * 0.01), 1.0);\r\n}"}}]);
//# sourceMappingURL=chunk-5283e1a6.eaa44950.js.map