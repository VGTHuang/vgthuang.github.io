(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-1b0819a6"],{"08fd":function(e,t,r){var n={"./GlassFrontShader/F.glsl":"f430"};function o(e){var t=a(e);return r(t)}function a(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=a,e.exports=o,o.id="08fd"},1148:function(e,t,r){"use strict";var n=r("da84"),o=r("5926"),a=r("577e"),i=r("1d80"),s=n.RangeError;e.exports=function(e){var t=a(i(this)),r="",n=o(e);if(n<0||n==1/0)throw s("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r}},"38cf":function(e,t,r){var n=r("23e7"),o=r("1148");n({target:"String",proto:!0},{repeat:o})},5303:function(e,t,r){var n={"./GlassFrontShader/V.glsl":"c444"};function o(e){var t=a(e);return r(t)}function a(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}o.keys=function(){return Object.keys(n)},o.resolve=a,e.exports=o,o.id="5303"},6189:function(e,t,r){},7612:function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var n=r("5a89");const o=new n["X"];function a(e,t,r,n,a,i){const s=2*Math.PI*a/4,c=Math.max(i-2*a,0),l=Math.PI/4;o.copy(t),o[n]=0,o.normalize();const f=.5*s/(s+c),d=1-o.angleTo(e)/l;if(1===Math.sign(o[r]))return d*f;{const e=c/(s+c);return e+f+f*(1-d)}}class i extends n["b"]{constructor(e=1,t=1,r=1,o=2,i=.1){if(o=2*o+1,i=Math.min(e/2,t/2,r/2,i),super(1,1,1,o,o,o),1===o)return;const s=this.toNonIndexed();this.index=null,this.attributes.position=s.attributes.position,this.attributes.normal=s.attributes.normal,this.attributes.uv=s.attributes.uv;const c=new n["X"],l=new n["X"],f=new n["X"](e,t,r).divideScalar(2).subScalar(i),d=this.attributes.position.array,h=this.attributes.normal.array,v=this.attributes.uv.array,u=d.length/6,b=new n["X"],p=.5/o;for(let n=0,g=0;n<d.length;n+=3,g+=2){c.fromArray(d,n),l.copy(c),l.x-=Math.sign(l.x)*p,l.y-=Math.sign(l.y)*p,l.z-=Math.sign(l.z)*p,l.normalize(),d[n+0]=f.x*Math.sign(c.x)+l.x*i,d[n+1]=f.y*Math.sign(c.y)+l.y*i,d[n+2]=f.z*Math.sign(c.z)+l.z*i,h[n+0]=l.x,h[n+1]=l.y,h[n+2]=l.z;const o=Math.floor(n/u);switch(o){case 0:b.set(1,0,0),v[g+0]=a(b,l,"z","y",i,r),v[g+1]=1-a(b,l,"y","z",i,t);break;case 1:b.set(-1,0,0),v[g+0]=1-a(b,l,"z","y",i,r),v[g+1]=1-a(b,l,"y","z",i,t);break;case 2:b.set(0,1,0),v[g+0]=1-a(b,l,"x","z",i,e),v[g+1]=a(b,l,"z","x",i,r);break;case 3:b.set(0,-1,0),v[g+0]=1-a(b,l,"x","z",i,e),v[g+1]=1-a(b,l,"z","x",i,r);break;case 4:b.set(0,0,1),v[g+0]=1-a(b,l,"x","y",i,e),v[g+1]=1-a(b,l,"y","x",i,t);break;case 5:b.set(0,0,-1),v[g+0]=a(b,l,"x","y",i,e),v[g+1]=1-a(b,l,"y","x",i,t);break}}}}},"7d52":function(e,t,r){"use strict";r.d(t,"a",(function(){return y})),r.d(t,"b",(function(){return w}));var n=r("3835"),o=r("bee2"),a=r("d4ec"),i=r("ade3"),s=(r("d3b7"),r("159b"),r("38cf"),r("5a89")),c=r("4721"),l=r("7612");function f(e){try{var t=r("5303")("./"+e+"/V.glsl"),n=r("08fd")("./"+e+"/F.glsl");return[t,n]}catch(o){return console.error("failed to fetch shader",o),["",""]}}var d,h,v,u,b,p,g,m=r("61d9"),x=Object(o["a"])((function e(t,r,o,c,l,d,h){if(Object(a["a"])(this,e),Object(i["a"])(this,"mesh",void 0),Object(i["a"])(this,"originalMaterial",void 0),Object(i["a"])(this,"refractionMaterial",void 0),this.mesh=r,this.mesh.material instanceof Array){this.originalMaterial=new Array;for(var v=0;v<this.mesh.material.length;v++)this.originalMaterial.push(this.mesh.material[v].clone())}else this.originalMaterial=this.mesh.material.clone();var u={resolution:{type:"v",value:o},tBackground:{type:"t",value:c},tBackDepth:{type:"t",value:l},tSkybox:{type:"t",value:t.environment},refractionFactor:{type:"t",value:h},absorbColor:{type:"v",value:d}},b=f("GlassFrontShader"),p=Object(n["a"])(b,2),g=p[0],m=p[1];this.refractionMaterial=new s["O"]({vertexShader:g,fragmentShader:m,uniforms:u,side:s["r"]})})),y=function(){function e(t,r,n,o){var c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:512;Object(a["a"])(this,e),Object(i["a"])(this,"container",void 0),Object(i["a"])(this,"backgroundScene",void 0),Object(i["a"])(this,"scene",void 0),Object(i["a"])(this,"renderer",void 0),Object(i["a"])(this,"camera",void 0),Object(i["a"])(this,"frontScene",void 0),Object(i["a"])(this,"backdepthTexture",void 0),Object(i["a"])(this,"backRenderTarget",void 0),Object(i["a"])(this,"refractionObjectList",void 0),Object(i["a"])(this,"suResolution",void 0),this.container=r,this.backgroundScene=t,this.scene=new s["N"],this.renderer=n,this.camera=o,this.frontScene=new s["N"],this.backdepthTexture=new s["j"](c,c,s["q"]),this.backRenderTarget=new s["Z"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio),this.backRenderTarget.depthBuffer=!0,this.backRenderTarget.depthTexture=this.backdepthTexture,this.backRenderTarget.depthTexture.type=s["V"],this.frontScene.background=this.backRenderTarget.texture,this.refractionObjectList=[],this.suResolution=new s["W"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio)}return Object(o["a"])(e,[{key:"addRefractionMesh",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:new s["f"](0),n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:1.49;t&&(e.material=new s["B"]({color:new s["f"](0),transparent:!0,opacity:.3,metalness:.8,roughness:0,clearcoat:.2,side:s["a"]})),this.refractionObjectList.push(new x(this.backgroundScene,e,this.suResolution,this.backRenderTarget.texture,this.backRenderTarget.depthTexture,r,n)),this.scene.add(e)}},{key:"onWindowResize",value:function(){this.suResolution.x=this.container.offsetWidth*window.devicePixelRatio,this.suResolution.y=this.container.offsetHeight*window.devicePixelRatio}},{key:"render",value:function(){var e=this;this.refractionObjectList.forEach((function(t){t.mesh.material=t.originalMaterial,e.scene.add(t.mesh)})),this.renderer.setRenderTarget(this.backRenderTarget),this.renderer.render(this.scene,this.camera),this.refractionObjectList.forEach((function(t){t.mesh.material=t.refractionMaterial,e.frontScene.add(t.mesh)})),this.renderer.setRenderTarget(null),this.renderer.render(this.frontScene,this.camera)}}]),e}();function w(e){d=e,v=new s["E"](45,window.innerWidth/window.innerHeight,1,5e3),v.position.set(30,20,200),v.lookAt(0,0,0),p=new s["N"],h=new s["ab"]({antialias:!0,alpha:!0}),h.setClearColor(16777215),h.setPixelRatio(window.devicePixelRatio),h.setSize(window.innerWidth,window.innerHeight),d.appendChild(h.domElement),u=new c["a"](v,d),d.style.position="absolute",d.style.top="0px",d.style.left="0px",b=new m["Stats"],b.domElement.style.zIndex="100",d.appendChild(b.domElement);var t="./cube/",r=[t+"px.jpg",t+"nx.jpg",t+"py.jpg",t+"ny.jpg",t+"pz.jpg",t+"nz.jpg"],n=(new s["h"]).load(r);n.mapping=s["g"],p.background=n,p.environment=n;var o=new s["k"];o.position.x=300,o.position.y=200,o.position.z=100,p.add(o);var a=(new s["S"]).load("./checkerboard.jpg");a.wrapS=a.wrapT=s["L"],a.repeat.set(10,10);var i=new s["z"]({map:a,side:s["l"]}),f=new s["G"](1e3,1e3,1,1),x=new s["y"](f,i);x.position.y-=20.1,x.rotation.x=Math.PI/2,g=new y(p,d,h,v);var w=new s["y"](new l["a"](40,40,40,5,5),new s["A"]({}));w.position.x-=40;var C=new s["y"](new s["P"](20),new s["A"]({})),R=new s["y"](new s["i"](20,20,80,36),new s["A"]({}));R.position.x+=40,R.position.y+=20,g.addRefractionMesh(w,!0,new s["f"](0),1.5),g.addRefractionMesh(C,!0,new s["f"](24576),1.5),g.addRefractionMesh(R,!0,new s["f"](1587),1.5);var j=new s["y"](new s["P"](20),new s["A"]({color:16711680}));j.position.copy(w.position),j.position.z-=50,p.add(j),window.addEventListener("resize",k),P()}function k(){v.aspect=window.innerWidth/window.innerHeight,v.updateProjectionMatrix(),g.onWindowResize(),h.setSize(window.innerWidth,window.innerHeight)}function P(){requestAnimationFrame(P),C(),u.update(),b.update()}function C(){g.render()}},b7b6:function(e,t,r){"use strict";r.r(t);var n=function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("div",[r("div",{ref:"canvas-container",attrs:{id:"canvas-container"}})])},o=[],a=r("2b0e"),i=r("7d52"),s=a["a"].extend({mounted:function(){this.$refs["canvas-container"]instanceof HTMLElement&&i["b"](this.$refs["canvas-container"])}}),c=s,l=(r("b7e4"),r("2877")),f=Object(l["a"])(c,n,o,!1,null,"bb4bef88",null);t["default"]=f.exports},b7e4:function(e,t,r){"use strict";r("6189")},c444:function(e,t){e.exports="varying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\n// varying vec3 vRefract;\r\n// varying vec2 vRefractOffset;\r\n\r\n\r\nvoid main() {\r\n    vWorldPosition = modelMatrix * vec4( position, 1.0 );\r\n    vec4 mvPosition = viewMatrix * vWorldPosition;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    vUv = uv;\r\n\r\n    vNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n    vCameraPosition = cameraPosition;\r\n\r\n    vProjectionMatrix = projectionMatrix * modelViewMatrix;\r\n}\r\n"},f430:function(e,t){e.exports="uniform vec2 resolution;\r\nuniform sampler2D tBackground;\r\nuniform sampler2D tBackDepth;\r\nuniform samplerCube tSkybox;\r\nuniform vec3 absorbColor;\r\nuniform float refractionFactor;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\n\r\nfloat near = 0.1;\r\nfloat far  = 5000.0;\r\n\r\nfloat LinearizeDepth(float depth) \r\n{\r\n    float z = depth * 2.0 - 1.0; // back to NDC \r\n    return (2.0 * near * far) / (far + near - z * (far - near));\t\r\n}\r\n\r\nvoid main() {\r\n\r\n    float backDepth = float(texture2D( tBackDepth, vec2( gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y ) ).x);\r\n    float frontDepth = gl_FragCoord.z;\r\n\r\n    float backDepthlinear = LinearizeDepth(backDepth);\r\n    float frontDepthlinear = LinearizeDepth(frontDepth);\r\n    \r\n    float backToFrontDepth = backDepthlinear - frontDepthlinear;\r\n    // backToFrontDepth *= 0.07;\r\n    \r\n    vec3 vCameraRay = vWorldPosition.xyz / vWorldPosition.w - vCameraPosition;\r\n    vCameraRay = normalize(vCameraRay);\r\n    vec3 vRefract = refract( vCameraRay, vNormal, 1.0 / refractionFactor );\r\n    vec4 vOriginalPos = vWorldPosition + vec4(vCameraRay, 0.0);\r\n    vec4 vRefractedPos = vWorldPosition + vec4(vRefract, 0.0);\r\n    // vRefractedPos = vOriginalPos; //vWorldPosition + vec4(vRefract, 0.0);\r\n    vec4 vOriginalProjectedPos = vProjectionMatrix * vOriginalPos;\r\n    vec4 vRefractedProjectedPos = vProjectionMatrix * vRefractedPos;\r\n    vec2 offset = normalize(vRefractedProjectedPos - vOriginalProjectedPos).xy;\r\n    offset = normalize(offset);\r\n\r\n    // reflect\r\n    vec3 vReflect = reflect( vCameraRay, vNormal );\r\n    vec3 refCol = vec3(textureCube(tSkybox, vReflect));\r\n\r\n    // snell's law\r\n    float cosTheta1 = dot(vCameraRay, vNormal);\r\n    float sinTheta1 = 1.0 - cosTheta1 * cosTheta1;\r\n    float sinTheta2 = sinTheta1 / refractionFactor;\r\n    float theta2 = asin(sinTheta2);\r\n    offset *= sinTheta2;\r\n    offset *= 50.0;\r\n\r\n    float samplePointX_r = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.9) / resolution.x;\r\n    float samplePointY_r = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.9) / resolution.y;\r\n\r\n    float samplePointX_g = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.95) / resolution.x;\r\n    float samplePointY_g = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.95) / resolution.y;\r\n\r\n    float samplePointX_b = (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x;\r\n    float samplePointY_b = (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y;\r\n    \r\n    float backColor_r = texture2D( tBackground, vec2( samplePointX_r, samplePointY_r ) * 1.0 ).x;\r\n    float backColor_g = texture2D( tBackground, vec2( samplePointX_g, samplePointY_g ) * 1.0 ).y;\r\n    float backColor_b = texture2D( tBackground, vec2( samplePointX_b, samplePointY_b ) * 1.0 ).z;\r\n\r\n    vec3 backColor = vec3(backColor_r, backColor_g, backColor_b);\r\n    vec3 absorbColor = absorbColor * backToFrontDepth * 0.2;\r\n\r\n    // backColor = texture2D( tBackground, vec2( (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x, (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y ) * 1.0 ).xyz;\r\n\r\n    // gl_FragColor = vec4(refCol, 1.0);\r\n    float reflectionCoeff = 0.5 * pow(sinTheta1, 4.0);\r\n    // reflectionCoeff = 1.0;\r\n    gl_FragColor = vec4((1.0 - reflectionCoeff) * (backColor + absorbColor) + reflectionCoeff * refCol, 1.0);\r\n    // gl_FragColor = vec4(vec3(backDepthlinear*0.01), 1.0);\r\n}"}}]);
//# sourceMappingURL=chunk-1b0819a6.eea83b92.js.map