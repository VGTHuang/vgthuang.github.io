{"version":3,"sources":["webpack:///./src/views/ThreeFrontpageTest.vue?6137","webpack:///./src/scripts/ThreeRealisticRefraction sync ^\\.\\/.*\\/F\\.glsl$","webpack:///./node_modules/core-js/internals/string-repeat.js","webpack:///./node_modules/core-js/modules/es.string.repeat.js","webpack:///./src/views/ThreeFrontpageTest.vue?84ac","webpack:///./src/scripts/Three/FrontPage.ts","webpack:///./src/views/ThreeFrontpageTest.vue","webpack:///./src/views/ThreeFrontpageTest.vue?e700","webpack:///./src/views/ThreeFrontpageTest.vue?5b81","webpack:///./src/scripts/ThreeRealisticRefraction sync ^\\.\\/.*\\/V\\.glsl$","webpack:///./node_modules/three/examples/jsm/geometries/RoundedBoxGeometry.js","webpack:///./src/scripts/ThreeRealisticRefraction/ShaderLoader.ts","webpack:///./src/scripts/ThreeRealisticRefraction/ThreeRealisticRefraction.ts","webpack:///./src/scripts/ThreeRealisticRefraction/GlassFrontShader/V.glsl","webpack:///./src/scripts/ThreeRealisticRefraction/GlassFrontShader/F.glsl"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","global","toIntegerOrInfinity","toString","requireObjectCoercible","RangeError","count","str","this","result","n","Infinity","$","repeat","target","proto","render","_vm","_h","$createElement","_c","_self","ref","attrs","staticRenderFns","_container","cameraZPosition","requestAnimationFrame","animate","updatecornerObject","updateCamera","updateCursorLight","stats","update","container","camera","window","innerWidth","innerHeight","cameraTargetPosition","position","copy","lookAt","renderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","style","top","left","appendChild","zIndex","scene","cardInsideScene","r","urls","textureCube","load","mapping","environment","light","x","y","z","add","refractionManager","glassMesh1","RoundedBoxGeometry","rotation","set","addRefractionMesh","glassMesh1Controller","renderPass1","RenderPass","clear","renderPass2","clearDepth","composer","EffectComposer","offsetWidth","offsetHeight","addPass","renderTarget1","stencilBuffer","renderTarget2","background","texture","tardisCard1","TardisCard","contentInTardisCard1","color","diffuseTexture","normalTexture","specTexture","texs","forEach","t","wrapS","wrapT","tardisCardBackground","normalMap","normalScale","specularColorMap","specularIntensity","reflectivity","metalness","roughness","clearcoat","contentGroupInTardisCard1","cardMesh","addVisibleObjectGroup","tardisCard2","CIRCLE","contentInTardisCard2","diffuseTexture2","normalTexture2","specTexture2","contentGroupInTardisCard2","tardisCard3","contentInTardisCard3","diffuseTexture3","normalTexture3","contentGroupInTardisCard3","cursorLightGroup","cursorLight","intensity","decay","distance","cursorLightController","raycaster","intersectTardisCardObjs","push","intersectGlassObjs","glassSelected","glassIsRotating","mousePosX","mousePosY","pointer","self","addEventListener","aspect","updateProjectionMatrix","onWindowResize","onClick","cameraPositionController","onMouseMove","console","log","clientX","clientY","setFromCamera","intersects","intersectObjects","length","object","rotateObj","TweenUtils","v","intersectObj","posX","posY","ray","unproject","targetPos","getRaycastPos","relX","relY","newPos1","newPos2","ratio","newPos","vel","velocity","isNaN","camPosZ","targetPosVec","sub","newz","multiplyScalar","extend","data","fpm","mounted","$refs","HTMLElement","component","_tempNormal","getUv","faceDirVector","normal","uvAxis","projectionAxis","radius","sideLength","totArcLength","Math","PI","centerLength","max","halfArc","normalize","arcUvRatio","arcAngleRatio","angleTo","sign","lenUv","width","height","depth","segments","min","super","geometry2","toNonIndexed","index","attributes","uv","box","divideScalar","subScalar","positions","array","normals","uvs","faceTris","halfSegmentSize","i","j","fromArray","side","floor","loadShader","shaderName","vertexShader","fragShader","err","error","controls","rm","mesh","suResolution","suBackground","suDepth","absorbColor","suRefractionFactor","material","Array","originalMaterial","clone","refractionMaterialUniforms","type","value","glassFrontVS","glassFrontFS","refractionMaterial","fragmentShader","uniforms","backgroundScene","backDepthTextureSize","frontScene","backdepthTexture","backRenderTarget","depthBuffer","depthTexture","refractionObjectList","setDefaultBacksideMaterial","refractionFactor","transparent","opacity","refObj","setRenderTarget","initScene","antialias","OrbitControls","floorTexture","floorMaterial","floorGeometry","glassMesh2","glassMesh3","ballMesh"],"mappings":"kHAAA,W,uBCAA,IAAIA,EAAM,CACT,4BAA6B,QAI9B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,Q,kCCrBpB,IAAIY,EAAS,EAAQ,QACjBC,EAAsB,EAAQ,QAC9BC,EAAW,EAAQ,QACnBC,EAAyB,EAAQ,QAEjCC,EAAaJ,EAAOI,WAIxBN,EAAOC,QAAU,SAAgBM,GAC/B,IAAIC,EAAMJ,EAASC,EAAuBI,OACtCC,EAAS,GACTC,EAAIR,EAAoBI,GAC5B,GAAII,EAAI,GAAKA,GAAKC,IAAU,MAAMN,EAAW,+BAC7C,KAAMK,EAAI,GAAIA,KAAO,KAAOH,GAAOA,GAAc,EAAJG,IAAOD,GAAUF,GAC9D,OAAOE,I,gDChBT,IAAIG,EAAI,EAAQ,QACZC,EAAS,EAAQ,QAIrBD,EAAE,CAAEE,OAAQ,SAAUC,OAAO,GAAQ,CACnCF,OAAQA,K,2CCNV,IAAIG,EAAS,WAAa,IAAIC,EAAIT,KAASU,EAAGD,EAAIE,eAAmBC,EAAGH,EAAII,MAAMD,IAAIF,EAAG,OAAOE,EAAG,MAAM,CAACA,EAAG,MAAM,CAACE,IAAI,mBAAmBC,MAAM,CAAC,GAAK,yBACnJC,EAAkB,G,sMCqBhB,E,WA+CF,WAAYC,GAAsD,WAA7BC,EAA6B,uDAAH,IAAG,8iCA6OxD,WACNC,sBAAuB,EAAKC,SAE5B,EAAKC,qBACL,EAAKC,eACL,EAAKC,oBACL,EAAKf,SACL,EAAKgB,MAAMC,YAjPXzB,KAAKkB,gBAAkBA,EACvBlB,KAAK0B,UAAYT,EACjBjB,KAAK2B,OAAS,IAAI,OAAyB,GAAIC,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KAE1F9B,KAAK+B,qBAAuB,IAAI,OAAc,EAAG,EAAG/B,KAAKkB,iBACzDlB,KAAK2B,OAAOK,SAASC,KAAKjC,KAAK+B,sBAC/B/B,KAAK2B,OAAOO,OAAO,EAAG,EAAG,GACzBlC,KAAKmC,SAAW,IAAI,QAAqB,CAACC,OAAO,IACjDpC,KAAKmC,SAASE,cAAe,UAC7BrC,KAAKmC,SAASG,cAAeV,OAAOW,kBACpCvC,KAAKmC,SAASK,QAAQZ,OAAOC,WAAYD,OAAOE,aAChD9B,KAAKmC,SAASM,WAAWC,MAAMV,SAAW,WAC1ChC,KAAKmC,SAASM,WAAWC,MAAMC,IAAM,MACrC3C,KAAKmC,SAASM,WAAWC,MAAME,KAAO,MACtC5C,KAAK0B,UAAUmB,YAAa7C,KAAKmC,SAASM,YAG1CzC,KAAKwB,MAAQ,IAAI,WACjBxB,KAAKwB,MAAMiB,WAAWC,MAAMI,OAAS,MACrC9C,KAAK0B,UAAUmB,YAAa7C,KAAKwB,MAAMiB,YAEvCzC,KAAK+C,MAAQ,IAAI,OACjB/C,KAAKgD,gBAAkB,IAAI,OAI3B,IAAMC,EAAI,WACJC,EAAO,CACTD,EAAI,SAAUA,EAAI,SAClBA,EAAI,SAAUA,EAAI,SAClBA,EAAI,SAAUA,EAAI,UAEhBE,GAAc,IAAI,QAA0BC,KAAMF,GACxDC,EAAYE,QAAU,OAEtBrD,KAAK+C,MAAMO,YAAcH,EAIzB,IAAII,EAAQ,IAAI,OAChBA,EAAMvB,SAASwB,EAAI,IACnBD,EAAMvB,SAASyB,EAAI,IACnBF,EAAMvB,SAAS0B,EAAI,IACnB1D,KAAK+C,MAAMY,IAAIJ,GAGfvD,KAAK4D,kBAAoB,IAAI,OAAkB5D,KAAK+C,MAAO/C,KAAK0B,UAAW1B,KAAKmC,SAAUnC,KAAK2B,QAC/F,IAAIkC,EAAa,IAAI,OACjB,IAAIC,EAAA,KAAmB,GAAI,GAAI,GAAI,EAAG,GACtC,IAAI,OAAwB,KAEhCD,EAAWE,SAASC,IAAI,EAAE,EAAE,GAC5BhE,KAAK4D,kBAAkBK,kBAAkBJ,GAAY,EAAM,IAAI,OAAY,GAAW,KACtF7D,KAAKkE,qBAAuB,IAAI,OAAwBL,EAAY,GAAK,IAIzE,IAAMM,EAAc,IAAIC,EAAA,KAAWpE,KAAK+C,MAAO/C,KAAK2B,QACpDwC,EAAYE,OAAQ,EACpB,IAAMC,EAAc,IAAIF,EAAA,KAAWpE,KAAKgD,gBAAiBhD,KAAK2B,QAC9D2C,EAAYC,YAAa,EACzBD,EAAYD,OAAQ,EACpBrE,KAAKwE,SAAW,IAAIC,EAAA,KAAezE,KAAKmC,SAAU,IAAI,OAClDnC,KAAK0B,UAAUgD,YAAc9C,OAAOW,iBACpCvC,KAAK0B,UAAUiD,aAAe/C,OAAOW,mBAGzCvC,KAAKwE,SAASI,QAAQT,GACtBnE,KAAKwE,SAASI,QAAQN,GACtBtE,KAAKwE,SAASK,cAAcC,eAAgB,EAC5C9E,KAAKwE,SAASO,cAAcD,eAAgB,EAC5C9E,KAAK4D,kBAAkBb,MAAMiC,WAAahF,KAAKwE,SAASO,cAAcE,QAGtE,IAAIC,EAAc,IAAIC,EAAA,KAAW,IAAK,IAAK,IAAKnF,KAAK+C,MAAO/C,KAAKgD,gBAAiB,IAAI,OAAc,EAAG,EAAG,GAAI,IAAI,QAC9GoC,EAAuB,IAAI,OAC3B,IAAI,OAA0B,GAAI,GAAI,GAAI,IAC1C,IAAI,OAA2B,CAAEC,MAAO,IAAI,OAAY,aAGxDC,GAAiB,IAAI,QAAsBlC,KAAM,uBACjDmC,GAAgB,IAAI,QAAsBnC,KAAM,sBAChDoC,GAAc,IAAI,QAAsBpC,KAAM,wBAC9CqC,EAAO,CAACH,EAAgBC,EAAeC,GAC3CC,EAAKC,SAAQ,SAAAC,GACTA,EAAEC,MAAQD,EAAEE,MAAQ,OACpBF,EAAEtF,OAAO2D,IAAI,EAAG,MAEpB,IAAI8B,EAAuB,IAAI,OAC3B,IAAI,OAA0B,IAAK,IAAK,EAAG,GAC3C,IAAI,OAA2B,CAC3BpH,IAAK4G,EACLS,UAAWR,EACXS,YAAa,IAAI,OAAc,GAAK,IACpCC,iBAAkBT,EAClBU,kBAAmB,GACnBC,aAAc,EACdC,UAAW,GACXC,UAAW,GACXC,UAAW,GACXjB,MAAO,YAIfS,EAAqB9D,SAASgC,IAAI,EAAG,GAAI,KACzC,IAAIuC,EAA4B,IAAI,OACpCA,EAA0B5C,IAAIyB,GAC9BmB,EAA0B5C,IAAImC,GAC9BS,EAA0BvE,SAASC,KAAKiD,EAAYsB,SAASxE,UAC7DkD,EAAYuB,sBAAsBF,GAGlC,IAAIG,EAAc,IAAIvB,EAAA,KAAW,IAAK,IAAK,IAAKnF,KAAK+C,MAAO/C,KAAKgD,gBAAiB,IAAI,OAAc,IAAK,EAAG,GAAI,IAAI,OAAemC,EAAA,KAAgBwB,QAC/IC,EAAuB,IAAI,OAC3B,IAAI,OAA0B,GAAI,GAAI,GAAI,IAC1C,IAAI,OAA2B,CAAEvB,MAAO,IAAI,OAAY,aAExDwB,GAAkB,IAAI,QAAsBzD,KAAM,wBAClD0D,GAAiB,IAAI,QAAsB1D,KAAM,uBACjD2D,GAAe,IAAI,QAAsB3D,KAAM,yBACnDqC,EAAO,CAACoB,EAAiBC,EAAgBC,GACzCtB,EAAKC,SAAQ,SAAAC,GACTA,EAAEC,MAAQD,EAAEE,MAAQ,OACpBF,EAAEtF,OAAO2D,IAAI,EAAG,MAEpB8B,EAAuB,IAAI,OACvB,IAAI,OAA0B,IAAK,IAAK,EAAG,GAC3C,IAAI,OAA2B,CAC3BpH,IAAKmI,EACLd,UAAWe,EACXd,YAAa,IAAI,OAAc,GAAK,IACpCC,iBAAkBc,EAClBb,kBAAmB,EACnBC,aAAc,EACdC,UAAW,GACXC,UAAW,GACXC,UAAW,MAInBR,EAAqB9D,SAASgC,IAAI,EAAG,GAAI,KAEzC,IAAIgD,EAA4B,IAAI,OACpCA,EAA0BrD,IAAIiD,GAC9BI,EAA0BrD,IAAImC,GAC9BkB,EAA0BhF,SAASC,KAAKyE,EAAYF,SAASxE,UAC7D0E,EAAYD,sBAAsBO,GAGlC,IAAIC,EAAc,IAAI9B,EAAA,KAAW,IAAK,IAAK,IAAKnF,KAAK+C,MAAO/C,KAAKgD,gBAAiB,IAAI,QAAe,IAAK,EAAG,GAAI,IAAI,OAAemC,EAAA,KAAgBwB,QAChJO,EAAuB,IAAI,OAC3B,IAAI,OAA0B,GAAI,GAAI,GAAI,IAC1C,IAAI,OAA2B,CAAE7B,MAAO,IAAI,OAAY,aAExD8B,GAAkB,IAAI,QAAsB/D,KAAM,2BAClDgE,GAAiB,IAAI,QAAsBhE,KAAM,0BACrDqC,EAAO,CAAC0B,EAAiBC,GACzB3B,EAAKC,SAAQ,SAAAC,GACTA,EAAEC,MAAQD,EAAEE,MAAQ,OACpBF,EAAEtF,OAAO2D,IAAI,EAAG,MAEpB8B,EAAuB,IAAI,OACvB,IAAI,OAA0B,IAAK,IAAK,EAAG,GAC3C,IAAI,OAA2B,CAC3BpH,IAAKyI,EACLpB,UAAWqB,EACXpB,YAAa,IAAI,OAAc,EAAG,GAClCE,kBAAmB,EACnBC,aAAc,GACdC,UAAW,GACXC,UAAW,MAKnBP,EAAqB9D,SAASgC,IAAI,EAAG,GAAI,KAEzC,IAAIqD,EAA4B,IAAI,OACpCA,EAA0B1D,IAAIuD,GAC9BG,EAA0B1D,IAAImC,GAC9BuB,EAA0BrF,SAASC,KAAKgF,EAAYT,SAASxE,UAC7DiF,EAAYR,sBAAsBY,GAIlCrH,KAAKsH,iBAAmB,IAAI,OAC5BtH,KAAKuH,YAAc,IAAI,OACvBvH,KAAKuH,YAAYC,UAAY,EAC7BxH,KAAKuH,YAAYE,MAAQ,EACzBzH,KAAKuH,YAAYG,SAAW,IAC5B1H,KAAKuH,YAAYlC,MAAQ,IAAI,OAAa,UAC1CrF,KAAKsH,iBAAiB3D,IAAI3D,KAAKuH,aAC/BvH,KAAK+C,MAAMY,IAAI3D,KAAKsH,kBACpBtH,KAAK2H,sBAAwB,IAAI,OAAwB3H,KAAKsH,iBAAkB,GAAK,IAIrFtH,KAAK4H,UAAY,IAAI,OACrB5H,KAAK6H,wBAA0B,GAC/B7H,KAAK6H,wBAAwBC,KAAK5C,EAAYsB,SAAUE,EAAYF,SAAUS,EAAYT,UAC1FxG,KAAK+H,mBAAqB,GAC1B/H,KAAKgI,cAAgB,KACrBhI,KAAKiI,iBAAkB,EACvBjI,KAAK+H,mBAAmBD,KAAKjE,GAK7B7D,KAAKkI,UAAY,EACjBlI,KAAKmI,UAAY,EACjBnI,KAAKoI,QAAU,IAAI,OACnB,IAAMC,EAAOrI,KACb4B,OAAO0G,iBAAkB,UAAU,WAC/BD,EAAK1G,OAAO4G,OAAS3G,OAAOC,WAAaD,OAAOE,YAChDuG,EAAK1G,OAAO6G,yBACZH,EAAKzE,kBAAkB6E,iBACvBJ,EAAKlG,SAASK,QAASZ,OAAOC,WAAYD,OAAOE,aACjDuG,EAAK7D,SAAShC,QAASZ,OAAOC,WAAYD,OAAOE,gBAIrDF,OAAO0G,iBAAkB,SAAS,SAACrJ,GAC/BoJ,EAAKK,QAAQzJ,MAIjBe,KAAK2I,yBAA2B,IAAI,OAAyB3I,KAAK2B,OAAOK,SAAU,GAAK,KACxFJ,OAAO0G,iBAAiB,aAAa,SAAArJ,GACjCoJ,EAAKO,YAAY3J,MAErB4J,QAAQC,IAAI9I,KAAK+B,sBACjB/B,KAAKoB,U,6CAaT,WAEIpB,KAAKwE,SAAShE,SACdR,KAAKmC,SAASoC,aACdvE,KAAK4D,kBAAkBpD,W,yBAG3B,SAAYvB,GAAa,WACrBe,KAAKkI,UAAYjJ,EAAE8J,QACnB/I,KAAKmI,UAAYlJ,EAAE+J,QACnBhJ,KAAKoI,QAAQ5E,EAAMvE,EAAE8J,QAAUnH,OAAOC,WAAe,EAAI,EAC/D7B,KAAKoI,QAAQ3E,GAAQxE,EAAE+J,QAAUpH,OAAOE,YAAgB,EAAI,EAEtD9B,KAAK4H,UAAUqB,cAAejJ,KAAKoI,QAASpI,KAAK2B,QACjD,IAAMuH,EAAalJ,KAAK4H,UAAUuB,iBAAkBnJ,KAAK+H,oBAAoB,GAC7E,GAAyB,GAArBmB,EAAWE,QAAgBpJ,KAAKiI,iBAAmBjI,KAAKgI,gBAAkBkB,EAAW,GAAGG,QAYvF,GAAyB,GAArBH,EAAWE,SAAgBpJ,KAAKiI,iBAA0C,OAAvBjI,KAAKgI,cAAwB,CACrFa,QAAQC,IAAI,MAAO9I,KAAKgI,eACxBhI,KAAKiI,iBAAkB,EACvB,IAAIqB,EAAYtJ,KAAKgI,cACrBuB,EAAA,KAAsBvJ,KAAKgI,cAAcjE,SAAU,IAAI,OAAY,EAAE,EAAE,IAAI,SAACyF,GACxEF,EAAUvF,SAAS9B,KAAKuH,MAExB,WAAO,EAAKvB,iBAAkB,IAC9B,KAEJjI,KAAKgI,cAAgB,WArBrBa,QAAQC,IAAI,MACZ9I,KAAKiI,iBAAkB,EACvBjI,KAAKgI,cAAgBkB,EAAW,GAAGG,OACnCE,EAAA,KAAsBvJ,KAAKgI,cAAcjE,SAAU,IAAI,OAAY,EAAE,EAAE,IAAI,SAACyF,GAAK,MACzE,YAAKxB,qBAAL,SAAoBjE,SAAS9B,KAAKuH,MAEtC,WAAO,EAAKvB,iBAAkB,IAC9B,KAEJjI,KAAKgI,cAAcjE,SAASC,IAAI,EAAE,EAAE,K,qBAiB5C,SAAQ/E,GAEJ,IAAMiK,EAAalJ,KAAK4H,UAAUuB,iBAAkBnJ,KAAK6H,yBAAyB,GAGlF,GAAyB,GAArBqB,EAAWE,OAAa,CACxB,IAAMK,EAAeP,EAAW,GAChClJ,KAAK+B,qBAAqByB,EAAKiG,EAAaJ,OAAOrH,SAASwB,K,2BAIpE,SAAckG,EAAcC,GACxB,IAAInG,EAAK,EAAMkG,EAAQ9H,OAAOC,WAAa,EACvC4B,EAAI,EAAO,EAAMkG,EAAQ/H,OAAOE,YAGhC8H,EAAM,IAAI,OAAcpG,EAAGC,EAAG,MAElC,OADAmG,EAAIC,UAAU7J,KAAK2B,QACZiI,I,gCAGX,WACI,IAAIE,EAAY9J,KAAK+J,cAAcnI,OAAOC,WAAa,EAAGD,OAAOE,YAAc,GAE/E9B,KAAKkE,qBAAqBzC,OAAOqI,K,0BAOrC,WACI,IAAME,EAAOpI,OAAOC,WAAa,EAAI7B,KAAKkI,UACpC+B,EAAOrI,OAAOE,YAAc,EAAI9B,KAAKmI,UAErC+B,EAAUlK,KAAK2B,OAAOK,SACtBmI,EAAW,IAAI,QAAeH,EAAK,GAAIC,EAAK,GAAI,GAAItG,IAAI3D,KAAK+B,sBAE7DqI,EAAQ,GACRC,EAAS,IAAI,OAAcH,EAAQ1G,EAAI4G,EAAQD,EAAQ3G,GAAK,EAAE4G,GAAQF,EAAQzG,EAAI2G,EAAQD,EAAQ1G,GAAK,EAAE2G,GAAQF,EAAQxG,EAAI0G,EAAQD,EAAQzG,GAAK,EAAE0G,IAG1JpK,KAAK2I,yBAAyBlH,OAAO4I,GACrC,IAAIC,EAAMtK,KAAK2I,yBAAyB4B,SACxCvK,KAAK2B,OAAOoC,SAASP,EAAI8G,EAAI7G,EAAI,GACjCzD,KAAK2B,OAAOoC,SAASN,GAAK6G,EAAI9G,EAAI,K,+BAGtC,WACI,IAAKgH,MAAMxK,KAAKkI,aAAesC,MAAMxK,KAAKmI,WAAY,CAClD,IAAI2B,EAAY9J,KAAK+J,cAAc/J,KAAKkI,UAAWlI,KAAKmI,WACpDsC,EAAUzK,KAAK2B,OAAOK,SAAS0B,EAC/BgH,GAAe,IAAI,QAAgBzI,KAAK6H,GAC5CY,EAAeA,EAAaC,IAAI3K,KAAK2B,OAAOK,UAC5C,IAAI4I,GAAQ,GACRpH,GAAKoH,EAAOH,GAAWC,EAAahH,EACxCoG,EAAU7H,KAAKjC,KAAK2B,OAAOK,UAC3B0I,EAAaG,eAAerH,GAC5BsG,EAAUnG,IAAI+G,GACd1K,KAAK2H,sBAAsBlG,OAAOqI,Q,KClZ/B,SAAIgB,OAAO,CACtBC,KADsB,WAElB,MAAO,CACHC,IAAK,OAGbC,QANsB,WAOdjL,KAAKkL,MAAM,8BAA+BC,cAC1CnL,KAAKgL,IAAM,IAAI,EAAiBhL,KAAKkL,MAAM,yBCvBsV,I,wBCQzYE,EAAY,eACd,EACA5K,EACAQ,GACA,EACA,KACA,WACA,MAIa,aAAAoK,E,8BCnBf,IAAI1M,EAAM,CACT,4BAA6B,QAI9B,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,Q,kCCtBpB,kDAKA,MAAMwM,EAAc,IAAI,OAExB,SAASC,EAAOC,EAAeC,EAAQC,EAAQC,EAAgBC,EAAQC,GAEtE,MAAMC,EAAe,EAAIC,KAAKC,GAAKJ,EAAS,EAGtCK,EAAeF,KAAKG,IAAKL,EAAa,EAAID,EAAQ,GAClDO,EAAUJ,KAAKC,GAAK,EAG1BV,EAAYpJ,KAAMuJ,GAClBH,EAAaK,GAAmB,EAChCL,EAAYc,YAGZ,MAAMC,EAAa,GAAMP,GAAiBA,EAAeG,GAGnDK,EAAgB,EAAQhB,EAAYiB,QAASf,GAAkBW,EAErE,GAA4C,IAAvCJ,KAAKS,KAAMlB,EAAaI,IAE5B,OAAOY,EAAgBD,EAEjB,CAGN,MAAMI,EAAQR,GAAiBH,EAAeG,GAC9C,OAAOQ,EAAQJ,EAAaA,GAAe,EAAMC,IAMnD,MAAMvI,UAA2B,OAEhC,YAAa2I,EAAQ,EAAGC,EAAS,EAAGC,EAAQ,EAAGC,EAAW,EAAGjB,EAAS,IAWrE,GARAiB,EAAsB,EAAXA,EAAe,EAG1BjB,EAASG,KAAKe,IAAKJ,EAAQ,EAAGC,EAAS,EAAGC,EAAQ,EAAGhB,GAErDmB,MAAO,EAAG,EAAG,EAAGF,EAAUA,EAAUA,GAGlB,IAAbA,EAAiB,OAEtB,MAAMG,EAAY/M,KAAKgN,eAEvBhN,KAAKiN,MAAQ,KACbjN,KAAKkN,WAAWlL,SAAW+K,EAAUG,WAAWlL,SAChDhC,KAAKkN,WAAW1B,OAASuB,EAAUG,WAAW1B,OAC9CxL,KAAKkN,WAAWC,GAAKJ,EAAUG,WAAWC,GAI1C,MAAMnL,EAAW,IAAI,OACfwJ,EAAS,IAAI,OAEb4B,EAAM,IAAI,OAASX,EAAOC,EAAQC,GAAQU,aAAc,GAAIC,UAAW3B,GAEvE4B,EAAYvN,KAAKkN,WAAWlL,SAASwL,MACrCC,EAAUzN,KAAKkN,WAAW1B,OAAOgC,MACjCE,EAAM1N,KAAKkN,WAAWC,GAAGK,MAEzBG,EAAWJ,EAAUnE,OAAS,EAC9BmC,EAAgB,IAAI,OACpBqC,EAAkB,GAAMhB,EAE9B,IAAM,IAAIiB,EAAI,EAAGC,EAAI,EAAGD,EAAIN,EAAUnE,OAAQyE,GAAK,EAAGC,GAAK,EAAI,CAE9D9L,EAAS+L,UAAWR,EAAWM,GAC/BrC,EAAOvJ,KAAMD,GACbwJ,EAAOhI,GAAKsI,KAAKS,KAAMf,EAAOhI,GAAMoK,EACpCpC,EAAO/H,GAAKqI,KAAKS,KAAMf,EAAO/H,GAAMmK,EACpCpC,EAAO9H,GAAKoI,KAAKS,KAAMf,EAAO9H,GAAMkK,EACpCpC,EAAOW,YAEPoB,EAAWM,EAAI,GAAMT,EAAI5J,EAAIsI,KAAKS,KAAMvK,EAASwB,GAAMgI,EAAOhI,EAAImI,EAClE4B,EAAWM,EAAI,GAAMT,EAAI3J,EAAIqI,KAAKS,KAAMvK,EAASyB,GAAM+H,EAAO/H,EAAIkI,EAClE4B,EAAWM,EAAI,GAAMT,EAAI1J,EAAIoI,KAAKS,KAAMvK,EAAS0B,GAAM8H,EAAO9H,EAAIiI,EAElE8B,EAASI,EAAI,GAAMrC,EAAOhI,EAC1BiK,EAASI,EAAI,GAAMrC,EAAO/H,EAC1BgK,EAASI,EAAI,GAAMrC,EAAO9H,EAE1B,MAAMsK,EAAOlC,KAAKmC,MAAOJ,EAAIF,GAE7B,OAASK,GAER,KAAK,EAGJzC,EAAcvH,IAAK,EAAG,EAAG,GACzB0J,EAAKI,EAAI,GAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQgB,GAC/De,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQe,GACrE,MAED,KAAK,EAGJnB,EAAcvH,KAAO,EAAG,EAAG,GAC3B0J,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQgB,GACrEe,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQe,GACrE,MAED,KAAK,EAGJnB,EAAcvH,IAAK,EAAG,EAAG,GACzB0J,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQc,GACrEiB,EAAKI,EAAI,GAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQgB,GAC/D,MAED,KAAK,EAGJpB,EAAcvH,IAAK,GAAK,EAAG,GAC3B0J,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQc,GACrEiB,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQgB,GACrE,MAED,KAAK,EAGJpB,EAAcvH,IAAK,EAAG,EAAG,GACzB0J,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQc,GACrEiB,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQe,GACrE,MAED,KAAK,EAGJnB,EAAcvH,IAAK,EAAG,GAAK,GAC3B0J,EAAKI,EAAI,GAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQc,GAC/DiB,EAAKI,EAAI,GAAM,EAAMxC,EAAOC,EAAeC,EAAQ,IAAK,IAAKG,EAAQe,GACrE,W,gOChJC,SAAUwB,EAAWC,GACvB,IACI,IAAIC,EAAe,UAAQ,KAAOD,EAAa,WAC3CE,EAAa,UAAQ,KAAOF,EAAa,WAC7C,MAAO,CAACC,EAAcC,GAE1B,MAAMC,GAEF,OADAzF,QAAQ0F,MAAM,yBAA0BD,GACjC,CAAC,GAAI,K,ICgJhB,EACA,EAA+B,EAAiCE,EAChEhN,EACA,EACAiN,E,YA/IE,E,gBAOF,WAAY1L,EAAoB2L,EAAkBC,EAA6BC,EAA6BC,EACxGC,EAA0BC,GAG1B,GAHoD,0JACpD/O,KAAK0O,KAAOA,EAER1O,KAAK0O,KAAKM,oBAAoBC,MAAO,CACrCjP,KAAKkP,iBAAmB,IAAID,MAC5B,IAAK,IAAIpB,EAAI,EAAGA,EAAI7N,KAAK0O,KAAKM,SAAS5F,OAAQyE,IAC3C7N,KAAKkP,iBAAiBpH,KAAK9H,KAAK0O,KAAKM,SAASnB,GAAGsB,cAIrDnP,KAAKkP,iBAAmBlP,KAAK0O,KAAKM,SAASG,QAE/C,IAAIC,EAA6B,CAC7B,WAAc,CAAEC,KAAM,IAAKC,MAAOX,GAClC,YAAkB,CAAEU,KAAM,IAAKC,MAAOV,GACtC,WAAc,CAAES,KAAM,IAAKC,MAAOT,GAClC,QAAW,CAAEQ,KAAM,IAAKC,MAAOvM,EAAMO,aACrC,iBAAoB,CAAE+L,KAAM,IAAKC,MAAOP,GACxC,YAAe,CAAEM,KAAM,IAAKC,MAAOR,IAEvC,EAAmCZ,EAAW,oBAA9C,sBAAKqB,EAAL,KAAmBC,EAAnB,KACAxP,KAAKyP,mBAAqB,IAAI,OAAe,CACzCrB,aAAgBmB,EAChBG,eAAgBF,EAChBG,SAAUP,EAKVpB,KAAM,YAKL,EAAb,WAgBI,WACI4B,EAA8BlO,EAAwBS,EAA+BR,GACnD,IAAlCkO,EAAkC,uDAAH,IAAG,kcAElC7P,KAAK0B,UAAYA,EACjB1B,KAAK4P,gBAAkBA,EACvB5P,KAAK+C,MAAQ,IAAI,OACjB/C,KAAKmC,SAAWA,EAChBnC,KAAK2B,OAASA,EAEd3B,KAAK8P,WAAa,IAAI,OACtB9P,KAAK+P,iBAAmB,IAAI,OACxBF,EAAsBA,EACtB,QAEJ7P,KAAKgQ,iBAAmB,IAAI,OACxBhQ,KAAK0B,UAAUgD,YAAc9C,OAAOW,iBACpCvC,KAAK0B,UAAUiD,aAAe/C,OAAOW,kBAGzCvC,KAAKgQ,iBAAiBC,aAAc,EACpCjQ,KAAKgQ,iBAAiBE,aAAelQ,KAAK+P,iBAC1C/P,KAAKgQ,iBAAiBE,aAAab,KAAO,OAC1CrP,KAAK8P,WAAW9K,WAAahF,KAAKgQ,iBAAiB/K,QACnDjF,KAAKmQ,qBAAuB,GAC5BnQ,KAAK2O,aAAe,IAAI,OACpB3O,KAAK0B,UAAUgD,YAAc9C,OAAOW,iBACpCvC,KAAK0B,UAAUiD,aAAe/C,OAAOW,kBA3CjD,wDAgDI,SAAkBmM,GACuE,IADrD0B,IACqD,yDAArFtB,EAAqF,uDAA1D,IAAI,OAAY,GAAWuB,EAA+B,uDAAJ,KAC7ED,IACA1B,EAAKM,SAAW,IAAI,OAA2B,CAE3C3J,MAAO,IAAI,OAAY,GACvBiL,aAAa,EACbC,QAAS,GACTnK,UAAW,GACXC,UAAW,EACXC,UAAW,GACX0H,KAAM,UAIdhO,KAAKmQ,qBAAqBrI,KAAK,IAAI,EAC/B9H,KAAK4P,gBACLlB,EACA1O,KAAK2O,aACL3O,KAAKgQ,iBAAiB/K,QACtBjF,KAAKgQ,iBAAiBE,aACtBpB,EACAuB,IAEJrQ,KAAK+C,MAAMY,IAAI+K,KAxEvB,4BA2EI,WACI1O,KAAK2O,aAAanL,EAAIxD,KAAK0B,UAAUgD,YAAc9C,OAAOW,iBAC1DvC,KAAK2O,aAAalL,EAAIzD,KAAK0B,UAAUiD,aAAe/C,OAAOW,mBA7EnE,oBAgFI,WAAM,WACFvC,KAAKmQ,qBAAqBzK,SAAQ,SAAA8K,GAC9BA,EAAO9B,KAAKM,SAAWwB,EAAOtB,iBAC9B,EAAKnM,MAAMY,IAAI6M,EAAO9B,SAE1B1O,KAAKmC,SAASsO,gBAAgBzQ,KAAKgQ,kBACnChQ,KAAKmC,SAAS3B,OAAOR,KAAK+C,MAAO/C,KAAK2B,QAEtC3B,KAAKmQ,qBAAqBzK,SAAQ,SAAA8K,GAC9BA,EAAO9B,KAAKM,SAAWwB,EAAOf,mBAC9B,EAAKK,WAAWnM,IAAI6M,EAAO9B,SAE/B1O,KAAKmC,SAASsO,gBAAgB,MAC9BzQ,KAAKmC,SAAS3B,OAAOR,KAAK8P,WAAY9P,KAAK2B,YA7FnD,KAuGM,SAAU+O,EAAUzP,GACtB,EAAYA,EACZ,EAAS,IAAI,OAAyB,GAAIW,OAAOC,WAAaD,OAAOE,YAAa,EAAG,KACrF,EAAOE,SAASgC,IAAI,GAAI,GAAI,KAC5B,EAAO9B,OAAO,EAAG,EAAG,GAEpB,EAAQ,IAAI,OAEZ,EAAW,IAAI,QAAqB,CAACyO,WAAW,EAAMvO,OAAO,IAE7D,EAASC,cAAe,UACxB,EAASC,cAAeV,OAAOW,kBAC/B,EAASC,QAAQZ,OAAOC,WAAYD,OAAOE,aAC3C,EAAUe,YAAa,EAASJ,YAChC+L,EAAW,IAAIoC,EAAA,KAAc,EAAQ,GACrC,EAAUlO,MAAMV,SAAW,WAC3B,EAAUU,MAAMC,IAAM,MACtB,EAAUD,MAAME,KAAO,MACvBpB,EAAQ,IAAI,WACZA,EAAMiB,WAAWC,MAAMI,OAAS,MAChC,EAAUD,YAAarB,EAAMiB,YAG7B,IAAMQ,EAAI,UAEJC,EAAO,CACTD,EAAI,SAAUA,EAAI,SAClBA,EAAI,SAAUA,EAAI,SAClBA,EAAI,SAAUA,EAAI,UAGhBE,GAAc,IAAI,QAA0BC,KAAMF,GACxDC,EAAYE,QAAU,OAEtB,EAAM2B,WAAa7B,EACnB,EAAMG,YAAcH,EAGpB,IAAII,EAAQ,IAAI,OAChBA,EAAMvB,SAASwB,EAAI,IACnBD,EAAMvB,SAASyB,EAAI,IACnBF,EAAMvB,SAAS0B,EAAI,IACnB,EAAMC,IAAIJ,GAGV,IAAIsN,GAAe,IAAI,QAAsBzN,KAAM,sBACtDyN,EAAajL,MAAQiL,EAAahL,MAAQ,OAC1CgL,EAAaxQ,OAAO2D,IAAK,GAAI,IAC1B,IAAI8M,EAAgB,IAAI,OAAyB,CAAEpS,IAAKmS,EAAc7C,KAAM,SAC3E+C,EAAgB,IAAI,OAAoB,IAAM,IAAM,EAAG,GACvD9C,EAAQ,IAAI,OAAW8C,EAAeD,GAC1C7C,EAAMjM,SAASyB,GAAK,KACpBwK,EAAMlK,SAASP,EAAIsI,KAAKC,GAAK,EAG1B0C,EAAK,IAAI,EAAkB,EAAO,EAAW,EAAU,GAEvD,IAAI5K,EAAa,IAAI,OACjB,IAAIC,EAAA,KAAmB,GAAI,GAAI,GAAI,EAAG,GACtC,IAAI,OAAwB,KAEhCD,EAAW7B,SAASwB,GAAK,GACzB,IAAIwN,EAAa,IAAI,OACjB,IAAI,OAAsB,IAC1B,IAAI,OAAwB,KAE5BC,EAAa,IAAI,OACjB,IAAI,OAAwB,GAAI,GAAI,GAAI,IACxC,IAAI,OAAwB,KAEhCA,EAAWjP,SAASwB,GAAK,GACzByN,EAAWjP,SAASyB,GAAK,GAEzBgL,EAAGxK,kBAAkBJ,GAAY,EAAM,IAAI,OAAY,GAAW,KAClE4K,EAAGxK,kBAAkB+M,GAAY,EAAM,IAAI,OAAY,OAAW,KAClEvC,EAAGxK,kBAAkBgN,GAAY,EAAM,IAAI,OAAY,MAAW,KAGlE,IAAIC,EAAW,IAAI,OACf,IAAI,OAAsB,IAC1B,IAAI,OAAwB,CACxB7L,MAAO,YAGf6L,EAASlP,SAASC,KAAK4B,EAAW7B,UAClCkP,EAASlP,SAAS0B,GAAK,GACvB,EAAMC,IAAIuN,GAEVtP,OAAO0G,iBAAkB,SAAUG,GACnCrH,IAIJ,SAASqH,IAEL,EAAOF,OAAS3G,OAAOC,WAAaD,OAAOE,YAC3C,EAAO0G,yBACPiG,EAAGhG,iBACH,EAASjG,QAASZ,OAAOC,WAAYD,OAAOE,aAIhD,SAASV,IACLD,sBAAuBC,GACvBZ,IACAgO,EAAS/M,SACTD,EAAMC,SAGV,SAASjB,IAELiO,EAAGjO,W,mBC7QPjB,EAAOC,QAAU,uoB,mBCAjBD,EAAOC,QAAU","file":"js/chunk-19a8ab1c.715f4dcc.js","sourcesContent":["export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest.vue?vue&type=style&index=0&id=10b339a2&scoped=true&lang=css&\"","var map = {\n\t\"./GlassFrontShader/F.glsl\": \"f430\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"08fd\";","'use strict';\nvar global = require('../internals/global');\nvar toIntegerOrInfinity = require('../internals/to-integer-or-infinity');\nvar toString = require('../internals/to-string');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\n\nvar RangeError = global.RangeError;\n\n// `String.prototype.repeat` method implementation\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\nmodule.exports = function repeat(count) {\n  var str = toString(requireObjectCoercible(this));\n  var result = '';\n  var n = toIntegerOrInfinity(count);\n  if (n < 0 || n == Infinity) throw RangeError('Wrong number of repetitions');\n  for (;n > 0; (n >>>= 1) && (str += str)) if (n & 1) result += str;\n  return result;\n};\n","var $ = require('../internals/export');\nvar repeat = require('../internals/string-repeat');\n\n// `String.prototype.repeat` method\n// https://tc39.es/ecma262/#sec-string.prototype.repeat\n$({ target: 'String', proto: true }, {\n  repeat: repeat\n});\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}})])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { FXAAShader  } from 'three/examples/jsm/shaders/FXAAShader'\r\n// import { ClearPass } from 'three/examples/jsm/postprocessing/ClearPass'\r\n// import FresnelShader from './FresnelShader'\r\nimport { loadShader } from './ShaderLoader'\r\nimport { Stats } from 'three-stats'\r\nimport { TardisCard, TardisCardShape } from './TardisCard'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from './CustomCSS3DRenderer'\r\nimport { DampingObjectController, DampingVector3Controller } from './Utils'\r\nimport { RefractionManager } from '../ThreeRealisticRefraction/ThreeRealisticRefraction'\r\nimport { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry'\r\n// import { TextGeometry } from 'three/examples/jsm/geometries/TextGeometry'\r\n// import { Font } from 'three/examples/jsm/loaders/FontLoader'\r\n// import { BrickManager } from './Brick'\r\nimport * as TweenUtils from '../AnimUtils/TweenUtils'\r\nimport { Easing } from '@tweenjs/tween.js'\r\n// import * as GEOM from '../GeomUtils'\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    camera: THREE.PerspectiveCamera\r\n    // controls: OrbitControls\r\n    cardInsideScene: THREE.Scene\r\n    scene: THREE.Scene\r\n\r\n    composer: EffectComposer\r\n    // glassFrontScene: THREE.Scene\r\n    // glassBackRenderTarget: THREE.WebGLRenderTarget\r\n    // glassBackdepthTexture: THREE.DepthTexture\r\n    // glassBackMaterial: THREE.Material\r\n    // glassFrontMaterial: THREE.ShaderMaterial\r\n\r\n    // cssScene: THREE.Scene\r\n    // cssRenderer: CustomCSS3DRenderer\r\n\r\n    stats: Stats\r\n\r\n    refractionManager: RefractionManager\r\n    glassMesh1Controller: DampingObjectController\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera position\r\n    cameraZPosition: number\r\n    cameraPositionController: DampingVector3Controller\r\n    cameraTargetPosition: THREE.Vector3\r\n\r\n    // cursor light\r\n    cursorLightGroup: THREE.Group\r\n    cursorLight: THREE.PointLight\r\n    cursorLightController: DampingObjectController\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectTardisCardObjs: Array<THREE.Object3D>\r\n    intersectGlassObjs: Array<THREE.Object3D>\r\n\r\n    // glass intersections\r\n    glassSelected: THREE.Object3D | null\r\n    glassIsRotating: Boolean\r\n\r\n    constructor(_container: HTMLElement, cameraZPosition: number = 500) {\r\n\r\n        // *********** basic settings ***********\r\n        this.cameraZPosition = cameraZPosition\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        \r\n        this.cameraTargetPosition = new THREE.Vector3(0, 0, this.cameraZPosition)\r\n        this.camera.position.copy(this.cameraTargetPosition)\r\n        this.camera.lookAt(0, 0, 0)\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        // controls = new OrbitControls(camera, renderer.domElement)\r\n        // stats (debug)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cardInsideScene = new THREE.Scene()\r\n\r\n\r\n        // *********** background & env ***********\r\n        const r = './cube1/'\r\n        const urls = [\r\n            r + 'px.jpg', r + 'nx.jpg',\r\n            r + 'py.jpg', r + 'ny.jpg',\r\n            r + 'pz.jpg', r + 'nz.jpg'\r\n        ]\r\n        const textureCube = new THREE.CubeTextureLoader().load( urls )\r\n        textureCube.mapping = THREE.CubeRefractionMapping\r\n        // this.scene.background = textureCube\r\n        this.scene.environment = textureCube\r\n\r\n\r\n        // *********** set light ***********\r\n        var light = new THREE.DirectionalLight()\r\n        light.position.x = 300\r\n        light.position.y = 200\r\n        light.position.z = 100\r\n        this.scene.add(light)\r\n\r\n        // *********** refraction objects ***********\r\n        this.refractionManager = new RefractionManager(this.scene, this.container, this.renderer, this.camera)\r\n        var glassMesh1 = new THREE.Mesh(\r\n            new RoundedBoxGeometry(40, 40, 40, 5, 5),\r\n            new THREE.MeshPhongMaterial({})\r\n        )\r\n        glassMesh1.rotation.set(1,1,1)\r\n        this.refractionManager.addRefractionMesh(glassMesh1, true, new THREE.Color(0x000000), 1.5)\r\n        this.glassMesh1Controller = new DampingObjectController(glassMesh1, 0.2, 0.1)\r\n\r\n\r\n        // *********** composers ***********\r\n        const renderPass1 = new RenderPass(this.scene, this.camera)\r\n        renderPass1.clear = true\r\n        const renderPass2 = new RenderPass(this.cardInsideScene, this.camera)\r\n        renderPass2.clearDepth = true\r\n        renderPass2.clear = false\r\n        this.composer = new EffectComposer(this.renderer, new THREE.WebGLMultisampleRenderTarget(\r\n            this.container.offsetWidth * window.devicePixelRatio,\r\n            this.container.offsetHeight * window.devicePixelRatio\r\n        ))\r\n        // this.composer = new EffectComposer(this.renderer)\r\n        this.composer.addPass(renderPass1)\r\n        this.composer.addPass(renderPass2)\r\n        this.composer.renderTarget1.stencilBuffer = true\r\n        this.composer.renderTarget2.stencilBuffer = true\r\n        this.refractionManager.scene.background = this.composer.renderTarget2.texture\r\n\r\n        // *********** tardis cards ***********\r\n        var tardisCard1 = new TardisCard(200, 200, 111, this.scene, this.cardInsideScene, new THREE.Vector3(0, 0, 0), new THREE.Euler())\r\n        var contentInTardisCard1 = new THREE.Mesh(\r\n            new THREE.TorusBufferGeometry(20, 10, 20, 20),\r\n            new THREE.MeshPhysicalMaterial({ color: new THREE.Color(0xffffff) })\r\n        )\r\n        \r\n        var diffuseTexture = new THREE.TextureLoader().load( './tiles/diffuse.jpg' )\r\n        var normalTexture = new THREE.TextureLoader().load( './tiles/normal.jpg' )\r\n        var specTexture = new THREE.TextureLoader().load( './tiles/specular.jpg' )\r\n        var texs = [diffuseTexture, normalTexture, specTexture]\r\n        texs.forEach(t => {\r\n            t.wrapS = t.wrapT = THREE.RepeatWrapping\r\n            t.repeat.set(2, 2)\r\n        })\r\n        var tardisCardBackground = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(400, 400, 1, 1),\r\n            new THREE.MeshPhysicalMaterial({\r\n                map: diffuseTexture,\r\n                normalMap: normalTexture,\r\n                normalScale: new THREE.Vector2(0.1, 0.1),\r\n                specularColorMap: specTexture,\r\n                specularIntensity: 0.2,\r\n                reflectivity: 1.0,\r\n                metalness: 0.1,\r\n                roughness: 0.2,\r\n                clearcoat: 0.1,\r\n                color: 0xffddff\r\n\r\n            })\r\n        )\r\n        tardisCardBackground.position.set(0, 0, -100)\r\n        var contentGroupInTardisCard1 = new THREE.Group()\r\n        contentGroupInTardisCard1.add(contentInTardisCard1)\r\n        contentGroupInTardisCard1.add(tardisCardBackground)\r\n        contentGroupInTardisCard1.position.copy(tardisCard1.cardMesh.position)\r\n        tardisCard1.addVisibleObjectGroup(contentGroupInTardisCard1)\r\n\r\n        \r\n        var tardisCard2 = new TardisCard(100, 100, 112, this.scene, this.cardInsideScene, new THREE.Vector3(200, 0, 0), new THREE.Euler(), TardisCardShape.CIRCLE)\r\n        var contentInTardisCard2 = new THREE.Mesh(\r\n            new THREE.TorusBufferGeometry(20, 10, 20, 20),\r\n            new THREE.MeshPhysicalMaterial({ color: new THREE.Color(0xffffff) })\r\n        )\r\n        var diffuseTexture2 = new THREE.TextureLoader().load( './marble/diffuse.jpg' )\r\n        var normalTexture2 = new THREE.TextureLoader().load( './marble/normal.jpg' )\r\n        var specTexture2 = new THREE.TextureLoader().load( './marble/specular.jpg' )\r\n        texs = [diffuseTexture2, normalTexture2, specTexture2]\r\n        texs.forEach(t => {\r\n            t.wrapS = t.wrapT = THREE.RepeatWrapping\r\n            t.repeat.set(2, 2)\r\n        })\r\n        tardisCardBackground = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(800, 400, 1, 1),\r\n            new THREE.MeshPhysicalMaterial({\r\n                map: diffuseTexture2,\r\n                normalMap: normalTexture2,\r\n                normalScale: new THREE.Vector2(0.1, 0.1),\r\n                specularColorMap: specTexture2,\r\n                specularIntensity: 4,\r\n                reflectivity: 1.0,\r\n                metalness: 0.2,\r\n                roughness: 0.1,\r\n                clearcoat: 0.5,\r\n\r\n            })\r\n        )\r\n        tardisCardBackground.position.set(0, 0, -100)\r\n        // scene.add(contentInTardisCard)\r\n        var contentGroupInTardisCard2 = new THREE.Group()\r\n        contentGroupInTardisCard2.add(contentInTardisCard2)\r\n        contentGroupInTardisCard2.add(tardisCardBackground)\r\n        contentGroupInTardisCard2.position.copy(tardisCard2.cardMesh.position)\r\n        tardisCard2.addVisibleObjectGroup(contentGroupInTardisCard2)\r\n\r\n        \r\n        var tardisCard3 = new TardisCard(100, 100, 113, this.scene, this.cardInsideScene, new THREE.Vector3(-200, 0, 0), new THREE.Euler(), TardisCardShape.CIRCLE)\r\n        var contentInTardisCard3 = new THREE.Mesh(\r\n            new THREE.TorusBufferGeometry(20, 10, 20, 20),\r\n            new THREE.MeshPhysicalMaterial({ color: new THREE.Color(0xffffff) })\r\n        )\r\n        var diffuseTexture3 = new THREE.TextureLoader().load( './tilecolor/diffuse.png' )\r\n        var normalTexture3 = new THREE.TextureLoader().load( './tilecolor/normal.png' )\r\n        texs = [diffuseTexture3, normalTexture3]\r\n        texs.forEach(t => {\r\n            t.wrapS = t.wrapT = THREE.RepeatWrapping\r\n            t.repeat.set(4, 4)\r\n        })\r\n        tardisCardBackground = new THREE.Mesh(\r\n            new THREE.PlaneBufferGeometry(400, 400, 1, 1),\r\n            new THREE.MeshPhysicalMaterial({\r\n                map: diffuseTexture3,\r\n                normalMap: normalTexture3,\r\n                normalScale: new THREE.Vector2(2, 2),\r\n                specularIntensity: 4,\r\n                reflectivity: 0.5,\r\n                metalness: 0.3,\r\n                roughness: 0.7,\r\n                // clearcoat: 0.5,\r\n\r\n            })\r\n        )\r\n        tardisCardBackground.position.set(0, 0, -100)\r\n        // scene.add(contentInTardisCard)\r\n        var contentGroupInTardisCard3 = new THREE.Group()\r\n        contentGroupInTardisCard3.add(contentInTardisCard3)\r\n        contentGroupInTardisCard3.add(tardisCardBackground)\r\n        contentGroupInTardisCard3.position.copy(tardisCard3.cardMesh.position)\r\n        tardisCard3.addVisibleObjectGroup(contentGroupInTardisCard3)\r\n\r\n\r\n        // *********** cursor light ***********\r\n        this.cursorLightGroup = new THREE.Group()\r\n        this.cursorLight = new THREE.PointLight()\r\n        this.cursorLight.intensity = 1\r\n        this.cursorLight.decay = 1\r\n        this.cursorLight.distance = 200\r\n        this.cursorLight.color = new THREE.Color( 0xaaccff )\r\n        this.cursorLightGroup.add(this.cursorLight)\r\n        this.scene.add(this.cursorLightGroup)\r\n        this.cursorLightController = new DampingObjectController(this.cursorLightGroup, 0.3, 0.1)\r\n        \r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        this.intersectTardisCardObjs = []\r\n        this.intersectTardisCardObjs.push(tardisCard1.cardMesh, tardisCard2.cardMesh, tardisCard3.cardMesh)\r\n        this.intersectGlassObjs = []\r\n        this.glassSelected = null\r\n        this.glassIsRotating = false\r\n        this.intersectGlassObjs.push(glassMesh1)\r\n\r\n\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n        const self = this\r\n        window.addEventListener( 'resize', () => {\r\n            self.camera.aspect = window.innerWidth / window.innerHeight\r\n            self.camera.updateProjectionMatrix()\r\n            self.refractionManager.onWindowResize()\r\n            self.renderer.setSize( window.innerWidth, window.innerHeight )\r\n            self.composer.setSize( window.innerWidth, window.innerHeight )\r\n        } )\r\n\r\n        \r\n        window.addEventListener( 'click', (e) => {\r\n            self.onClick(e)\r\n        } )\r\n\r\n        // *********** camera movement ***********\r\n        this.cameraPositionController = new DampingVector3Controller(this.camera.position, 0.4, 0.05)\r\n        window.addEventListener('mousemove', e => {\r\n            self.onMouseMove(e)\r\n        })\r\n        console.log(this.cameraTargetPosition)\r\n        this.animate()\r\n    }\r\n\r\n    animate = () => {\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        this.updatecornerObject()\r\n        this.updateCamera()\r\n        this.updateCursorLight()\r\n        this.render()\r\n        this.stats.update()\r\n    }\r\n\r\n    render()\r\n    {\r\n        this.composer.render()\r\n        this.renderer.clearDepth()\r\n        this.refractionManager.render()\r\n    }\r\n    \r\n    onMouseMove(e: MouseEvent) {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectGlassObjs, false )\r\n        if (intersects.length == 1 && !this.glassIsRotating && this.glassSelected !== intersects[0].object) {\r\n            console.log('in')\r\n            this.glassIsRotating = true\r\n            this.glassSelected = intersects[0].object\r\n            TweenUtils.tweenEuler(this.glassSelected.rotation, new THREE.Euler(1,6,1), (v) => {\r\n                    this.glassSelected?.rotation.copy(v)\r\n                },\r\n                () => {this.glassIsRotating = false},\r\n                500\r\n            )\r\n            this.glassSelected.rotation.set(1,2,1)\r\n        }\r\n        else if (intersects.length == 0 && !this.glassIsRotating && this.glassSelected !== null) {\r\n            console.log('out', this.glassSelected)\r\n            this.glassIsRotating = true\r\n            let rotateObj = this.glassSelected\r\n            TweenUtils.tweenEuler(this.glassSelected.rotation, new THREE.Euler(1,1,1), (v) => {\r\n                rotateObj.rotation.copy(v)\r\n                },\r\n                () => {this.glassIsRotating = false},\r\n                500\r\n            )\r\n            this.glassSelected = null\r\n        }\r\n\r\n    }\r\n\r\n    onClick(e: MouseEvent) {\r\n        // this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectTardisCardObjs, false )\r\n        // console.log(intersects)\r\n        // console.log(this.cameraTargetPosition)\r\n        if (intersects.length == 1) {\r\n            const intersectObj = intersects[0]\r\n            this.cameraTargetPosition.x = (intersectObj.object.position.x)\r\n        }\r\n    }\r\n\r\n    getRaycastPos(posX: number, posY: number) {\r\n        let x = (2.0 * posX) / window.innerWidth - 1.0\r\n        let y = 1.0 - (2.0 * posY) / window.innerHeight\r\n        // let z = 1.0\r\n        // let ray_nds = new THREE.Vector3(x, y, z)\r\n        let ray = new THREE.Vector3(x, y, 0.995)\r\n        ray.unproject(this.camera)\r\n        return ray\r\n    }\r\n\r\n    updatecornerObject() {\r\n        let targetPos = this.getRaycastPos(window.innerWidth / 2, window.innerHeight / 2)\r\n        // let lastPos = cornerObject.position\r\n        this.glassMesh1Controller.update(targetPos)\r\n        // let currentPath = targetPos.sub(lastPos)\r\n        // cornerObjectVelocity.multiplyScalar(0.3)\r\n        // cornerObjectVelocity.add(currentPath.multiplyScalar(damp))\r\n        // cornerObject.position.add(cornerObjectVelocity)\r\n    }\r\n\r\n    updateCamera() {\r\n        const relX = window.innerWidth / 2 - this.mousePosX\r\n        const relY = window.innerHeight / 2 - this.mousePosY\r\n        // console.log(this.cameraTargetPosition)\r\n        const newPos1 = this.camera.position\r\n        const newPos2 = (new THREE.Vector3(-relX/10, relY/10, 0)).add(this.cameraTargetPosition)\r\n\r\n        const ratio = 0.7\r\n        const newPos = new THREE.Vector3(newPos1.x * ratio + newPos2.x * (1-ratio), newPos1.y * ratio + newPos2.y * (1-ratio), newPos1.z * ratio + newPos2.z * (1-ratio))\r\n        // const newPos = new THREE.Vector3(-relX/10 + this.cameraTargetPosition.x, relY/10, this.cameraZPosition)\r\n        // console.log(newPos.x)\r\n        this.cameraPositionController.update(newPos)\r\n        var vel = this.cameraPositionController.velocity\r\n        this.camera.rotation.x = vel.y / 30\r\n        this.camera.rotation.y = -vel.x / 30\r\n    }\r\n\r\n    updateCursorLight() {\r\n        if (!isNaN(this.mousePosX) && !isNaN(this.mousePosY)) {\r\n            let targetPos = this.getRaycastPos(this.mousePosX, this.mousePosY)\r\n            let camPosZ = this.camera.position.z\r\n            let targetPosVec = new THREE.Vector3().copy(targetPos)\r\n            targetPosVec = targetPosVec.sub(this.camera.position)\r\n            let newz = -40\r\n            let x = (newz - camPosZ) / targetPosVec.z\r\n            targetPos.copy(this.camera.position)\r\n            targetPosVec.multiplyScalar(x)\r\n            targetPos.add(targetPosVec)\r\n            this.cursorLightController.update(targetPos)\r\n            // console.log(targetPos)\r\n        }\r\n    }\r\n\r\n\r\n\r\n    \r\n}\r\n\r\n\r\n\r\nexport {\r\n    FrontPageManager\r\n}","\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { FrontPageManager } from '../scripts/Three/FrontPage'\r\n\r\ntype Data = {\r\n    fpm: FrontPageManager | null\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            fpm: null\r\n        }\r\n    },\r\n    mounted() {\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.fpm = new FrontPageManager(this.$refs['canvas-container'])\r\n            // ThreeGlassRefraction.initScene(this.$refs['canvas-container'])\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeFrontpageTest.vue?vue&type=template&id=10b339a2&scoped=true&\"\nimport script from \"./ThreeFrontpageTest.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeFrontpageTest.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeFrontpageTest.vue?vue&type=style&index=0&id=10b339a2&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"10b339a2\",\n  null\n  \n)\n\nexport default component.exports","var map = {\n\t\"./GlassFrontShader/V.glsl\": \"c444\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5303\";","import {\n\tBoxGeometry,\n\tVector3\n} from 'three';\n\nconst _tempNormal = new Vector3();\n\nfunction getUv( faceDirVector, normal, uvAxis, projectionAxis, radius, sideLength ) {\n\n\tconst totArcLength = 2 * Math.PI * radius / 4;\n\n\t// length of the planes between the arcs on each axis\n\tconst centerLength = Math.max( sideLength - 2 * radius, 0 );\n\tconst halfArc = Math.PI / 4;\n\n\t// Get the vector projected onto the Y plane\n\t_tempNormal.copy( normal );\n\t_tempNormal[ projectionAxis ] = 0;\n\t_tempNormal.normalize();\n\n\t// total amount of UV space alloted to a single arc\n\tconst arcUvRatio = 0.5 * totArcLength / ( totArcLength + centerLength );\n\n\t// the distance along one arc the point is at\n\tconst arcAngleRatio = 1.0 - ( _tempNormal.angleTo( faceDirVector ) / halfArc );\n\n\tif ( Math.sign( _tempNormal[ uvAxis ] ) === 1 ) {\n\n\t\treturn arcAngleRatio * arcUvRatio;\n\n\t} else {\n\n\t\t// total amount of UV space alloted to the plane between the arcs\n\t\tconst lenUv = centerLength / ( totArcLength + centerLength );\n\t\treturn lenUv + arcUvRatio + arcUvRatio * ( 1.0 - arcAngleRatio );\n\n\t}\n\n}\n\nclass RoundedBoxGeometry extends BoxGeometry {\n\n\tconstructor( width = 1, height = 1, depth = 1, segments = 2, radius = 0.1 ) {\n\n\t\t// ensure segments is odd so we have a plane connecting the rounded corners\n\t\tsegments = segments * 2 + 1;\n\n\t\t// ensure radius isn't bigger than shortest side\n\t\tradius = Math.min( width / 2, height / 2, depth / 2, radius );\n\n\t\tsuper( 1, 1, 1, segments, segments, segments );\n\n\t\t// if we just have one segment we're the same as a regular box\n\t\tif ( segments === 1 ) return;\n\n\t\tconst geometry2 = this.toNonIndexed();\n\n\t\tthis.index = null;\n\t\tthis.attributes.position = geometry2.attributes.position;\n\t\tthis.attributes.normal = geometry2.attributes.normal;\n\t\tthis.attributes.uv = geometry2.attributes.uv;\n\n\t\t//\n\n\t\tconst position = new Vector3();\n\t\tconst normal = new Vector3();\n\n\t\tconst box = new Vector3( width, height, depth ).divideScalar( 2 ).subScalar( radius );\n\n\t\tconst positions = this.attributes.position.array;\n\t\tconst normals = this.attributes.normal.array;\n\t\tconst uvs = this.attributes.uv.array;\n\n\t\tconst faceTris = positions.length / 6;\n\t\tconst faceDirVector = new Vector3();\n\t\tconst halfSegmentSize = 0.5 / segments;\n\n\t\tfor ( let i = 0, j = 0; i < positions.length; i += 3, j += 2 ) {\n\n\t\t\tposition.fromArray( positions, i );\n\t\t\tnormal.copy( position );\n\t\t\tnormal.x -= Math.sign( normal.x ) * halfSegmentSize;\n\t\t\tnormal.y -= Math.sign( normal.y ) * halfSegmentSize;\n\t\t\tnormal.z -= Math.sign( normal.z ) * halfSegmentSize;\n\t\t\tnormal.normalize();\n\n\t\t\tpositions[ i + 0 ] = box.x * Math.sign( position.x ) + normal.x * radius;\n\t\t\tpositions[ i + 1 ] = box.y * Math.sign( position.y ) + normal.y * radius;\n\t\t\tpositions[ i + 2 ] = box.z * Math.sign( position.z ) + normal.z * radius;\n\n\t\t\tnormals[ i + 0 ] = normal.x;\n\t\t\tnormals[ i + 1 ] = normal.y;\n\t\t\tnormals[ i + 2 ] = normal.z;\n\n\t\t\tconst side = Math.floor( i / faceTris );\n\n\t\t\tswitch ( side ) {\n\n\t\t\t\tcase 0: // right\n\n\t\t\t\t\t// generate UVs along Z then Y\n\t\t\t\t\tfaceDirVector.set( 1, 0, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = getUv( faceDirVector, normal, 'z', 'y', radius, depth );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'z', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 1: // left\n\n\t\t\t\t\t// generate UVs along Z then Y\n\t\t\t\t\tfaceDirVector.set( - 1, 0, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'z', 'y', radius, depth );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'z', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 2: // top\n\n\t\t\t\t\t// generate UVs along X then Z\n\t\t\t\t\tfaceDirVector.set( 0, 1, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'z', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = getUv( faceDirVector, normal, 'z', 'x', radius, depth );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3: // bottom\n\n\t\t\t\t\t// generate UVs along X then Z\n\t\t\t\t\tfaceDirVector.set( 0, - 1, 0 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'z', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'z', 'x', radius, depth );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 4: // front\n\n\t\t\t\t\t// generate UVs along X then Y\n\t\t\t\t\tfaceDirVector.set( 0, 0, 1 );\n\t\t\t\t\tuvs[ j + 0 ] = 1.0 - getUv( faceDirVector, normal, 'x', 'y', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'x', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 5: // back\n\n\t\t\t\t\t// generate UVs along X then Y\n\t\t\t\t\tfaceDirVector.set( 0, 0, - 1 );\n\t\t\t\t\tuvs[ j + 0 ] = getUv( faceDirVector, normal, 'x', 'y', radius, width );\n\t\t\t\t\tuvs[ j + 1 ] = 1.0 - getUv( faceDirVector, normal, 'y', 'x', radius, height );\n\t\t\t\t\tbreak;\n\n\t\t\t}\n\n\t\t}\n\n\t}\n\n}\n\nexport { RoundedBoxGeometry };\n","export function loadShader(shaderName: string): Array<string> {\r\n    try {\r\n        var vertexShader = require('./' + shaderName + '/V.glsl')\r\n        var fragShader = require('./' + shaderName + '/F.glsl')\r\n        return [vertexShader, fragShader]\r\n    }\r\n    catch(err) {\r\n        console.error('failed to fetch shader', err)\r\n        return ['', '']\r\n    }\r\n}","import * as THREE from 'three'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass'\r\nimport { FXAAShader  } from 'three/examples/jsm/shaders/FXAAShader'\r\nimport { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry'\r\n// import { ClearPass } from 'three/examples/jsm/postprocessing/ClearPass'\r\n// import FresnelShader from './FresnelShader'\r\nimport { loadShader } from './ShaderLoader'\r\nimport { Stats } from 'three-stats'\r\nimport { ShaderMaterial } from 'three'\r\n\r\nclass RefractionObject {\r\n    mesh: THREE.Mesh\r\n    originalMaterial: THREE.Material | THREE.Material[]\r\n    refractionMaterial: THREE.ShaderMaterial\r\n    // suResolution: THREE.Vector2\r\n    // suBackground: THREE.Texture\r\n    // suDepth: THREE.DepthTexture\r\n    constructor(scene: THREE.Scene, mesh: THREE.Mesh, suResolution: THREE.Vector2, suBackground: THREE.Texture, suDepth: THREE.DepthTexture,\r\n        absorbColor: THREE.Color, suRefractionFactor: number) {\r\n        this.mesh = mesh\r\n        // copy material\r\n        if (this.mesh.material instanceof Array) {\r\n            this.originalMaterial = new Array<THREE.Material>()\r\n            for (let i = 0; i < this.mesh.material.length; i++) {\r\n                this.originalMaterial.push(this.mesh.material[i].clone())\r\n            }\r\n        }\r\n        else {\r\n            this.originalMaterial = this.mesh.material.clone()\r\n        }\r\n        var refractionMaterialUniforms = {\r\n            \"resolution\": { type: \"v\", value: suResolution },\r\n            \"tBackground\":    { type: \"t\", value: suBackground },\r\n            \"tBackDepth\": { type: \"t\", value: suDepth },\r\n            \"tSkybox\": { type: \"t\", value: scene.environment },\r\n            \"refractionFactor\": { type: \"t\", value: suRefractionFactor },\r\n            \"absorbColor\": { type: \"v\", value: absorbColor }\r\n        }\r\n        var [glassFrontVS, glassFrontFS] = loadShader('GlassFrontShader')\r\n        this.refractionMaterial = new ShaderMaterial({\r\n            vertexShader:   glassFrontVS,\r\n            fragmentShader: glassFrontFS,\r\n            uniforms: refractionMaterialUniforms,\r\n            // depthTest: false,\r\n            // stencilWrite: true,\r\n            // stencilRef: 999,\r\n            // stencilZPass: THREE.ReplaceStencilOp,  // write if the depth buffer test passes\r\n            side: THREE.FrontSide\r\n        })\r\n    }\r\n}\r\n\r\nexport class RefractionManager {\r\n    container: HTMLElement\r\n    backgroundScene: THREE.Scene\r\n    scene: THREE.Scene\r\n    renderer: THREE.WebGLRenderer\r\n    camera: THREE.PerspectiveCamera\r\n\r\n    frontScene: THREE.Scene\r\n\r\n    backdepthTexture: THREE.DepthTexture\r\n    backRenderTarget: THREE.WebGLRenderTarget\r\n\r\n    refractionObjectList: Array<RefractionObject>\r\n\r\n    suResolution: THREE.Vector2\r\n\r\n    constructor(\r\n        backgroundScene: THREE.Scene, container: HTMLElement, renderer: THREE.WebGLRenderer, camera: THREE.PerspectiveCamera,\r\n        backDepthTextureSize: number = 512\r\n    ) {\r\n        this.container = container\r\n        this.backgroundScene = backgroundScene\r\n        this.scene = new THREE.Scene()\r\n        this.renderer = renderer\r\n        this.camera = camera\r\n\r\n        this.frontScene = new THREE.Scene()\r\n        this.backdepthTexture = new THREE.DepthTexture(\r\n            backDepthTextureSize, backDepthTextureSize,\r\n            THREE.FloatType\r\n        )\r\n        this.backRenderTarget = new THREE.WebGLRenderTarget(\r\n            this.container.offsetWidth * window.devicePixelRatio,\r\n            this.container.offsetHeight * window.devicePixelRatio,\r\n            \r\n        )\r\n        this.backRenderTarget.depthBuffer = true;\r\n        this.backRenderTarget.depthTexture = this.backdepthTexture;\r\n        this.backRenderTarget.depthTexture.type = THREE.UnsignedIntType;\r\n        this.frontScene.background = this.backRenderTarget.texture\r\n        this.refractionObjectList = []\r\n        this.suResolution = new THREE.Vector2(\r\n            this.container.offsetWidth * window.devicePixelRatio,\r\n            this.container.offsetHeight * window.devicePixelRatio\r\n        )\r\n\r\n    }\r\n\r\n    addRefractionMesh(mesh: THREE.Mesh, setDefaultBacksideMaterial: boolean = true,\r\n        absorbColor: THREE.Color = new THREE.Color(0x000000), refractionFactor: number = 1.49) {\r\n        if (setDefaultBacksideMaterial) {\r\n            mesh.material = new THREE.MeshPhysicalMaterial({\r\n                // color: 0x00000000,\r\n                color: new THREE.Color(0x000000),\r\n                transparent: true,\r\n                opacity: 0.3,\r\n                metalness: 0.8,\r\n                roughness: 0.0,\r\n                clearcoat: 0.2,\r\n                side: THREE.BackSide\r\n                // colorWrite: false\r\n            })\r\n        }\r\n        this.refractionObjectList.push(new RefractionObject(\r\n            this.backgroundScene,\r\n            mesh,\r\n            this.suResolution,\r\n            this.backRenderTarget.texture,\r\n            this.backRenderTarget.depthTexture,\r\n            absorbColor,\r\n            refractionFactor\r\n        ))\r\n        this.scene.add(mesh)\r\n    }\r\n\r\n    onWindowResize() {\r\n        this.suResolution.x = this.container.offsetWidth * window.devicePixelRatio\r\n        this.suResolution.y = this.container.offsetHeight * window.devicePixelRatio\r\n    }\r\n\r\n    render() {\r\n        this.refractionObjectList.forEach(refObj => {\r\n            refObj.mesh.material = refObj.originalMaterial\r\n            this.scene.add(refObj.mesh)\r\n        })\r\n        this.renderer.setRenderTarget(this.backRenderTarget)\r\n        this.renderer.render(this.scene, this.camera)\r\n        \r\n        this.refractionObjectList.forEach(refObj => {\r\n            refObj.mesh.material = refObj.refractionMaterial\r\n            this.frontScene.add(refObj.mesh)\r\n        })\r\n        this.renderer.setRenderTarget(null)\r\n        this.renderer.render(this.frontScene, this.camera)\r\n    }\r\n}\r\n\r\nvar container: HTMLElement\r\nvar renderer: THREE.WebGLRenderer, camera: THREE.PerspectiveCamera, controls: OrbitControls\r\nvar stats: Stats\r\nvar scene: THREE.Scene\r\nvar rm: RefractionManager\r\n\r\nexport function initScene(_container: HTMLElement) {\r\n    container = _container\r\n    camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n    camera.position.set(30, 20, 200)\r\n    camera.lookAt(0, 0, 0)\r\n\r\n    scene = new THREE.Scene()\r\n\r\n    renderer = new THREE.WebGLRenderer( {antialias: true, alpha: true} )\r\n    \r\n    renderer.setClearColor( 0xffffff )\r\n    renderer.setPixelRatio( window.devicePixelRatio )\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    container.appendChild( renderer.domElement )\r\n    controls = new OrbitControls(camera, container)\r\n    container.style.position = 'absolute'\r\n    container.style.top = '0px'\r\n    container.style.left = '0px'\r\n    stats = new Stats()\r\n    stats.domElement.style.zIndex = '100'\r\n    container.appendChild( stats.domElement )\r\n\r\n    // set background\r\n    const r = './cube/'\r\n\r\n    const urls = [\r\n        r + 'px.jpg', r + 'nx.jpg',\r\n        r + 'py.jpg', r + 'ny.jpg',\r\n        r + 'pz.jpg', r + 'nz.jpg'\r\n    ]\r\n\r\n    const textureCube = new THREE.CubeTextureLoader().load( urls )\r\n    textureCube.mapping = THREE.CubeRefractionMapping\r\n\r\n    scene.background = textureCube\r\n    scene.environment = textureCube\r\n    \r\n    // set light\r\n    var light = new THREE.DirectionalLight()\r\n    light.position.x = 300\r\n    light.position.y = 200\r\n    light.position.z = 100\r\n    scene.add(light)\r\n\r\n    // set floor\r\n    var floorTexture = new THREE.TextureLoader().load( './checkerboard.jpg' )\r\n\tfloorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping\r\n\tfloorTexture.repeat.set( 10, 10 )\r\n    var floorMaterial = new THREE.MeshBasicMaterial( { map: floorTexture, side: THREE.DoubleSide } )\r\n\tvar floorGeometry = new THREE.PlaneGeometry(1000, 1000, 1, 1)\r\n\tvar floor = new THREE.Mesh(floorGeometry, floorMaterial)\r\n\tfloor.position.y -= 20.1\r\n\tfloor.rotation.x = Math.PI / 2\r\n    // scene.add(floor)\r\n\r\n    rm = new RefractionManager(scene, container, renderer, camera)\r\n\r\n    var glassMesh1 = new THREE.Mesh(\r\n        new RoundedBoxGeometry(40, 40, 40, 5, 5),\r\n        new THREE.MeshPhongMaterial({})\r\n    )\r\n    glassMesh1.position.x -= 40\r\n    var glassMesh2 = new THREE.Mesh(\r\n        new THREE.SphereGeometry( 20 ),\r\n        new THREE.MeshPhongMaterial({})\r\n    )\r\n    var glassMesh3 = new THREE.Mesh(\r\n        new THREE.CylinderGeometry( 20, 20, 80, 36 ),\r\n        new THREE.MeshPhongMaterial({})\r\n    )\r\n    glassMesh3.position.x += 40\r\n    glassMesh3.position.y += 20\r\n\r\n    rm.addRefractionMesh(glassMesh1, true, new THREE.Color(0x000000), 1.5)\r\n    rm.addRefractionMesh(glassMesh2, true, new THREE.Color(0x006000), 1.5)\r\n    rm.addRefractionMesh(glassMesh3, true, new THREE.Color(0x000633), 1.5)\r\n\r\n    // add a few spheres\r\n    var ballMesh = new THREE.Mesh(\r\n        new THREE.SphereGeometry( 20 ),\r\n        new THREE.MeshPhongMaterial({\r\n            color: 0xff0000\r\n        })\r\n    )\r\n    ballMesh.position.copy(glassMesh1.position)\r\n    ballMesh.position.z -= 50\r\n    scene.add(ballMesh)\r\n\r\n    window.addEventListener( 'resize', onWindowResize )\r\n    animate()\r\n\r\n}\r\n\r\nfunction onWindowResize() {\r\n\r\n    camera.aspect = window.innerWidth / window.innerHeight\r\n    camera.updateProjectionMatrix()\r\n    rm.onWindowResize()\r\n    renderer.setSize( window.innerWidth, window.innerHeight )\r\n\r\n}\r\n\r\nfunction animate() {\r\n    requestAnimationFrame( animate )\r\n    render()\r\n    controls.update()\r\n    stats.update()\r\n}\r\n\r\nfunction render()\r\n{\r\n    rm.render()\r\n}","module.exports = \"varying vec2 vUv;\\r\\nvarying vec3 vNormal;\\r\\nvarying vec3 vCameraPosition;\\r\\nvarying vec4 vWorldPosition;\\r\\nvarying mat4 vProjectionMatrix;\\r\\n// varying vec3 vRefract;\\r\\n// varying vec2 vRefractOffset;\\r\\n\\r\\n\\r\\nvoid main() {\\r\\n    vWorldPosition = modelMatrix * vec4( position, 1.0 );\\r\\n    vec4 mvPosition = viewMatrix * vWorldPosition;\\r\\n    gl_Position = projectionMatrix * mvPosition;\\r\\n    vUv = uv;\\r\\n\\r\\n    vNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\r\\n    vCameraPosition = cameraPosition;\\r\\n\\r\\n    vProjectionMatrix = projectionMatrix * modelViewMatrix;\\r\\n}\\r\\n\"","module.exports = \"uniform vec2 resolution;\\r\\nuniform sampler2D tBackground;\\r\\nuniform sampler2D tBackDepth;\\r\\nuniform samplerCube tSkybox;\\r\\nuniform vec3 absorbColor;\\r\\nuniform float refractionFactor;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec3 vNormal;\\r\\nvarying vec3 vCameraPosition;\\r\\nvarying vec4 vWorldPosition;\\r\\nvarying mat4 vProjectionMatrix;\\r\\n\\r\\nfloat near = 0.1;\\r\\nfloat far  = 5000.0;\\r\\n\\r\\nfloat LinearizeDepth(float depth) \\r\\n{\\r\\n    float z = depth * 2.0 - 1.0; // back to NDC \\r\\n    return (2.0 * near * far) / (far + near - z * (far - near));\\t\\r\\n}\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n    float backDepth = float(texture2D( tBackDepth, vec2( gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y ) ).x);\\r\\n    float frontDepth = gl_FragCoord.z;\\r\\n\\r\\n    float backDepthlinear = LinearizeDepth(backDepth);\\r\\n    float frontDepthlinear = LinearizeDepth(frontDepth);\\r\\n    \\r\\n    float backToFrontDepth = backDepthlinear - frontDepthlinear;\\r\\n    // backToFrontDepth *= 0.07;\\r\\n    \\r\\n    vec3 vCameraRay = vWorldPosition.xyz / vWorldPosition.w - vCameraPosition;\\r\\n    vCameraRay = normalize(vCameraRay);\\r\\n    vec3 vRefract = refract( vCameraRay, vNormal, 1.0 / refractionFactor );\\r\\n    vec4 vOriginalPos = vWorldPosition + vec4(vCameraRay, 0.0);\\r\\n    vec4 vRefractedPos = vWorldPosition + vec4(vRefract, 0.0);\\r\\n    // vRefractedPos = vOriginalPos; //vWorldPosition + vec4(vRefract, 0.0);\\r\\n    vec4 vOriginalProjectedPos = vProjectionMatrix * vOriginalPos;\\r\\n    vec4 vRefractedProjectedPos = vProjectionMatrix * vRefractedPos;\\r\\n    vec2 offset = normalize(vRefractedProjectedPos - vOriginalProjectedPos).xy;\\r\\n    offset = normalize(offset);\\r\\n\\r\\n    // reflect\\r\\n    vec3 vReflect = reflect( vCameraRay, vNormal );\\r\\n    vec3 refCol = vec3(textureCube(tSkybox, vReflect));\\r\\n\\r\\n    // snell's law\\r\\n    float cosTheta1 = dot(vCameraRay, vNormal);\\r\\n    float sinTheta1 = 1.0 - cosTheta1 * cosTheta1;\\r\\n    float sinTheta2 = sinTheta1 / refractionFactor;\\r\\n    float theta2 = asin(sinTheta2);\\r\\n    offset *= sinTheta2;\\r\\n    offset *= 50.0;\\r\\n\\r\\n    float samplePointX_r = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.9) / resolution.x;\\r\\n    float samplePointY_r = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.9) / resolution.y;\\r\\n\\r\\n    float samplePointX_g = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.95) / resolution.x;\\r\\n    float samplePointY_g = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.95) / resolution.y;\\r\\n\\r\\n    float samplePointX_b = (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x;\\r\\n    float samplePointY_b = (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y;\\r\\n    \\r\\n    float backColor_r = texture2D( tBackground, vec2( samplePointX_r, samplePointY_r ) * 1.0 ).x;\\r\\n    float backColor_g = texture2D( tBackground, vec2( samplePointX_g, samplePointY_g ) * 1.0 ).y;\\r\\n    float backColor_b = texture2D( tBackground, vec2( samplePointX_b, samplePointY_b ) * 1.0 ).z;\\r\\n\\r\\n    vec3 backColor = vec3(backColor_r, backColor_g, backColor_b);\\r\\n    vec3 absorbColor = absorbColor * backToFrontDepth * 0.2;\\r\\n\\r\\n    // backColor = texture2D( tBackground, vec2( (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x, (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y ) * 1.0 ).xyz;\\r\\n\\r\\n    // gl_FragColor = vec4(refCol, 1.0);\\r\\n    float reflectionCoeff = 0.5 * pow(sinTheta1, 4.0);\\r\\n    // reflectionCoeff = 1.0;\\r\\n    gl_FragColor = vec4((1.0 - reflectionCoeff) * (backColor + absorbColor) + reflectionCoeff * refCol, 1.0);\\r\\n    // gl_FragColor = vec4(vec3(backDepthlinear*0.01), 1.0);\\r\\n}\""],"sourceRoot":""}