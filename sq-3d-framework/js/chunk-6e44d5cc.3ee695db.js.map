{"version":3,"sources":["webpack:///./src/views/ThreeFrontpageTest2.vue?d911","webpack:///./src/scripts/FrontPage3.0/index.ts","webpack:///./src/views/ThreeFrontpageTest2.vue","webpack:///./src/views/ThreeFrontpageTest2.vue?3e9f","webpack:///./src/views/ThreeFrontpageTest2.vue?64c0","webpack:///./node_modules/core-js/modules/es.math.sign.js","webpack:///./src/views/ThreeFrontpageTest2.vue?d7dd","webpack:///./node_modules/core-js/internals/math-sign.js"],"names":["render","_vm","this","_h","$createElement","_c","_self","ref","attrs","staticClass","class","loadingStat","isLoaded","noLoadingStat","style","width","loaded","total","_v","_s","Math","round","staticRenderFns","angle","radius","z","momentum","attraction","relVelocity","staticThreshold","angleTarget","radiusTarget","zTarget","angleV","radiusV","zV","isAlmostStatic","cos","PI","sin","val","sqrt","abs","sign","nonlinear","mesh","info","controller","position","copy","getPosition","rotation","getRotation","update","_container","cardInfos","onLoad","onProgress","onError","onCardFocus","onCardRouteJump","configs","cardSizeX","cardSizeY","cardHelixRadius","cardHelixZGap","cardHelixRotateRadGap","cardHelixFocusRadius","cardHelixFocusRotateRadGap","cardMomentum","cardAttraction","cardRelVelocity","requestAnimationFrame","animate","cards","forEach","card","updateByController","stats","self","cameraZPosition","container","camera","window","innerWidth","innerHeight","renderer","alpha","setClearColor","setPixelRatio","devicePixelRatio","setSize","domElement","top","left","appendChild","shadowMap","enabled","type","zIndex","set","lookAt","scene","cssScene","loadingManager","stackCard","url","r","urls","textureCube","load","mapping","background","environment","light","castShadow","shadow","right","bottom","near","far","mapSize","height","bias","add","floorGeometry","floor","color","receiveShadow","y","x","intersectObjs","cardGroup","cardGeom","cardInfo","cardIndex","side","push","pickedCardIndex","cardGroupStatus","raycaster","mousePosX","mousePosY","pointer","addEventListener","e","onWindowResize","onMouseWheel","onMouseMove","onClick","cssRenderer","aspect","updateProjectionMatrix","deltaY","length","pickCard","clientX","clientY","setFromCamera","intersects","intersectObjects","fanCard","clickedCardIndex","object","focusOnCard","index","i","focusIndex","extend","data","fpm","Array","mounted","imgUrl","$refs","HTMLElement","console","log","setTimeout","_","error","methods","onGlassClick","alert","component","$","target","stat","module","exports"],"mappings":"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","file":"js/chunk-6e44d5cc.3ee695db.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}},[_c('div',{staticClass:\"loading-container\",class:{\n            'loading-container--hidden': _vm.loadingStat.isLoaded,\n            'loading-container--none': _vm.loadingStat.noLoadingStat\n        }},[_c('div',{staticClass:\"load-stat\"},[_c('div',{staticClass:\"load-pgbar\",style:({\n                    width: 100 * _vm.loadingStat.loaded / _vm.loadingStat.total + '%'\n                })}),_c('div',{staticClass:\"load-text\"},[_vm._v(_vm._s(Math.round(100 * _vm.loadingStat.loaded / _vm.loadingStat.total))+\" %\")])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as THREE from 'three'\r\nimport * as TWEEN from '@tweenjs/tween.js'\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass'\r\nimport { Stats } from 'three-stats'\r\nimport { TDSLoader } from 'three/examples/jsm/loaders/TDSLoader'\r\nimport { CustomCSS3DObject, CustomCSS3DSprite, CustomCSS3DRenderer } from '../Three/CustomCSS3DRenderer'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { DampingObjectController, DampingVector3Controller } from '../Three/Utils'\r\n// import { RefractionMesh, RefractionManager } from '../Three/Refraction2.0'\r\n// import { RefractionObject, RefractionManager } from '../ThreeRealisticRefraction/ThreeRealisticRefraction'\r\n// import { RoundedBoxGeometry } from 'three/examples/jsm/geometries/RoundedBoxGeometry'\r\n// import { controller } from '../AnimUtils/TweenUtils'\r\n// import * as PE from '../Three/ParticleEngine'\r\n// import { randn_bm } from '../Three/Utils'\r\n// import { SQWater } from '../Three/SQWater'\r\n\r\ninterface CardInfo {\r\n    imgUrl: string,\r\n    url: string\r\n}\r\n\r\nclass CardController {\r\n\r\n    angle: number\r\n    radius: number\r\n    z: number\r\n\r\n    angleTarget: number\r\n    radiusTarget: number\r\n    zTarget: number\r\n\r\n    angleV: number\r\n    radiusV: number\r\n    zV: number\r\n\r\n    momentum: number\r\n    attraction: number\r\n    relVelocity: number\r\n\r\n    isAlmostStatic: boolean\r\n    staticThreshold: number\r\n\r\n    constructor(\r\n        angle: number, radius: number, z: number,\r\n        momentum: number, attraction: number, relVelocity: number, staticThreshold: number = 0.001) {\r\n        this.angle = angle\r\n        this.radius = radius\r\n        this.z = z\r\n        this.angleTarget = angle\r\n        this.radiusTarget = radius\r\n        this.zTarget = z\r\n        this.angleV = 0\r\n        this.radiusV = 0\r\n        this.zV = 0\r\n        this.momentum = momentum\r\n        this.attraction = attraction\r\n        this.relVelocity = relVelocity\r\n        this.isAlmostStatic = true\r\n        this.staticThreshold = staticThreshold\r\n    }\r\n    getPosition () {\r\n        return new THREE.Vector3(-this.radius * Math.cos(this.angle+Math.PI/2), this.radius * Math.sin(this.angle+Math.PI/2), -this.z)\r\n    }\r\n    getRotation () {\r\n        return new THREE.Euler(0, 0, -this.angle-Math.PI/2)\r\n    }\r\n    nonlinear (val: number) {\r\n        return Math.sqrt(Math.abs(val)) * Math.sign(val) \r\n    }\r\n    update () {\r\n        // v\r\n        this.angleV = this.attraction * this.nonlinear(this.angleTarget - this.angle) + this.momentum * this.angleV\r\n        this.radiusV = this.attraction * this.nonlinear(this.radiusTarget - this.radius) + this.momentum * this.radiusV\r\n        this.zV = this.attraction * this.nonlinear(this.zTarget - this.z) + this.momentum * this.zV\r\n        // p\r\n        this.angle += this.relVelocity * this.angleV * 0.1\r\n        this.radius += this.relVelocity * this.radiusV\r\n        this.z += this.relVelocity * this.zV\r\n        // is the card static?\r\n        this.isAlmostStatic = Math.abs(this.angleTarget - this.angle) < this.staticThreshold\r\n    }\r\n}\r\n\r\nclass Card {\r\n    mesh: THREE.Mesh\r\n    info: CardInfo\r\n    controller: CardController\r\n    constructor(mesh: THREE.Mesh, info: CardInfo, controller: CardController) {\r\n        this.mesh = mesh\r\n        this.info = info\r\n        this.controller = controller\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n    updateByController() {\r\n        this.controller.update()\r\n        this.mesh.position.copy(this.controller.getPosition())\r\n        this.mesh.rotation.copy(this.controller.getRotation())\r\n    }\r\n}\r\n\r\ninterface FrontPageConfigs {\r\n\r\n    cardSizeX: number,\r\n    cardSizeY: number,\r\n\r\n    cardHelixRadius: number,\r\n    cardHelixZGap: number,\r\n    cardHelixRotateRadGap: number,\r\n\r\n    cardHelixFocusRadius: number,\r\n    cardHelixFocusRotateRadGap: number,\r\n\r\n    cardMomentum: number,\r\n    cardAttraction: number,\r\n    cardRelVelocity: number\r\n\r\n}\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    // controls: OrbitControls\r\n    scene: THREE.Scene\r\n    stats: Stats\r\n    // controls: OrbitControls\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraZPosition: number\r\n    // cameraLootAtController: DampingVector3Controller\r\n    // cameraTargetPosition: THREE.Vector3\r\n    // cameraWithMouseRotateFactor: number\r\n    // cameraWithMouseMoveFactor: number\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectObjs: Array<THREE.Object3D>\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    // card controllers\r\n    cards: Array<Card>\r\n    cardGroup: THREE.Group\r\n    configs: FrontPageConfigs\r\n    cardGroupStatus: number\r\n\r\n    pickedCardIndex: number\r\n    onCardFocus: ((index: number) => any) | undefined\r\n    onCardRouteJump: ((url: string) => any) | undefined\r\n\r\n    constructor(_container: HTMLElement,\r\n        cardInfos: Array<CardInfo>,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void,\r\n        onCardFocus?: (index: number) => any,\r\n        onCardRouteJump?: (url: string) => any,\r\n        configs: FrontPageConfigs = {\r\n            cardSizeX: 70,\r\n            cardSizeY: 50,\r\n            cardHelixRadius: 80,\r\n            cardHelixZGap: 10,\r\n            cardHelixRotateRadGap: 0.3,\r\n            cardHelixFocusRadius: 100,\r\n            cardHelixFocusRotateRadGap: 0.5,\r\n            cardMomentum: 0.85,\r\n            cardAttraction: 0.36,\r\n            cardRelVelocity: 0.16,\r\n        },\r\n        ) {\r\n        const self = this\r\n\r\n        // *********** basic settings ***********\r\n        this.cameraZPosition = 500\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        this.renderer.shadowMap.enabled = true\r\n        this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.camera.position.set(0, 300, 350)\r\n        this.camera.lookAt(new THREE.Vector3(0))\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n\r\n        // loading manager\r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n                this.stackCard()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n\r\n        // *********** background & env ***********\r\n        const r = './cube1/'\r\n        const urls = [\r\n            r + 'px.jpg', r + 'nx.jpg',\r\n            r + 'py.jpg', r + 'ny.jpg',\r\n            r + 'pz.jpg', r + 'nz.jpg'\r\n        ]\r\n        const textureCube = new THREE.CubeTextureLoader(this.loadingManager).load( urls )\r\n        textureCube.mapping = THREE.CubeRefractionMapping\r\n        this.scene.background = textureCube\r\n        this.scene.environment = textureCube\r\n        \r\n        // light\r\n        const light = new THREE.DirectionalLight(0xffffff)\r\n        light.position.set(0, 500, 0)\r\n        light.castShadow = true\r\n        light.shadow.camera.left = -150\r\n        light.shadow.camera.right = 150\r\n        light.shadow.camera.bottom = -150\r\n        light.shadow.camera.top = 150\r\n        light.shadow.camera.near = 10\r\n        light.shadow.camera.far = 511\r\n        light.shadow.mapSize.width = 1024\r\n        light.shadow.mapSize.height = 1024\r\n        light.shadow.bias = -0.0001\r\n        this.scene.add(light)\r\n        // this.scene.add( new THREE.CameraHelper( light.shadow.camera ) )\r\n\r\n\r\n        // *********** floor ***********\r\n        const floorGeometry = new THREE.PlaneGeometry( 1000, 1000 )\r\n        const floor = new THREE.Mesh( floorGeometry,\r\n            new THREE.MeshPhongMaterial({\r\n                color: 0x606060\r\n            })\r\n        )\r\n        floor.castShadow = false\r\n        floor.receiveShadow = true\r\n        floor.position.y = -10;\r\n        // floor.position.z -= 500;\r\n        floor.rotation.x = Math.PI * - 0.5;\r\n        this.scene.add( floor );\r\n        \r\n        // *********** cards ***********\r\n        this.intersectObjs = []\r\n        this.cardGroup = new THREE.Group()\r\n        this.cards = []\r\n        this.configs = configs\r\n        const cardGeom = new THREE.PlaneGeometry(70, 50)\r\n        cardInfos.forEach((cardInfo, cardIndex) => {\r\n            const card =  new Card(\r\n                    new THREE.Mesh(cardGeom, new THREE.MeshPhongMaterial(\r\n                        {\r\n                            side: THREE.DoubleSide\r\n                        }\r\n                    )),\r\n                    cardInfo,\r\n                    new CardController(\r\n                        cardIndex, 200, cardIndex * 50 + 250,\r\n                        this.configs.cardMomentum,\r\n                        this.configs.cardAttraction,\r\n                        this.configs.cardRelVelocity\r\n                    )\r\n                )\r\n            card.mesh.castShadow = true\r\n            card.mesh.receiveShadow = true\r\n            this.cards.push(card)\r\n            this.cardGroup.add(card.mesh)\r\n            this.intersectObjs.push(card.mesh)\r\n        })\r\n        this.cardGroup.rotation.x = Math.PI / 2\r\n        this.scene.add(this.cardGroup)\r\n\r\n        this.pickedCardIndex = 0\r\n        this.cardGroupStatus = 0\r\n        this.onCardFocus = onCardFocus\r\n        this.onCardRouteJump = onCardRouteJump\r\n\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        \r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n        window.addEventListener( 'resize', e => {self.onWindowResize()} )\r\n        window.addEventListener( 'wheel', e => {self.onMouseWheel(e)} )\r\n        window.addEventListener('mousemove', e => { self.onMouseMove(e) })\r\n        window.addEventListener( 'click', e => {self.onClick(e)} )\r\n\r\n        // *********** final animate ***********\r\n        this.animate()\r\n    }\r\n\r\n    animate = () => {\r\n        requestAnimationFrame( this.animate )\r\n        // damping controllers\r\n        // this.updatecornerObject()\r\n        // this.updateCamera()\r\n        this.cards.forEach(card => {\r\n            card.updateByController()\r\n        })\r\n        this.render()\r\n        this.stats.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render ()\r\n    {\r\n        this.renderer.render(this.scene, this.camera)\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize () {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    onMouseWheel (e: WheelEvent) {\r\n        if (this.cardGroupStatus == 2) {\r\n            if (e.deltaY > 0) {\r\n                if (this.pickedCardIndex < this.cards.length - 1) {\r\n                    this.pickedCardIndex ++\r\n                }\r\n            } else {\r\n                if (this.pickedCardIndex > 0) {\r\n                    this.pickedCardIndex --\r\n                }\r\n            }\r\n            this.pickCard(this.pickedCardIndex)\r\n        }\r\n    }\r\n    \r\n    onMouseMove (e: MouseEvent) {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        // this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        // const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        // if (intersects.length == 1) {\r\n        //     console.log('intersected:', intersects[0])\r\n        // }\r\n    }\r\n\r\n    onClick (e: MouseEvent) {\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        if (intersects.length >= 1) {\r\n            if (this.cardGroupStatus == 0) {\r\n                this.cardGroupStatus = 1\r\n                this.fanCard()\r\n            } else {\r\n                // get index of clicked card\r\n                var clickedCardIndex = 0\r\n                for (; clickedCardIndex < this.cards.length; clickedCardIndex++) {\r\n                    if (intersects[0].object == this.cards[clickedCardIndex].mesh) {\r\n                        break\r\n                    }\r\n                }\r\n                if (this.cardGroupStatus == 1) {\r\n                    this.cardGroupStatus = 2\r\n                    this.pickCard(clickedCardIndex)\r\n                    this.pickedCardIndex = clickedCardIndex\r\n                } else if (this.cardGroupStatus == 2) {\r\n                    if (this.pickedCardIndex == clickedCardIndex) {\r\n                        // focus on card (jump to related url later)\r\n                        this.cardGroupStatus = 3\r\n                        this.focusOnCard(this.pickedCardIndex)\r\n                    } else {\r\n                        this.pickCard(clickedCardIndex)\r\n                        this.pickedCardIndex = clickedCardIndex\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            if (this.cardGroupStatus == 3) {\r\n                this.cardGroupStatus = 2\r\n                this.pickCard(this.pickedCardIndex)\r\n            } else  if (this.cardGroupStatus == 2) {\r\n                this.cardGroupStatus = 1\r\n                this.fanCard()\r\n            } else if (this.cardGroupStatus == 1) {\r\n                this.cardGroupStatus = 0\r\n                this.stackCard()\r\n            }\r\n        }\r\n    }\r\n\r\n    stackCard () {\r\n        this.cards.forEach((card, index) => {\r\n            card.controller.angleTarget = 0\r\n            card.controller.radiusTarget = 0\r\n            card.controller.zTarget = index * 2\r\n        })\r\n    }\r\n\r\n    pickCard (index: number) {\r\n        /**\r\n         * focus on a single card by pulling it out a little bit\r\n         */\r\n        if (index < 0 || index > this.cards.length - 1) {\r\n            return\r\n        }\r\n        for (let i = index - 1; i >= 0; i--) {\r\n            let card = this.cards[i]\r\n            card.controller.angleTarget = \r\n                (i - index) * this.configs.cardHelixRotateRadGap\r\n                - (this.configs.cardHelixFocusRotateRadGap - this.configs.cardHelixRotateRadGap)\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * i\r\n        }\r\n        for (let i = index + 1; i < this.cards.length; i++) {\r\n            let card = this.cards[i]\r\n            card.controller.angleTarget = \r\n                (i - index) * this.configs.cardHelixRotateRadGap\r\n                + (this.configs.cardHelixFocusRotateRadGap - this.configs.cardHelixRotateRadGap)\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * i\r\n        }\r\n        let card = this.cards[index]\r\n        card.controller.angleTarget = 0\r\n        card.controller.radiusTarget = this.configs.cardHelixFocusRadius\r\n        card.controller.zTarget = this.configs.cardHelixZGap * index\r\n        \r\n        if (this.onCardFocus) {\r\n            this.onCardFocus(index)\r\n        }\r\n    }\r\n\r\n    fanCard () {\r\n        this.cards.forEach((card, index) => {\r\n            card.controller.angleTarget = (index + 0.5 - this.cards.length/2) * this.configs.cardHelixRotateRadGap\r\n            card.controller.radiusTarget = this.configs.cardHelixRadius\r\n            card.controller.zTarget = this.configs.cardHelixZGap * index\r\n        })\r\n    }\r\n\r\n    focusOnCard (focusIndex: number) {\r\n        this.cards.forEach((card, index) => {\r\n            if (focusIndex == index) {\r\n                card.controller.radiusTarget = 0\r\n                card.controller.zTarget = 10\r\n            } else {\r\n                card.controller.radiusTarget = 500\r\n            }\r\n        })\r\n        // while (true) {\r\n        //     if (this.cards[focusIndex].controller.isAlmostStatic == false) {\r\n        //         console.log('url jumps to: ', this.cards[focusIndex].info.url)\r\n        //         break\r\n        //     }\r\n        // }\r\n    }\r\n\r\n    pauseScene () {\r\n\r\n    }\r\n    resumeScene () {\r\n\r\n    }\r\n\r\n    \r\n}\r\n\r\n\r\nexport {\r\n    CardInfo,\r\n    FrontPageManager\r\n}","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { CardInfo, FrontPageManager } from '../scripts/FrontPage3.0'\r\n\r\ntype Data = {\r\n    fpm: FrontPageManager | null,\r\n    loadingStat: {\r\n        loaded: number,\r\n        total: number,\r\n        isLoaded: boolean,\r\n        noLoadingStat: boolean\r\n    },\r\n    cardInfos: Array<CardInfo>\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            fpm: null,\r\n            loadingStat: {\r\n                loaded: 0,\r\n                total: 1,\r\n                isLoaded: false,\r\n                noLoadingStat: false\r\n            },\r\n            cardInfos: new Array<CardInfo>()\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this\r\n        for (let i = 0; i < 10; i++) {\r\n            this.cardInfos.push(\r\n                {\r\n                    imgUrl: '',\r\n                    url: 'fakeUrl_' + i\r\n                }\r\n            )\r\n        }\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.fpm = new FrontPageManager(\r\n                this.$refs['canvas-container'],\r\n                this.cardInfos,\r\n                () => {\r\n                    console.log('loaded')\r\n                    self.loadingStat.isLoaded = true\r\n                    setTimeout(() => {\r\n                        self.loadingStat.noLoadingStat = true\r\n                    }, 501)\r\n                },\r\n                (_, loaded, total) => {\r\n                    this.loadingStat.loaded = loaded\r\n                    this.loadingStat.total = total\r\n                },\r\n                (url) => {\r\n                    console.error('failed to load asset: ' + url)\r\n                    self.loadingStat.isLoaded = true\r\n                },\r\n                (index) => {\r\n                    console.log('focused on card: ', index)\r\n                }\r\n            )\r\n            // if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n            //     this.fpm.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-200, 200, 0))\r\n            // }\r\n        }\r\n    },\r\n    methods: {\r\n        onGlassClick() {\r\n            alert('glass clicked!')\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeFrontpageTest2.vue?vue&type=template&id=1d273790&scoped=true&\"\nimport script from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=1d273790&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"1d273790\",\n  null\n  \n)\n\nexport default component.exports","var $ = require('../internals/export');\nvar sign = require('../internals/math-sign');\n\n// `Math.sign` method\n// https://tc39.es/ecma262/#sec-math.sign\n$({ target: 'Math', stat: true }, {\n  sign: sign\n});\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=1d273790&scoped=true&lang=css&\"","// `Math.sign` method implementation\n// https://tc39.es/ecma262/#sec-math.sign\n// eslint-disable-next-line es/no-math-sign -- safe\nmodule.exports = Math.sign || function sign(x) {\n  // eslint-disable-next-line no-self-compare -- NaN check\n  return (x = +x) == 0 || x != x ? x : x < 0 ? -1 : 1;\n};\n"],"sourceRoot":""}