(window["webpackJsonp"]=window["webpackJsonp"]||[]).push([["chunk-e59f6236"],{"08fd":function(e,t,r){var n={"./GlassFrontShader/F.glsl":"f430"};function a(e){var t=o(e);return r(t)}function o(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=o,e.exports=a,a.id="08fd"},1148:function(e,t,r){"use strict";var n=r("da84"),a=r("5926"),o=r("577e"),i=r("1d80"),s=n.RangeError;e.exports=function(e){var t=o(i(this)),r="",n=a(e);if(n<0||n==1/0)throw s("Wrong number of repetitions");for(;n>0;(n>>>=1)&&(t+=t))1&n&&(r+=t);return r}},"25ae":function(e,t,r){"use strict";r.d(t,"a",(function(){return a}));var n=r("5a89");class a extends n["M"]{constructor(e){super(e),this.debug=!1,this.group=null,this.materials=[],this.meshes=[]}load(e,t,r,a){const o=this,i=""===this.path?n["N"].extractUrlBase(e):this.path,s=new n["z"](this.manager);s.setPath(this.path),s.setResponseType("arraybuffer"),s.setRequestHeader(this.requestHeader),s.setWithCredentials(this.withCredentials),s.load(e,(function(r){try{t(o.parse(r,i))}catch(n){a?a(n):console.error(n),o.manager.itemError(e)}}),r,a)}parse(e,t){this.group=new n["D"],this.materials=[],this.meshes=[],this.readFile(e,t);for(let r=0;r<this.meshes.length;r++)this.group.add(this.meshes[r]);return this.group}readFile(e,t){const r=new DataView(e),n=new o(r,0,this.debugMessage);if(n.id===s||n.id===l||n.id===i){let e=n.readChunk();while(e){if(e.id===c){const t=e.readDWord();this.debugMessage("3DS file version: "+t)}else e.id===m?this.readMeshData(e,t):this.debugMessage("Unknown main chunk: "+e.hexId);e=n.readChunk()}}this.debugMessage("Parsed "+this.meshes.length+" meshes")}readMeshData(e,t){let r=e.readChunk();while(r){if(r.id===p){const e=+r.readDWord();this.debugMessage("Mesh Version: "+e)}else if(r.id===b){const e=r.readFloat();this.debugMessage("Master scale: "+e),this.group.scale.set(e,e,e)}else r.id===N?(this.debugMessage("Named Object"),this.readNamedObject(r)):r.id===x?(this.debugMessage("Material"),this.readMaterialEntry(r,t)):this.debugMessage("Unknown MDATA chunk: "+r.hexId);r=e.readChunk()}}readNamedObject(e){const t=e.readString();let r=e.readChunk();while(r){if(r.id===A){const e=this.readMesh(r);e.name=t,this.meshes.push(e)}else this.debugMessage("Unknown named object chunk: "+r.hexId);r=e.readChunk()}}readMaterialEntry(e,t){let r=e.readChunk();const a=new n["Y"];while(r){if(r.id===y)a.name=r.readString(),this.debugMessage("   Name: "+a.name);else if(r.id===_)this.debugMessage("   Wireframe"),a.wireframe=!0;else if(r.id===R){const e=r.readByte();a.wireframeLinewidth=e,this.debugMessage("   Wireframe Thickness: "+e)}else if(r.id===F)a.side=n["t"],this.debugMessage("   DoubleSided");else if(r.id===P)this.debugMessage("   Additive Blending"),a.blending=n["b"];else if(r.id===M)this.debugMessage("   Diffuse Color"),a.color=this.readColor(r);else if(r.id===C)this.debugMessage("   Specular Color"),a.specular=this.readColor(r);else if(r.id===w)this.debugMessage("   Ambient color"),a.color=this.readColor(r);else if(r.id===k){const e=this.readPercentage(r);a.shininess=100*e,this.debugMessage("   Shininess : "+e)}else if(r.id===D){const e=this.readPercentage(r);a.opacity=1-e,this.debugMessage("  Transparency : "+e),a.transparent=a.opacity<1}else r.id===j?(this.debugMessage("   ColorMap"),a.map=this.readMap(r,t)):r.id===S?(this.debugMessage("   BumpMap"),a.bumpMap=this.readMap(r,t)):r.id===O?(this.debugMessage("   OpacityMap"),a.alphaMap=this.readMap(r,t)):r.id===T?(this.debugMessage("   SpecularMap"),a.specularMap=this.readMap(r,t)):this.debugMessage("   Unknown material chunk: "+r.hexId);r=e.readChunk()}this.materials[a.name]=a}readMesh(e){let t=e.readChunk();const r=new n["h"],a=new n["Y"],o=new n["U"](r,a);o.name="mesh";while(t){if(t.id===E){const e=t.readWord();this.debugMessage("   Vertex: "+e);const a=[];for(let r=0;r<e;r++)a.push(t.readFloat()),a.push(t.readFloat()),a.push(t.readFloat());r.setAttribute("position",new n["A"](a,3))}else if(t.id===G)this.readFaceArray(t,o);else if(t.id===L){const e=t.readWord();this.debugMessage("   UV: "+e);const a=[];for(let r=0;r<e;r++)a.push(t.readFloat()),a.push(t.readFloat());r.setAttribute("uv",new n["A"](a,2))}else if(t.id===H){this.debugMessage("   Tranformation Matrix (TODO)");const e=[];for(let r=0;r<12;r++)e[r]=t.readFloat();const a=new n["T"];a.elements[0]=e[0],a.elements[1]=e[6],a.elements[2]=e[3],a.elements[3]=e[9],a.elements[4]=e[2],a.elements[5]=e[8],a.elements[6]=e[5],a.elements[7]=e[11],a.elements[8]=e[1],a.elements[9]=e[7],a.elements[10]=e[4],a.elements[11]=e[10],a.elements[12]=0,a.elements[13]=0,a.elements[14]=0,a.elements[15]=1,a.transpose();const i=new n["T"];i.copy(a).invert(),r.applyMatrix4(i),a.decompose(o.position,o.quaternion,o.scale)}else this.debugMessage("   Unknown mesh chunk: "+t.hexId);t=e.readChunk()}return r.computeVertexNormals(),o}readFaceArray(e,t){const r=e.readWord();this.debugMessage("   Faces: "+r);const n=[];for(let i=0;i<r;++i)n.push(e.readWord(),e.readWord(),e.readWord()),e.readWord();t.geometry.setIndex(n);let a=0,o=0;while(!e.endOfChunk){const r=e.readChunk();if(r.id===V){this.debugMessage("      Material Group");const e=this.readMaterialGroup(r),n=3*e.index.length;t.geometry.addGroup(o,n,a),o+=n,a++;const i=this.materials[e.name];!1===Array.isArray(t.material)&&(t.material=[]),void 0!==i&&t.material.push(i)}else this.debugMessage("      Unknown face array chunk: "+r.hexId)}1===t.material.length&&(t.material=t.material[0])}readMap(e,t){let r=e.readChunk(),a={};const o=new n["Ab"](this.manager);o.setPath(this.resourcePath||t).setCrossOrigin(this.crossOrigin);while(r){if(r.id===z){const e=r.readString();a=o.load(e),this.debugMessage("      File: "+t+e)}else r.id===I?(a.offset.x=r.readFloat(),this.debugMessage("      OffsetX: "+a.offset.x)):r.id===B?(a.offset.y=r.readFloat(),this.debugMessage("      OffsetY: "+a.offset.y)):r.id===W?(a.repeat.x=r.readFloat(),this.debugMessage("      RepeatX: "+a.repeat.x)):r.id===U?(a.repeat.y=r.readFloat(),this.debugMessage("      RepeatY: "+a.repeat.y)):this.debugMessage("      Unknown map chunk: "+r.hexId);r=e.readChunk()}return a}readMaterialGroup(e){const t=e.readString(),r=e.readWord();this.debugMessage("         Name: "+t),this.debugMessage("         Faces: "+r);const n=[];for(let a=0;a<r;++a)n.push(e.readWord());return{name:t,index:n}}readColor(e){const t=e.readChunk(),r=new n["m"];if(t.id===u||t.id===h){const e=t.readByte(),n=t.readByte(),a=t.readByte();r.setRGB(e/255,n/255,a/255),this.debugMessage("      Color: "+r.r+", "+r.g+", "+r.b)}else if(t.id===d||t.id===f){const e=t.readFloat(),n=t.readFloat(),a=t.readFloat();r.setRGB(e,n,a),this.debugMessage("      Color: "+r.r+", "+r.g+", "+r.b)}else this.debugMessage("      Unknown color chunk: "+t.hexId);return r}readPercentage(e){const t=e.readChunk();switch(t.id){case v:return t.readShort()/100;case g:return t.readFloat();default:return this.debugMessage("      Unknown percentage chunk: "+t.hexId),0}}debugMessage(e){this.debug&&console.log(e)}}class o{constructor(e,t,r){this.data=e,this.offset=t,this.position=t,this.debugMessage=r,this.debugMessage instanceof Function&&(this.debugMessage=function(){}),this.id=this.readWord(),this.size=this.readDWord(),this.end=this.offset+this.size,this.end>e.byteLength&&this.debugMessage("Bad chunk size for chunk at "+t)}readChunk(){if(this.endOfChunk)return null;try{const e=new o(this.data,this.position,this.debugMessage);return this.position+=e.size,e}catch(e){return this.debugMessage("Unable to read chunk at "+this.position),null}}get hexId(){return this.id.toString(16)}get endOfChunk(){return this.position>=this.end}readByte(){const e=this.data.getUint8(this.position,!0);return this.position+=1,e}readFloat(){try{const e=this.data.getFloat32(this.position,!0);return this.position+=4,e}catch(e){return this.debugMessage(e+" "+this.position+" "+this.data.byteLength),0}}readInt(){const e=this.data.getInt32(this.position,!0);return this.position+=4,e}readShort(){const e=this.data.getInt16(this.position,!0);return this.position+=2,e}readDWord(){const e=this.data.getUint32(this.position,!0);return this.position+=4,e}readWord(){const e=this.data.getUint16(this.position,!0);return this.position+=2,e}readString(){let e="",t=this.readByte();while(t)e+=String.fromCharCode(t),t=this.readByte();return e}}const i=19789,s=15786,l=49725,c=2,d=16,u=17,h=18,f=19,v=48,g=49,m=15677,p=15678,b=256,x=45055,y=40960,w=40976,M=40992,C=41008,k=41024,D=41040,F=41089,P=41091,_=41093,R=41095,j=41472,O=41488,S=41520,T=41476,z=41728,W=41812,U=41814,I=41816,B=41818,N=16384,A=16640,E=16656,G=16672,V=16688,L=16704,H=16736},"38cf":function(e,t,r){var n=r("23e7"),a=r("1148");n({target:"String",proto:!0},{repeat:a})},5303:function(e,t,r){var n={"./GlassFrontShader/V.glsl":"c444"};function a(e){var t=o(e);return r(t)}function o(e){if(!r.o(n,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return n[e]}a.keys=function(){return Object.keys(n)},a.resolve=o,e.exports=a,a.id="5303"},7612:function(e,t,r){"use strict";r.d(t,"a",(function(){return i}));var n=r("5a89");const a=new n["Gb"];function o(e,t,r,n,o,i){const s=2*Math.PI*o/4,l=Math.max(i-2*o,0),c=Math.PI/4;a.copy(t),a[n]=0,a.normalize();const d=.5*s/(s+l),u=1-a.angleTo(e)/c;if(1===Math.sign(a[r]))return u*d;{const e=l/(s+l);return e+d+d*(1-u)}}class i extends n["g"]{constructor(e=1,t=1,r=1,a=2,i=.1){if(a=2*a+1,i=Math.min(e/2,t/2,r/2,i),super(1,1,1,a,a,a),1===a)return;const s=this.toNonIndexed();this.index=null,this.attributes.position=s.attributes.position,this.attributes.normal=s.attributes.normal,this.attributes.uv=s.attributes.uv;const l=new n["Gb"],c=new n["Gb"],d=new n["Gb"](e,t,r).divideScalar(2).subScalar(i),u=this.attributes.position.array,h=this.attributes.normal.array,f=this.attributes.uv.array,v=u.length/6,g=new n["Gb"],m=.5/a;for(let n=0,p=0;n<u.length;n+=3,p+=2){l.fromArray(u,n),c.copy(l),c.x-=Math.sign(c.x)*m,c.y-=Math.sign(c.y)*m,c.z-=Math.sign(c.z)*m,c.normalize(),u[n+0]=d.x*Math.sign(l.x)+c.x*i,u[n+1]=d.y*Math.sign(l.y)+c.y*i,u[n+2]=d.z*Math.sign(l.z)+c.z*i,h[n+0]=c.x,h[n+1]=c.y,h[n+2]=c.z;const a=Math.floor(n/v);switch(a){case 0:g.set(1,0,0),f[p+0]=o(g,c,"z","y",i,r),f[p+1]=1-o(g,c,"y","z",i,t);break;case 1:g.set(-1,0,0),f[p+0]=1-o(g,c,"z","y",i,r),f[p+1]=1-o(g,c,"y","z",i,t);break;case 2:g.set(0,1,0),f[p+0]=1-o(g,c,"x","z",i,e),f[p+1]=o(g,c,"z","x",i,r);break;case 3:g.set(0,-1,0),f[p+0]=1-o(g,c,"x","z",i,e),f[p+1]=1-o(g,c,"z","x",i,r);break;case 4:g.set(0,0,1),f[p+0]=1-o(g,c,"x","y",i,e),f[p+1]=1-o(g,c,"y","x",i,t);break;case 5:g.set(0,0,-1),f[p+0]=o(g,c,"x","y",i,e),f[p+1]=1-o(g,c,"y","x",i,t);break}}}}},"7d52":function(e,t,r){"use strict";r.d(t,"b",(function(){return x})),r.d(t,"a",(function(){return y})),r.d(t,"c",(function(){return w}));var n=r("3835"),a=r("bee2"),o=r("d4ec"),i=r("ade3"),s=(r("d3b7"),r("159b"),r("38cf"),r("5a89")),l=r("4721"),c=r("7612");function d(e){try{var t=r("5303")("./"+e+"/V.glsl"),n=r("08fd")("./"+e+"/F.glsl");return[t,n]}catch(a){return console.error("failed to fetch shader",a),["",""]}}var u,h,f,v,g,m,p,b=r("61d9"),x=Object(a["a"])((function e(t,r,a,l,c,u,h,f,v,g){if(Object(o["a"])(this,e),Object(i["a"])(this,"mesh",void 0),Object(i["a"])(this,"originalMaterial",void 0),Object(i["a"])(this,"refractionMaterial",void 0),Object(i["a"])(this,"backColor",void 0),Object(i["a"])(this,"refractionMaterialUniforms",void 0),this.mesh=r,this.mesh["refractionObject"]=this,this.mesh.material instanceof Array){this.originalMaterial=new Array;for(var m=0;m<this.mesh.material.length;m++)this.originalMaterial.push(this.mesh.material[m].clone())}else this.originalMaterial=this.mesh.material.clone();this.backColor=h,this.refractionMaterialUniforms={resolution:{value:a},tBackground:{value:l},tBackDepth:{value:u},tDisplayImage:{value:c},tSkybox:{value:t.environment},refractionFactor:{value:v},opacity:{value:g},absorbColor:{value:new s["m"](f)},objectCenter:{value:r.position}};var p=d("GlassFrontShader"),b=Object(n["a"])(p,2),x=b[0],y=b[1];this.refractionMaterial=new s["rb"]({vertexShader:x,fragmentShader:y,uniforms:this.refractionMaterialUniforms,side:s["C"]})})),y=function(){function e(t,r,n,a){var l=arguments.length>4&&void 0!==arguments[4]?arguments[4]:512;Object(o["a"])(this,e),Object(i["a"])(this,"container",void 0),Object(i["a"])(this,"backgroundScene",void 0),Object(i["a"])(this,"renderer",void 0),Object(i["a"])(this,"camera",void 0),Object(i["a"])(this,"frontScene",void 0),Object(i["a"])(this,"backdepthTexture",void 0),Object(i["a"])(this,"backRenderTarget",void 0),Object(i["a"])(this,"refractionObjectList",void 0),Object(i["a"])(this,"suResolution",void 0),this.container=r,this.backgroundScene=t,this.renderer=n,this.camera=a,this.frontScene=new s["pb"],this.backdepthTexture=new s["r"](l,l,s["B"]),this.backRenderTarget=new s["Kb"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio),this.backRenderTarget.depthBuffer=!0,this.backRenderTarget.depthTexture=this.backdepthTexture,this.backRenderTarget.depthTexture.type=s["Eb"],this.frontScene.background=this.backRenderTarget.texture,this.frontScene.environment=this.backgroundScene.environment,this.refractionObjectList=[],this.suResolution=new s["Fb"](this.container.offsetWidth*window.devicePixelRatio,this.container.offsetHeight*window.devicePixelRatio)}return Object(a["a"])(e,[{key:"genFresnelMaterial",value:function(e){var t=s["qb"].lib["fresnel"],r=s["Db"].clone(t.uniforms);r["tCube"].value=e;var n={fragmentShader:t.fragmentShader,vertexShader:t.vertexShader,uniforms:r},a=new s["rb"](n);return a}},{key:"addRefractionMesh",value:function(e){var t=!(arguments.length>1&&void 0!==arguments[1])||arguments[1],r=arguments.length>2?arguments[2]:void 0,n=arguments.length>3&&void 0!==arguments[3]?arguments[3]:16777215,a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:1.49,i=arguments.length>6&&void 0!==arguments[6]?arguments[6]:.2,l=new s["m"](n);t&&(e.material=new s["Z"]({color:l,transparent:!0,opacity:.5,metalness:1,reflectivity:0,roughness:0,side:s["e"]})),this.refractionObjectList.push(new x(this.backgroundScene,e,this.suResolution,this.backRenderTarget.texture,r,this.backRenderTarget.depthTexture,l,a,o,i)),this.backgroundScene.add(e)}},{key:"onWindowResize",value:function(){this.suResolution.x=this.container.offsetWidth*window.devicePixelRatio,this.suResolution.y=this.container.offsetHeight*window.devicePixelRatio}},{key:"render",value:function(){var e=this;this.refractionObjectList.forEach((function(t){t.mesh.material=t.refractionMaterial,e.frontScene.add(t.mesh)})),this.renderer.setRenderTarget(null),this.renderer.render(this.frontScene,this.camera),this.refractionObjectList.forEach((function(t){t.mesh.material=t.originalMaterial,e.backgroundScene.add(t.mesh)}))}}]),e}();function w(e){u=e,f=new s["db"](45,window.innerWidth/window.innerHeight,1,5e3),f.position.set(30,20,200),f.lookAt(0,0,0),m=new s["pb"],h=new s["Lb"]({antialias:!0,alpha:!0}),h.setClearColor(16777215),h.setPixelRatio(window.devicePixelRatio),h.setSize(window.innerWidth,window.innerHeight),u.appendChild(h.domElement),v=new l["a"](f,u),u.style.position="absolute",u.style.top="0px",u.style.left="0px",g=new b["Stats"],g.domElement.style.zIndex="100",u.appendChild(g.domElement);var t="./cube/",r=[t+"px.jpg",t+"nx.jpg",t+"py.jpg",t+"ny.jpg",t+"pz.jpg",t+"nz.jpg"],n=(new s["o"]).load(r);n.mapping=s["n"],m.background=n,m.environment=n;var a=new s["s"];a.position.x=300,a.position.y=200,a.position.z=100,m.add(a);var o=(new s["Ab"]).load("./checkerboard.jpg");o.wrapS=o.wrapT=s["nb"],o.repeat.set(10,10);var i=new s["V"]({map:o,side:s["t"]}),d=new s["gb"](1e3,1e3,1,1),x=new s["U"](d,i);x.position.y-=20.1,x.rotation.x=Math.PI/2,p=new y(m,u,h,f);var w=new s["U"](new c["a"](40,40,40,5,5),new s["Y"]({}));w.position.x-=40;var k=new s["U"](new s["vb"](20),new s["Y"]({})),D=new s["U"](new s["q"](20,20,80,36),new s["Y"]({}));D.position.x+=40,D.position.y+=20,p.addRefractionMesh(w,!0,null,0,0),p.addRefractionMesh(k,!0,null,24576,24576),p.addRefractionMesh(D,!0,null,1587,1587);var F=new s["U"](new s["vb"](20),new s["Y"]({color:16711680}));F.position.copy(w.position),F.position.z-=50,m.add(F),window.addEventListener("resize",M),C()}function M(){f.aspect=window.innerWidth/window.innerHeight,f.updateProjectionMatrix(),p.onWindowResize(),h.setSize(window.innerWidth,window.innerHeight)}function C(){requestAnimationFrame(C),k(),v.update(),g.update()}function k(){p.render()}},c444:function(e,t){e.exports="varying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\n// varying vec3 vRefract;\r\n// varying vec2 vRefractOffset;\r\nvarying vec4 vImageUVCenter;\r\n\r\nuniform vec3 objectCenter;\r\n\r\n\r\nvoid main() {\r\n    vWorldPosition = modelMatrix * vec4( position, 1.0 );\r\n    vec4 mvPosition = viewMatrix * vWorldPosition;\r\n    gl_Position = projectionMatrix * mvPosition;\r\n    vUv = uv;\r\n\r\n    vNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\r\n    vCameraPosition = cameraPosition;\r\n\r\n    vProjectionMatrix = projectionMatrix * modelViewMatrix;\r\n    vImageUVCenter = vProjectionMatrix * vec4( objectCenter, 1.0 );\r\n}\r\n"},f430:function(e,t){e.exports="uniform vec2 resolution;\r\nuniform sampler2D tBackground;\r\nuniform sampler2D tBackDepth;\r\nuniform sampler2D tDisplayImage;\r\n\r\nuniform samplerCube tSkybox;\r\nuniform vec3 absorbColor;\r\nuniform float refractionFactor;\r\nuniform float opacity;\r\n\r\nvarying vec2 vUv;\r\nvarying vec3 vNormal;\r\nvarying vec3 vCameraPosition;\r\nvarying vec4 vWorldPosition;\r\nvarying mat4 vProjectionMatrix;\r\nvarying vec4 vImageUVCenter;\r\n\r\nfloat near = 0.1;\r\nfloat far  = 5000.0;\r\n\r\nfloat LinearizeDepth(float depth) \r\n{\r\n    float z = depth * 2.0 - 1.0; // back to NDC \r\n    return (2.0 * near * far) / (far + near - z * (far - near));\t\r\n}\r\n\r\nvoid main() {\r\n\r\n    // gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\r\n    // return;\r\n    float backDepth = float(texture2D( tBackDepth, vec2( gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y ) ).x);\r\n    float frontDepth = gl_FragCoord.z;\r\n\r\n    if (frontDepth > backDepth) {\r\n        discard;\r\n    }\r\n\r\n    float backDepthlinear = LinearizeDepth(backDepth);\r\n    float frontDepthlinear = LinearizeDepth(frontDepth);\r\n    \r\n    float backToFrontDepth = backDepthlinear - frontDepthlinear;\r\n    backToFrontDepth *= 0.5;\r\n    \r\n    vec3 vCameraRay = vWorldPosition.xyz / vWorldPosition.w - vCameraPosition;\r\n    vCameraRay = normalize(vCameraRay);\r\n    vec3 vRefract = refract( vCameraRay, vNormal, 1.0 / refractionFactor );\r\n    vec4 vOriginalPos = vWorldPosition + vec4(vCameraRay, 0.0);\r\n    vec4 vRefractedPos = vWorldPosition + vec4(vRefract, 0.0);\r\n    // vRefractedPos = vOriginalPos; //vWorldPosition + vec4(vRefract, 0.0);\r\n    vec4 vOriginalProjectedPos = vProjectionMatrix * vOriginalPos;\r\n    vec4 vRefractedProjectedPos = vProjectionMatrix * vRefractedPos;\r\n    vec2 offset = normalize(vRefractedProjectedPos - vOriginalProjectedPos).xy;\r\n    offset = normalize(offset);\r\n\r\n    // reflect\r\n    vec3 vReflect = reflect( vCameraRay, vNormal );\r\n    vec3 refCol = vec3(textureCube(tSkybox, vReflect));\r\n\r\n    // snell's law\r\n    float cosTheta1 = dot(vCameraRay, vNormal);\r\n    float sinTheta1 = 1.0 - cosTheta1 * cosTheta1;\r\n    float sinTheta2 = sinTheta1 / refractionFactor;\r\n    float theta2 = asin(sinTheta2);\r\n    offset *= sinTheta2;\r\n    offset *= 100.0;\r\n\r\n    offset /= backDepth;\r\n\r\n    float samplePointX_r = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.9) / resolution.x;\r\n    float samplePointY_r = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.9) / resolution.y;\r\n\r\n    float samplePointX_g = (gl_FragCoord.x + backToFrontDepth * offset.x * 0.95) / resolution.x;\r\n    float samplePointY_g = (gl_FragCoord.y + backToFrontDepth * offset.y * 0.95) / resolution.y;\r\n\r\n    float samplePointX_b = (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x;\r\n    float samplePointY_b = (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y;\r\n    \r\n    float backColor_r = texture2D( tBackground, vec2( samplePointX_r, samplePointY_r ) * 1.0 ).x;\r\n    float backColor_g = texture2D( tBackground, vec2( samplePointX_g, samplePointY_g ) * 1.0 ).y;\r\n    float backColor_b = texture2D( tBackground, vec2( samplePointX_b, samplePointY_b ) * 1.0 ).z;\r\n\r\n    vec3 backColor = vec3(backColor_r, backColor_g, backColor_b);\r\n    vec3 absorbColor = absorbColor * sqrt(backToFrontDepth) * opacity;\r\n    float sqrtDepth = sqrt(backToFrontDepth) * opacity;\r\n    float absorbFactor = sqrtDepth / (1.0 + sqrtDepth);\r\n    vec3 refractCol = mix(backColor, absorbColor, absorbFactor);\r\n\r\n    // backColor = texture2D( tBackground, vec2( (gl_FragCoord.x + backToFrontDepth * offset.x) / resolution.x, (gl_FragCoord.y + backToFrontDepth * offset.y) / resolution.y ) * 1.0 ).xyz;\r\n\r\n    // gl_FragColor = vec4(refCol, 1.0);\r\n    float reflectionCoeff = pow(sinTheta1, 4.0);\r\n    // reflectionCoeff = 1.0;\r\n\r\n    // vec4 image = vec4(vec3(texture2D( tDisplayImage, vec2( (gl_FragCoord.x + vImageUVCenter.x) / resolution.x, (gl_FragCoord.y + vImageUVCenter.y) / resolution.y ) )), 1.0);\r\n    // vec4 image = vec4((gl_FragCoord.x + vImageUVCenter.x) / resolution.x, (gl_FragCoord.y + vImageUVCenter.y) / resolution.y, 1.0, 1.0);\r\n    // vec4 image = vec4(1.0, 0.0, 0.0, 1.0);\r\n\r\n    // gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    // gl_FragColor = image;\r\n    // if (gl_FragCoord.x < 600.0) {\r\n    //     gl_FragColor = vec4(mix(refractCol, refCol, reflectionCoeff), 1.0);\r\n    // }\r\n    // gl_FragColor = vec4(backColor, 1.0);\r\n    // gl_FragColor = vec4(vec3(backDepthlinear * 0.01), 1.0);\r\n}"},f93b:function(e,t,r){"use strict";r.d(t,"a",(function(){return u}));var n=r("bee2"),a=r("d4ec"),o=r("257e"),i=r("262e"),s=r("2caf"),l=r("ade3"),c=r("5a89");class d extends c["U"]{constructor(e,t={}){super(e),this.type="Reflector";const r=this,n=void 0!==t.color?new c["m"](t.color):new c["m"](8355711),a=t.textureWidth||512,o=t.textureHeight||512,i=t.clipBias||0,s=t.shader||d.ReflectorShader,l=new c["eb"],u=new c["Gb"],h=new c["Gb"],f=new c["Gb"],v=new c["T"],g=new c["Gb"](0,0,-1),m=new c["Hb"],p=new c["Gb"],b=new c["Gb"],x=new c["Hb"],y=new c["T"],w=new c["db"],M=new c["Kb"](a,o),C=new c["rb"]({uniforms:c["Db"].clone(s.uniforms),fragmentShader:s.fragmentShader,vertexShader:s.vertexShader});C.uniforms["tDiffuse"].value=M.texture,C.uniforms["color"].value=n,C.uniforms["textureMatrix"].value=y,this.material=C,this.onBeforeRender=function(e,t,n){if(h.setFromMatrixPosition(r.matrixWorld),f.setFromMatrixPosition(n.matrixWorld),v.extractRotation(r.matrixWorld),u.set(0,0,1),u.applyMatrix4(v),p.subVectors(h,f),p.dot(u)>0)return;p.reflect(u).negate(),p.add(h),v.extractRotation(n.matrixWorld),g.set(0,0,-1),g.applyMatrix4(v),g.add(f),b.subVectors(h,g),b.reflect(u).negate(),b.add(h),w.position.copy(p),w.up.set(0,1,0),w.up.applyMatrix4(v),w.up.reflect(u),w.lookAt(b),w.far=n.far,w.updateMatrixWorld(),w.projectionMatrix.copy(n.projectionMatrix),y.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),y.multiply(w.projectionMatrix),y.multiply(w.matrixWorldInverse),y.multiply(r.matrixWorld),l.setFromNormalAndCoplanarPoint(u,h),l.applyMatrix4(w.matrixWorldInverse),m.set(l.normal.x,l.normal.y,l.normal.z,l.constant);const a=w.projectionMatrix;x.x=(Math.sign(m.x)+a.elements[8])/a.elements[0],x.y=(Math.sign(m.y)+a.elements[9])/a.elements[5],x.z=-1,x.w=(1+a.elements[10])/a.elements[14],m.multiplyScalar(2/m.dot(x)),a.elements[2]=m.x,a.elements[6]=m.y,a.elements[10]=m.z+1-i,a.elements[14]=m.w,M.texture.encoding=e.outputEncoding,r.visible=!1;const o=e.getRenderTarget(),s=e.xr.enabled,c=e.shadowMap.autoUpdate;e.xr.enabled=!1,e.shadowMap.autoUpdate=!1,e.setRenderTarget(M),e.state.buffers.depth.setMask(!0),!1===e.autoClear&&e.clear(),e.render(t,w),e.xr.enabled=s,e.shadowMap.autoUpdate=c,e.setRenderTarget(o);const d=n.viewport;void 0!==d&&e.state.viewport(d),r.visible=!0},this.getRenderTarget=function(){return M},this.dispose=function(){M.dispose(),r.material.dispose()}}}d.prototype.isReflector=!0,d.ReflectorShader={uniforms:{color:{value:null},tDiffuse:{value:null},textureMatrix:{value:null}},vertexShader:"\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}",fragmentShader:"\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}"};var u=function(e){Object(i["a"])(r,e);var t=Object(s["a"])(r);function r(e,n){var i,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};Object(a["a"])(this,r),i=t.call(this,e),Object(l["a"])(Object(o["a"])(i),"material",void 0);var u=Object(o["a"])(i),f=(void 0!==s.color?new c["m"](s.color):new c["m"](16777215),s.textureWidth||512),v=s.textureHeight||512,g=s.clipBias||0,m=s.flowDirection||new c["Fb"](1,0),p=s.flowSpeed||.01,b=s.reflectivity||.5,x=s.scale||1,y=h,w=new c["Ab"],M=s.normalMap0||w.load("./water/Water_1_M_Normal.jpg"),C=s.normalMap1||w.load("./water/Water_2_M_Normal.jpg"),k=.15,D=.5*k,F=new c["T"],P=new c["l"];i.material=new c["rb"];var _=new d(e,{textureWidth:f,textureHeight:v,clipBias:g});function R(e){F.set(.5,0,0,.5,0,.5,0,.5,0,0,.5,.5,0,0,0,1),F.multiply(e.projectionMatrix),F.multiply(e.matrixWorldInverse),F.multiply(u.matrixWorld)}function j(){var e=P.getDelta(),t=u.material.uniforms["config"];t.value.x+=p*e,t.value.y=t.value.x+D,t.value.x>=k?(t.value.x=0,t.value.y=D):t.value.y>=k&&(t.value.y=t.value.y-k)}return _.matrixAutoUpdate=!1,i.material=new c["rb"]({uniforms:c["Db"].merge([c["Cb"]["fog"],y.uniforms]),vertexShader:y.vertexShader,fragmentShader:y.fragmentShader,transparent:!0,fog:!0}),i.material.uniforms["flowDirection"].value=m,M.wrapS=M.wrapT=c["nb"],C.wrapS=C.wrapT=c["nb"],i.material.uniforms["tReflectionMap"].value=_.getRenderTarget().texture,i.material.uniforms["tNormalMap0"].value=M,i.material.uniforms["tNormalMap1"].value=C,i.material.uniforms["reflectivity"].value=b,i.material.uniforms["textureMatrix"].value=F,i.material.uniforms["config"].value.x=0,i.material.uniforms["config"].value.y=D,i.material.uniforms["config"].value.z=D,i.material.uniforms["config"].value.w=x,i.onBeforeRender=function(e,t,r,a,o,i){R(r),j(),u.visible=!1,_.matrixWorld.copy(u.matrixWorld),_.onBeforeRender(e,n,r,a,o,i),u.visible=!0},i}return Object(n["a"])(r)}(c["U"]),h={uniforms:{reflectivity:{type:"f",value:0},tReflectionMap:{type:"t",value:null},tRefractionMap:{type:"t",value:null},tNormalMap0:{type:"t",value:null},tNormalMap1:{type:"t",value:null},textureMatrix:{type:"m4",value:null},config:{type:"v4",value:new c["Hb"]},flowDirection:{type:"v2",value:new c["Fb"]}},vertexShader:"\n\n\t\t#include <common>\n\t\t#include <fog_pars_vertex>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tuniform mat4 textureMatrix;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\n\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\n\t\t\tgl_Position = projectionMatrix * mvPosition;\n\n\t\t\t#include <logdepthbuf_vertex>\n\t\t\t#include <fog_vertex>\n\n\t\t}",fragmentShader:"\n\n\t\t#include <common>\n\t\t#include <fog_pars_fragment>\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tuniform sampler2D tReflectionMap;\n\t\tuniform sampler2D tRefractionMap;\n\t\tuniform sampler2D tNormalMap0;\n\t\tuniform sampler2D tNormalMap1;\n\n\t\tuniform vec2 flowDirection;\n\n\t\tuniform float reflectivity;\n\t\tuniform vec4 config;\n\n\t\tvarying vec4 vCoord;\n\t\tvarying vec2 vUv;\n\t\tvarying vec3 vToEye;\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tfloat flowMapOffset0 = config.x;\n\t\t\tfloat flowMapOffset1 = config.y;\n\t\t\tfloat halfCycle = config.z;\n\t\t\tfloat scale = config.w;\n\n\t\t\tvec3 toEye = normalize( vToEye );\n\n\t\t\t// determine flow direction\n\t\t\tvec2 flow;\n\t\t\tflow = flowDirection;\n\t\t\tflow.x *= - 1.0;\n\n\t\t\t// sample normal maps (distort uvs with flowdata)\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\n\n\t\t\t// linear interpolate to get the final normal color\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\n\n\t\t\t// calculate normal vector\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\n\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\n            reflectance = pow(reflectance + 0.3, 4.0);\n            // reflectance = floor(reflectance *  2.0) / 4.0;\n            vec4 refractColor = vec4(1.0);\n\n\t\t\t// calculate final uv coords\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\n\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\n            reflectColor *= vec4(1.0, 1.0, 0.8, 1.0);\n\n\t\t\tgl_FragColor = mix(refractColor, reflectColor, reflectance);\n\n\t\t\t#include <tonemapping_fragment>\n\t\t\t#include <encodings_fragment>\n\t\t\t#include <fog_fragment>\n\n\t\t}"}}}]);
//# sourceMappingURL=chunk-e59f6236.8167ebba.js.map