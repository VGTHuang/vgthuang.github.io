{"version":3,"sources":["webpack:///./node_modules/core-js/internals/engine-ff-version.js","webpack:///./src/views/ThreeFrontpageTest2.vue?8379","webpack:///./src/scripts/FrontPage4.0/CardContainer.ts","webpack:///./src/scripts/FrontPage4.0/ProxyConfig.ts","webpack:///./src/scripts/FrontPage4.0/Card.ts","webpack:///./src/scripts/FrontPage4.0/TexturePool.ts","webpack:///./src/scripts/FrontPage4.0/Proxy.ts","webpack:///./src/scripts/FrontPage4.0/Scene.ts","webpack:///./src/scripts/FrontPage4.0/ProxyStyles/TestStyles.ts","webpack:///./src/views/ThreeFrontpageTest2.vue","webpack:///./src/views/ThreeFrontpageTest2.vue?3e9f","webpack:///./src/views/ThreeFrontpageTest2.vue?64c0","webpack:///./node_modules/core-js/internals/array-method-has-species-support.js","webpack:///./node_modules/core-js/modules/es.array.sort.js","webpack:///./node_modules/core-js/internals/engine-webkit-version.js","webpack:///./src/views/ThreeFrontpageTest2.vue?d015","webpack:///./node_modules/core-js/internals/array-sort.js","webpack:///./node_modules/core-js/modules/es.object.keys.js","webpack:///./node_modules/core-js/modules/es.array.map.js","webpack:///./node_modules/core-js/internals/engine-is-ie-or-edge.js","webpack:///./node_modules/three/examples/jsm/objects/Reflector.js","webpack:///./src/scripts/Three/SQWater.ts"],"names":["userAgent","firefox","match","module","exports","render","_vm","this","_h","$createElement","_c","_self","staticClass","on","swapLeft","_v","swapRight","domProps","_s","t1","t2","ref","attrs","class","loadingStat","isLoaded","noLoadingStat","style","width","loaded","total","Math","round","staticRenderFns","targetAttraction","momentum","damp","p_v","p_s","p_t","r_v","r_s","r_t","isStatic","staticThreshold","r_offset","cardGroup","proxyConfig","position","set","rotation","x","y","PI","z","setTargetProxy","copy","multiplyScalar","add","sub","length","scale","frontColor","frontImgUrl","backColor","backImgUrl","parent","texturePool","s_v","s_s","s_t","matFront","color","map","getTexture","side","matBack","matFrontImgUrl","matBackImgUrl","colorWithMap","cardGeometry","cardMeshFront","cardMeshBack","cardFrontBackGroup","quat","setFromEuler","w","changeMaterial","random","changeToEmptyMaterial","setFromQuaternion","cards","maxTextureCount","pool","setInterval","destructSomeTextures","imgUrl","pooledTex","undefined","texture","load","lastUsedTime","Date","now","numOfTexturesInPool","Object","keys","destructableTextures","url","destructableFlg","cardIndex","push","sort","a","b","i","dispose","visibleCardCount","isLoop","onStatic","onFocusIndex","isCurrentFocused","currentFocusIndex","cardContainer","containerProxyConfig","cardProxyConfigs","invisibleCardProxy","refreshTargets","newFocusIndex","focusOnCard","focusIndex","setRandomInvisibleTargetProxy","proxyGroups","maxCardCount","currentProxyGroupIndex","proxyGroup","forEach","card","newProxyGroupIndex","console","log","setTimeout","toStatic","cardParent","update","focusForward","focusBackward","focusMesh","_container","onLoad","onProgress","onError","onCardFocus","onCardRouteJump","isScenePaused","requestAnimationFrame","animate","updateCamera","stats","cardProxyManager","camera","aspect","window","innerWidth","innerHeight","updateProjectionMatrix","renderer","setSize","cssRenderer","e","currentTime","lastMouseWheelTime","mouseWheelGapTime","deltaY","lastMouseWheelIsForward","lastMouseWheelStartTime","lastMouseWheelCount","doWheel","mousePosX","clientX","mousePosY","clientY","pointer","raycaster","setFromCamera","intersects","intersectObjects","intersectObjs","object","container","alpha","antialias","setClearColor","setPixelRatio","devicePixelRatio","domElement","top","left","appendChild","cameraBasicLookAt","cameraTargetPosition","lookAt","scene","cssScene","loadingManager","waterGeometry","water","SQWater","flowDirection","textureWidth","textureHeight","cameraPositionController","cameraWithMouseRotateFactor","resumeScene","cameraDist","dampPos","self","removeEventListener","onWindowResize","onMouseWheel","onMouseMove","onClick","addEventListener","registerProxyGroup","initCards","swapProxyGroup","testStyleBigCards3","setText","cardHeight","cardWidth","cardImgUrls","brandList","cardPositions","cardRotations","oldFocusIndex","CAROUSEL_ANGLE","radius","t1List","angle","cos","sin","testStyleStairs","ygap","extend","data","fpm","styleCarousel","mounted","$refs","HTMLElement","_","error","index","registerNewProxyGroup","testStyleCarousel","methods","component","fails","wellKnownSymbol","V8_VERSION","SPECIES","METHOD_NAME","array","constructor","foo","Boolean","$","uncurryThis","aCallable","toObject","lengthOfArrayLike","toString","internalSort","arrayMethodIsStrict","FF","IE_OR_EDGE","V8","WEBKIT","test","un$Sort","FAILS_ON_UNDEFINED","FAILS_ON_NULL","STRICT_METHOD","STABLE_SORT","code","chr","value","result","String","fromCharCode","k","v","charAt","FORCED","getSortCompare","comparefn","target","proto","forced","itemsLength","items","arrayLength","webkit","arraySlice","floor","mergeSort","middle","insertionSort","merge","element","j","right","llength","rlength","lindex","rindex","nativeKeys","FAILS_ON_PRIMITIVES","stat","it","$map","arrayMethodHasSpeciesSupport","HAS_SPECIES_SUPPORT","callbackfn","arguments","UA","geometry","options","super","type","scope","clipBias","shader","ReflectorShader","reflectorPlane","normal","reflectorWorldPosition","cameraWorldPosition","rotationMatrix","lookAtPosition","clipPlane","view","q","textureMatrix","virtualCamera","renderTarget","material","uniforms","clone","fragmentShader","vertexShader","onBeforeRender","setFromMatrixPosition","matrixWorld","extractRotation","applyMatrix4","subVectors","dot","reflect","negate","up","far","updateMatrixWorld","projectionMatrix","multiply","matrixWorldInverse","setFromNormalAndCoplanarPoint","constant","sign","elements","encoding","outputEncoding","visible","currentRenderTarget","getRenderTarget","currentXrEnabled","xr","enabled","currentShadowAutoUpdate","shadowMap","autoUpdate","setRenderTarget","state","buffers","depth","setMask","autoClear","clear","viewport","prototype","isReflector","reflectionScene","flowSpeed","reflectivity","WaterShader","textureLoader","normalMap0","normalMap1","cycle","halfCycle","clock","reflector","updateTextureMatrix","updateFlow","delta","getDelta","config","matrixAutoUpdate","transparent","fog","wrapS","wrapT","group"],"mappings":"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","file":"js/chunk-36c8abda.aeb17642.js","sourcesContent":["var userAgent = require('../internals/engine-user-agent');\n\nvar firefox = userAgent.match(/firefox\\/(\\d+)/i);\n\nmodule.exports = !!firefox && +firefox[1];\n","var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',[_c('div',{staticClass:\"arrow-container\"},[_c('div',{staticClass:\"arrow\",on:{\"click\":_vm.swapLeft}},[_vm._v(\"◀\")]),_c('div',{staticClass:\"arrow\",on:{\"click\":_vm.swapRight}},[_vm._v(\"▶\")])]),_c('div',{staticClass:\"text-container\"},[_c('div',{staticClass:\"text1\",domProps:{\"innerHTML\":_vm._s(_vm.t1)}}),_c('div',{staticClass:\"text2\",domProps:{\"innerHTML\":_vm._s(_vm.t2)}})]),_c('div',{ref:\"canvas-container\",attrs:{\"id\":\"canvas-container\"}},[_c('div',{staticClass:\"loading-container\",class:{\n            'loading-container--hidden': _vm.loadingStat.isLoaded,\n            'loading-container--none': _vm.loadingStat.noLoadingStat\n        }},[_c('div',{staticClass:\"load-stat\"},[_c('div',{staticClass:\"load-pgbar\",style:({\n                    width: 100 * _vm.loadingStat.loaded / _vm.loadingStat.total + '%'\n                })}),_c('div',{staticClass:\"load-text\"},[_vm._v(_vm._s(Math.round(100 * _vm.loadingStat.loaded / _vm.loadingStat.total))+\" %\")])])])])])}\nvar staticRenderFns = []\n\nexport { render, staticRenderFns }","import * as THREE from 'three'\r\nimport { ContainerProxyConfig } from './ProxyConfig'\r\n\r\nexport default class CardContainer {\r\n\r\n    // position: v - velocity, s - state, t - target\r\n    p_v: THREE.Vector3\r\n    p_s: THREE.Vector3\r\n    p_t: THREE.Vector3\r\n\r\n    // rotation (represented with quaternions)\r\n    r_v: THREE.Vector3\r\n    r_s: THREE.Vector3\r\n    r_t: THREE.Vector3\r\n\r\n    r_offset: number\r\n\r\n    targetAttraction: number\r\n    momentum: number\r\n    damp: number\r\n\r\n    // if true, the card is very close to its target proxy\r\n    isStatic: boolean\r\n    staticThreshold: number\r\n\r\n    cardGroup: THREE.Group\r\n\r\n\r\n    constructor(targetAttraction: number = 0.04, momentum: number = 1.2, damp: number = 0.4) {\r\n        this.p_v = new THREE.Vector3()\r\n        this.p_s = new THREE.Vector3()\r\n        this.p_t = new THREE.Vector3()\r\n\r\n        this.r_v = new THREE.Vector3()\r\n        this.r_s = new THREE.Vector3()\r\n        this.r_t = new THREE.Vector3()\r\n\r\n        this.targetAttraction = targetAttraction\r\n        this.momentum = momentum\r\n        this.damp = damp\r\n\r\n        this.isStatic = true\r\n        this.staticThreshold = 1e-4\r\n\r\n        this.r_offset = 0\r\n\r\n        this.cardGroup = new THREE.Group()\r\n    }\r\n\r\n    setTargetProxy(proxyConfig: ContainerProxyConfig): void {\r\n        this.p_t = proxyConfig.position\r\n        // let quat = new THREE.Quaternion().setFromEuler(proxyConfig.rotation)\r\n        // this.r_t.set(quat.x, quat.y, quat.z, quat.w)\r\n        this.r_t.set(proxyConfig.rotation.x, proxyConfig.rotation.y + this.r_offset*Math.PI * 2, proxyConfig.rotation.z)\r\n        this.isStatic = false\r\n    }\r\n\r\n    initSet(proxyConfig: ContainerProxyConfig): void {\r\n        this.setTargetProxy(proxyConfig)\r\n        \r\n        this.p_s.copy(this.p_t)\r\n        this.r_s.copy(this.r_t)\r\n\r\n        this.cardGroup.position.copy(this.p_s)\r\n        this.cardGroup.rotation.set(this.r_s.x, this.r_s.y, this.r_s.z)\r\n        // this.cardGroup.rotation.setFromQuaternion(new THREE.Quaternion(this.r_s.x, this.r_s.y, this.r_s.z, this.r_s.w))\r\n    }\r\n\r\n\r\n    update(): void {\r\n        if (!this.isStatic) {\r\n            // position\r\n            this.p_v.multiplyScalar(this.damp)\r\n            this.p_v.add((new THREE.Vector3()).copy(this.p_t).sub(this.p_s).multiplyScalar(this.targetAttraction))\r\n            this.p_s.add(this.p_v)\r\n            \r\n            // rotation\r\n            this.r_v.multiplyScalar(this.damp)\r\n            this.r_v.add((new THREE.Vector3()).copy(this.r_t).sub(this.r_s).multiplyScalar(this.targetAttraction))\r\n            this.r_s.add(this.r_v)\r\n\r\n            // compute static\r\n            if (this.p_v.length() < this.staticThreshold\r\n                && this.r_v.length() < this.staticThreshold) {\r\n                this.isStatic = true\r\n            }\r\n\r\n            // assign values to mesh\r\n            this.cardGroup.position.copy(this.p_s)\r\n            this.cardGroup.rotation.set(this.r_s.x, this.r_s.y, this.r_s.z)\r\n        }\r\n    }\r\n}","import * as THREE from 'three'\r\n\r\nexport class ContainerProxyConfig {\r\n    position: THREE.Vector3\r\n    rotation: THREE.Euler\r\n\r\n    constructor () {\r\n        this.position = new THREE.Vector3(0, 0, 0)\r\n        this.rotation = new THREE.Euler(0, 0, 0)\r\n    }\r\n}\r\n\r\nexport class CardProxyConfig extends ContainerProxyConfig {\r\n    scale: THREE.Vector2\r\n    frontColor: THREE.Color\r\n    frontImgUrl: string\r\n    backColor: THREE.Color\r\n    backImgUrl: string\r\n\r\n    constructor () {\r\n        super()\r\n        this.scale = new THREE.Vector2(0, 0)\r\n        this.frontColor = new THREE.Color(0, 0, 0)\r\n        this.frontImgUrl = ''\r\n        this.backColor = new THREE.Color(0, 0, 0)\r\n        this.backImgUrl = ''\r\n    }\r\n}","import * as THREE from 'three'\r\nimport { CardProxyConfig } from './ProxyConfig'\r\nimport TexturePool from './TexturePool'\r\n\r\n\r\nexport default class Card {\r\n\r\n    parent: THREE.Object3D\r\n\r\n    // position: v - velocity, s - state, t - target\r\n    p_v: THREE.Vector3\r\n    p_s: THREE.Vector3\r\n    p_t: THREE.Vector3\r\n\r\n    // rotation (represented with quaternions)\r\n    r_v: THREE.Vector4\r\n    r_s: THREE.Vector4\r\n    r_t: THREE.Vector4\r\n\r\n    // scale\r\n    s_v: THREE.Vector2\r\n    s_s: THREE.Vector2\r\n    s_t: THREE.Vector2\r\n\r\n    targetAttraction: number\r\n    momentum: number\r\n    damp: number\r\n\r\n    // if true, the card is very close to its target proxy\r\n    isStatic: boolean\r\n    staticThreshold: number\r\n\r\n    // card object\r\n    cardGeometry: THREE.PlaneBufferGeometry\r\n    cardFrontBackGroup: THREE.Group\r\n    cardMeshFront: THREE.Mesh\r\n    cardMeshBack: THREE.Mesh\r\n\r\n    // materials\r\n    texturePool: TexturePool\r\n    matFront: THREE.MeshBasicMaterial\r\n    matBack: THREE.MeshBasicMaterial\r\n    matFrontImgUrl: string\r\n    matBackImgUrl: string\r\n    colorWithMap: THREE.Color\r\n\r\n    constructor(parent: THREE.Object3D, texturePool: TexturePool, targetAttraction: number = 0.03, momentum: number = 0.4, damp: number = 0.7) {\r\n        this.parent = parent\r\n        this.p_v = new THREE.Vector3()\r\n        this.p_s = new THREE.Vector3()\r\n        this.p_t = new THREE.Vector3()\r\n\r\n        this.r_v = new THREE.Vector4()\r\n        this.r_s = new THREE.Vector4()\r\n        this.r_t = new THREE.Vector4()\r\n\r\n        this.s_v = new THREE.Vector2()\r\n        this.s_s = new THREE.Vector2()\r\n        this.s_t = new THREE.Vector2()\r\n\r\n        this.targetAttraction = targetAttraction\r\n        this.momentum = momentum\r\n        this.damp = damp\r\n\r\n        this.isStatic = true\r\n        this.staticThreshold = 1e-4\r\n\r\n        // material\r\n        this.texturePool = texturePool\r\n        this.matFront = new THREE.MeshBasicMaterial({\r\n            color: new THREE.Color(1, 0, 0),\r\n            map:  texturePool.getTexture(),\r\n            side: THREE.FrontSide\r\n        })\r\n        this.matBack = new THREE.MeshBasicMaterial({\r\n            color: new THREE.Color(0, 1, 0),\r\n            map: texturePool.getTexture(),\r\n            side: THREE.BackSide\r\n        })\r\n        this.matFrontImgUrl = ''\r\n        this.matBackImgUrl = ''\r\n        this.colorWithMap = new THREE.Color( 0xffffff )\r\n\r\n        this.cardGeometry = new THREE.PlaneGeometry(1, 1)\r\n        // this.cardMesh = new THREE.Mesh(this.cardGeometry, [\r\n        //     this.matFront, this.matBack\r\n        // ])\r\n\r\n        this.cardMeshFront = new THREE.Mesh(this.cardGeometry, this.matFront)\r\n        this.cardMeshBack = new THREE.Mesh(this.cardGeometry, this.matBack)\r\n\r\n        this.cardFrontBackGroup = new THREE.Group()\r\n        this.cardFrontBackGroup.add(this.cardMeshFront)\r\n        this.cardFrontBackGroup.add(this.cardMeshBack)\r\n        this.parent.add(this.cardFrontBackGroup)\r\n    }\r\n\r\n    setTargetProxy(proxyConfig: CardProxyConfig): void {\r\n        this.p_t = proxyConfig.position\r\n        // proxyConfig.rotation.set(\r\n        //     proxyConfig.rotation.x == 0 ? 5e-2: proxyConfig.rotation.x,\r\n        //     proxyConfig.rotation.y == 0 ? 5e-2: proxyConfig.rotation.y,\r\n        //     proxyConfig.rotation.z == 0 ? 5e-2: proxyConfig.rotation.z,\r\n        // )\r\n        let quat = new THREE.Quaternion().setFromEuler(proxyConfig.rotation)\r\n        // if (quat.x == 0) {\r\n        //     quat.x = 1e-3\r\n        // }\r\n        // if (quat.y == 0) {\r\n        //     quat.y = 1e-3\r\n        // }\r\n        // if (quat.z == 0) {\r\n        //     quat.z = 1e-3\r\n        // }\r\n        // if (quat.w == 0) {\r\n        //     quat.w = 1e-3\r\n        // }\r\n        this.r_t.set(quat.x, quat.y, quat.z, quat.w)\r\n        this.s_t = proxyConfig.scale\r\n        this.isStatic = false\r\n        this.changeMaterial(proxyConfig)\r\n    }\r\n\r\n    setRandomInvisibleTargetProxy(): void {\r\n        this.p_t.set(Math.random() * 200 - 100, Math.random() * 20 - 10, Math.random() * 200 - 100)\r\n        // proxyConfig.rotation.set(\r\n        //     proxyConfig.rotation.x == 0 ? 5e-2: proxyConfig.rotation.x,\r\n        //     proxyConfig.rotation.y == 0 ? 5e-2: proxyConfig.rotation.y,\r\n        //     proxyConfig.rotation.z == 0 ? 5e-2: proxyConfig.rotation.z,\r\n        // )\r\n        let quat = new THREE.Quaternion().setFromEuler(\r\n            new THREE.Euler(Math.random(), Math.random(), Math.random())\r\n        )\r\n        // if (quat.x == 0) {\r\n        //     quat.x = 1e-3\r\n        // }\r\n        // if (quat.y == 0) {\r\n        //     quat.y = 1e-3\r\n        // }\r\n        // if (quat.z == 0) {\r\n        //     quat.z = 1e-3\r\n        // }\r\n        // if (quat.w == 0) {\r\n        //     quat.w = 1e-3\r\n        // }\r\n        this.r_t.set(quat.x, quat.y, quat.z, quat.w)\r\n        this.s_t.set(0, 0)\r\n        this.isStatic = false\r\n        this.changeToEmptyMaterial()\r\n    }\r\n\r\n    initSet(proxyConfig: CardProxyConfig): void {\r\n        this.setTargetProxy(proxyConfig)\r\n        \r\n        this.p_s.copy(this.p_t)\r\n        this.r_s.copy(this.r_t)\r\n        this.s_s.copy(this.s_t)\r\n\r\n        this.cardFrontBackGroup.position.copy(this.p_s)\r\n        this.cardFrontBackGroup.rotation.setFromQuaternion(new THREE.Quaternion(this.r_s.x, this.r_s.y, this.r_s.z, this.r_s.w))\r\n        this.cardFrontBackGroup.scale.set(this.s_s.x, this.s_s.y, 1)\r\n    }\r\n\r\n    changeMaterial(proxyConfig: CardProxyConfig) {\r\n        this.matFront.color = proxyConfig.frontImgUrl == '' ? proxyConfig.frontColor : this.colorWithMap\r\n        this.matBack.color = proxyConfig.backImgUrl == '' ? proxyConfig.backColor : this.colorWithMap\r\n        if (proxyConfig.frontImgUrl !== this.matFrontImgUrl) {\r\n            if (proxyConfig.frontImgUrl !== '') {\r\n                this.matFront.map = this.texturePool.getTexture(proxyConfig.frontImgUrl)\r\n            } else {\r\n                this.matFront.map = this.texturePool.getTexture()\r\n            }\r\n        }\r\n        if (proxyConfig.backImgUrl !== this.matBackImgUrl) {\r\n            if (proxyConfig.backImgUrl !== '') {\r\n                this.matBack.map = this.texturePool.getTexture(proxyConfig.backImgUrl)\r\n            } else {\r\n                this.matBack.map = this.texturePool.getTexture()\r\n            }\r\n        }\r\n        this.matFrontImgUrl = proxyConfig.frontImgUrl\r\n        this.matBackImgUrl = proxyConfig.backImgUrl\r\n    }\r\n\r\n    changeToEmptyMaterial() {\r\n        this.matFront.color = this.colorWithMap\r\n        this.matBack.color = this.colorWithMap\r\n        this.matFront.map = this.texturePool.getTexture()\r\n        this.matFront.map = this.texturePool.getTexture()\r\n        this.matFrontImgUrl = ''\r\n        this.matBackImgUrl = ''\r\n    }\r\n\r\n    update(): void {\r\n        if (!this.isStatic) {\r\n            // position\r\n            this.p_v.multiplyScalar(this.damp)\r\n            this.p_v.add((new THREE.Vector3()).copy(this.p_t).sub(this.p_s).multiplyScalar(this.targetAttraction))\r\n            this.p_s.add(this.p_v)\r\n            \r\n            // rotation\r\n            this.r_v.multiplyScalar(this.damp)\r\n            this.r_v.add((new THREE.Vector4()).copy(this.r_t).sub(this.r_s).multiplyScalar(this.targetAttraction))\r\n            this.r_s.add(this.r_v)\r\n\r\n            // scale\r\n            this.s_v.multiplyScalar(this.damp)\r\n            this.s_v.add((new THREE.Vector2()).copy(this.s_t).sub(this.s_s).multiplyScalar(this.targetAttraction))\r\n            this.s_s.add(this.s_v)\r\n\r\n            // assign values to mesh\r\n            this.cardFrontBackGroup.position.copy(this.p_s)\r\n            this.cardFrontBackGroup.rotation.setFromQuaternion(new THREE.Quaternion(this.r_s.x, this.r_s.y, this.r_s.z, this.r_s.w))\r\n            this.cardFrontBackGroup.scale.set(this.s_s.x, this.s_s.y, 1)\r\n\r\n            // compute static\r\n            if (this.p_v.length() < this.staticThreshold\r\n                && this.r_v.length() < this.staticThreshold\r\n                && this.s_v.length() < this.staticThreshold) {\r\n                this.isStatic = true\r\n            }\r\n        }\r\n    }\r\n}","/**\r\n * \r\n * 管理所有材质\r\n * \r\n */\r\n\r\nimport * as THREE from 'three'\r\nimport Card from './Card'\r\n\r\ntype TextureInfo = {\r\n    texture: THREE.Texture,\r\n    imgUrl: string,\r\n    lastUsedTime: number\r\n}\r\n\r\nexport default class TexturePool {\r\n\r\n    pool: { [imgUrl: string]: TextureInfo }\r\n    cards: Array<Card>\r\n    maxTextureCount: number\r\n\r\n    constructor(cards: Array<Card>, maxTextureCount: number = 100) {\r\n        this.pool = {}\r\n        this.cards = cards\r\n        this.maxTextureCount = maxTextureCount\r\n\r\n        // 每隔固定时间，注销一些材质\r\n        setInterval(() => {\r\n            this.destructSomeTextures()\r\n        }, 10000)\r\n    }\r\n\r\n    getTexture(imgUrl: string | null = null): THREE.Texture {\r\n        if (!imgUrl) {\r\n            imgUrl = ''\r\n        }\r\n        let pooledTex = this.pool[imgUrl]\r\n        if (pooledTex == undefined) {\r\n            pooledTex = {\r\n                texture: imgUrl == '' ? \r\n                new THREE.TextureLoader().load('empty_texture.png') : new THREE.TextureLoader().load(imgUrl),\r\n                imgUrl: imgUrl,\r\n                lastUsedTime: Date.now() // 创建该材质的时间是现在\r\n            }\r\n            this.pool[imgUrl] = pooledTex\r\n        } else {\r\n            pooledTex.lastUsedTime = Date.now() // 最近一次访问该材质的时间是现在\r\n        }\r\n        return pooledTex.texture\r\n    }\r\n\r\n\r\n\r\n    /**\r\n     * \r\n     * 隔一段时间就自动注销一些材质，防止材质过多\r\n     * 注销规则：1. 所有正在使用的材质不能销毁；2. 按LRU规则\r\n     * \r\n     */\r\n    destructSomeTextures() {\r\n        let numOfTexturesInPool = Object.keys(this.pool).length\r\n        if (numOfTexturesInPool > this.maxTextureCount) {\r\n            let destructableTextures: Array<TextureInfo> = []\r\n            for (let url in this.pool) {\r\n                // 判断是否有 card 在使用该材质\r\n                let destructableFlg = true\r\n                for (let cardIndex = 0; cardIndex < this.cards.length; cardIndex++) {\r\n                    if (this.cards[cardIndex].matFront.map == this.pool[url].texture || this.cards[cardIndex].matBack.map == this.pool[url].texture) {\r\n                        destructableFlg = false\r\n                        break\r\n                    }\r\n                }\r\n                if (destructableFlg) {\r\n                    // 未被使用\r\n                    destructableTextures.push(this.pool[url])\r\n                }\r\n            }\r\n            if (destructableTextures.length > 0) {\r\n                // 按最近使用时间排序\r\n                destructableTextures.sort((a, b) =>  a.lastUsedTime - b.lastUsedTime)\r\n                for (let i = 0; i < destructableTextures.length && i < numOfTexturesInPool - this.maxTextureCount; i++) {\r\n                    // 注销材质\r\n                    destructableTextures[i].texture.dispose()\r\n                    // 在 pool 中删除材质索引\r\n                    delete this.pool[destructableTextures[i].imgUrl]\r\n                }\r\n            }\r\n        }\r\n    }\r\n}","import * as THREE from 'three'\r\nimport { ContainerProxyConfig, CardProxyConfig } from './ProxyConfig'\r\nimport Card from './Card'\r\nimport CardContainer from './CardContainer'\r\nimport TexturePool from './TexturePool'\r\n\r\nclass ProxyGroup {\r\n\r\n    isCurrentFocused: boolean // 当前是否处于有卡片被选中的状态\r\n    currentFocusIndex: number // 当前被选中的卡片 index （只有 isCurrentFocused == true 时有意义）\r\n    visibleCardCount: number  // 场景中可见的最大卡片数量\r\n    isLoop: boolean   // 如果为 true，滚动切换 index 时 index 循环更新（如 Carousel 中的无限滚动）；否则滚动到第一个或最后一个卡片时，不继续向前或向后\r\n\r\n    cardContainer: CardContainer | undefined\r\n    containerProxyConfig: ContainerProxyConfig\r\n\r\n    cardProxyConfigs: Array<CardProxyConfig>\r\n    onStatic: (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>) => any  // ProxyGroup 的静态状态设定（未选中任何卡片时的状态）\r\n    onFocusIndex: (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>,\r\n        isCurrentFocused: boolean, oldFocusIndex: number, newFocusIndex: number) => any           // 选中某一卡片时的状态设定（未选中任何卡片时的状态）\r\n    \r\n    cards: Array<Card>\r\n    invisibleCardProxy: CardProxyConfig\r\n\r\n    constructor (visibleCardCount: number, isLoop: boolean = false,\r\n        onStatic: (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>) => any = () => undefined,\r\n        onFocusIndex: (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>,\r\n            isCurrentFocused: boolean, oldFocusIndex: number, newFocusIndex: number) => any = () => undefined,\r\n        ) {\r\n        this.isCurrentFocused = false\r\n        this.currentFocusIndex = 0\r\n        this.visibleCardCount = visibleCardCount\r\n\r\n        this.cardContainer = undefined\r\n        this.containerProxyConfig = new ContainerProxyConfig()\r\n\r\n        this.cardProxyConfigs = []\r\n        for (let i = 0; i < visibleCardCount; i++) {\r\n            this.cardProxyConfigs.push(new CardProxyConfig())\r\n        }\r\n\r\n        this.isLoop = isLoop\r\n        this.onStatic = onStatic\r\n        this.onFocusIndex = onFocusIndex\r\n        this.cards = []\r\n        this.invisibleCardProxy = new CardProxyConfig()\r\n    }\r\n\r\n    /**\r\n     * 场景切换到 static 状态\r\n     */\r\n    toStatic() {\r\n        this.isCurrentFocused = false\r\n        this.currentFocusIndex = 0\r\n        this.onStatic(this.containerProxyConfig, this.cardProxyConfigs)\r\n        this.refreshTargets()\r\n    }\r\n\r\n    /**\r\n     * focus 到下一张卡片；如果没有 focus 的卡片 (状态为 static)，则 focus 第一张卡片\r\n     */\r\n     focusForward() {\r\n        let newFocusIndex = 0\r\n        if (this.isCurrentFocused) {\r\n            newFocusIndex = this.currentFocusIndex + 1\r\n            if (newFocusIndex >= this.visibleCardCount) {\r\n                if (this.isLoop) {\r\n                    newFocusIndex = 0\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        this.focusOnCard(newFocusIndex)\r\n    }\r\n\r\n    /**\r\n     * focus 到上一张卡片；如果没有 focus 的卡片 (状态为 static)，则 focus 最后一张卡片\r\n     */\r\n     focusBackward() {\r\n        let newFocusIndex = this.visibleCardCount - 1\r\n        if (this.isCurrentFocused) {\r\n            newFocusIndex = this.currentFocusIndex - 1\r\n            if (newFocusIndex < 0) {\r\n                if (this.isLoop) {\r\n                    newFocusIndex = this.visibleCardCount - 1\r\n                } else {\r\n                    return\r\n                }\r\n            }\r\n        }\r\n        this.focusOnCard(newFocusIndex)\r\n    }\r\n\r\n    /**\r\n     * focus 到指定的卡片\r\n     */\r\n    focusOnCard(focusIndex: number) {\r\n        if (focusIndex < 0 || focusIndex >= this.visibleCardCount) {\r\n            return\r\n        }\r\n        this.onFocusIndex(this.containerProxyConfig, this.cardProxyConfigs, this.isCurrentFocused, this.currentFocusIndex, focusIndex)\r\n        this.isCurrentFocused = true\r\n        this.currentFocusIndex = focusIndex\r\n        this.refreshTargets()\r\n    }\r\n\r\n    refreshTargets() {\r\n        let cardIndex = 0\r\n        this.cardContainer?.setTargetProxy(this.containerProxyConfig)\r\n        for (; cardIndex < this.visibleCardCount; cardIndex++) {\r\n            this.cards[cardIndex].setTargetProxy(this.cardProxyConfigs[cardIndex])\r\n        }\r\n        for (; cardIndex < this.cards.length; cardIndex++) {\r\n            this.cards[cardIndex].setRandomInvisibleTargetProxy()\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass ProxyManager {\r\n\r\n    proxyGroups: Array<ProxyGroup>\r\n    maxCardCount: number\r\n    currentProxyGroupIndex: number\r\n\r\n    containerProxyConfig: ContainerProxyConfig\r\n    cardContainer: CardContainer\r\n    \r\n    cards: Array<Card>\r\n    texturePool: TexturePool | undefined\r\n\r\n    constructor () {\r\n        this.proxyGroups = []\r\n        this.maxCardCount = 0\r\n        this.currentProxyGroupIndex = 0\r\n\r\n        this.containerProxyConfig = new ContainerProxyConfig()\r\n        this.cardContainer = new CardContainer()\r\n\r\n        this.cards = []\r\n        this.texturePool = undefined\r\n    }\r\n\r\n    registerProxyGroup (proxyGroup: ProxyGroup) {\r\n        this.proxyGroups.push(proxyGroup)\r\n        proxyGroup.cardContainer = this.cardContainer\r\n        proxyGroup.containerProxyConfig = this.containerProxyConfig\r\n        this.cardContainer.r_s.x %= Math.PI * 2\r\n        this.cardContainer.r_s.y %= Math.PI * 2\r\n        this.cardContainer.r_s.z %= Math.PI * 2\r\n        this.cardContainer.cardGroup.rotation.set(this.cardContainer.r_s.x, this.cardContainer.r_s.y, this.cardContainer.r_s.z)\r\n        this.cards.forEach(card => {\r\n            card.r_s.x %= Math.PI * 2\r\n            card.r_s.y %= Math.PI * 2\r\n            card.r_s.z %= Math.PI * 2\r\n        });\r\n        if (proxyGroup.visibleCardCount > this.maxCardCount) {\r\n            this.maxCardCount = proxyGroup.visibleCardCount\r\n        }\r\n    }\r\n\r\n    swapProxyGroup (newProxyGroupIndex: number) {\r\n        if (newProxyGroupIndex < 0 || newProxyGroupIndex >= this.proxyGroups.length) {\r\n            // out of bounds\r\n            console.log('out of bounds!!')\r\n            return\r\n        }\r\n        // normalize the rotation of each group/card so they're not too winded-up\r\n        this.cardContainer.r_s.x %= Math.PI * 2\r\n        this.cardContainer.r_s.y %= Math.PI * 2\r\n        this.cardContainer.r_s.z %= Math.PI * 2\r\n        this.cardContainer.cardGroup.rotation.set(this.cardContainer.r_s.x, this.cardContainer.r_s.y, this.cardContainer.r_s.z)\r\n        this.cards.forEach(card => {\r\n            card.r_s.x %= Math.PI * 2\r\n            card.r_s.y %= Math.PI * 2\r\n            card.r_s.z %= Math.PI * 2\r\n        });\r\n        this.cardContainer.r_offset = newProxyGroupIndex\r\n        this.currentProxyGroupIndex = newProxyGroupIndex\r\n        setTimeout(() => {\r\n            this.proxyGroups[this.currentProxyGroupIndex].toStatic()\r\n        }, 10)\r\n    }\r\n\r\n    /**\r\n     * 完成所有 registerProxyGroup 后，生成 cards\r\n     * @param cardParent \r\n     */\r\n    initCards (cardParent: THREE.Object3D) {\r\n        // 卡片正反面各一个材质，因此存在场景中的最大材质数为 2 * maxCardCount\r\n        this.texturePool = new TexturePool(this.cards, this.maxCardCount * 2)\r\n        for (let i = 0; i < this.maxCardCount; i++) {\r\n            const card = new Card(this.cardContainer.cardGroup, this.texturePool)\r\n            // card.initSet(this.invisibleCardProxy)\r\n            this.cards.push(card)\r\n        }\r\n        this.proxyGroups.forEach(proxyGroup => {\r\n            proxyGroup.cards = this.cards\r\n        })\r\n        cardParent.add(this.cardContainer.cardGroup)\r\n        this.proxyGroups[this.currentProxyGroupIndex].refreshTargets()\r\n        this.toStatic()\r\n    }\r\n\r\n    update() {\r\n        this.cardContainer.update()\r\n        this.cards.forEach(card => {\r\n            card.update()\r\n        })\r\n    }\r\n\r\n    toStatic() {\r\n        if (this.proxyGroups[this.currentProxyGroupIndex].isCurrentFocused) {\r\n            this.proxyGroups[this.currentProxyGroupIndex].toStatic()\r\n        }\r\n    }\r\n    focusForward() {\r\n        this.proxyGroups[this.currentProxyGroupIndex].focusForward()\r\n    }\r\n    focusBackward() {\r\n        this.proxyGroups[this.currentProxyGroupIndex].focusBackward()\r\n    }\r\n    focusOnCard(focusMesh: THREE.Object3D) {\r\n        let cardIndex = 0\r\n        for (; cardIndex < this.cards.length; cardIndex++) {\r\n            if (this.cards[cardIndex].cardMeshFront == focusMesh || this.cards[cardIndex].cardMeshBack == focusMesh) {\r\n                this.proxyGroups[this.currentProxyGroupIndex].focusOnCard(cardIndex)\r\n                break\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport { ProxyGroup, ProxyManager }","import * as THREE from 'three'\r\nimport { Stats } from 'three-stats'\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls'\r\nimport { CustomCSS3DRenderer } from '../FrontPage3.0/CustomCSS3DRenderer'\r\n// import { DampingVector3Controller } from '../Three/Utils'\r\nimport { ContainerProxyConfig, CardProxyConfig } from './ProxyConfig'\r\nimport CardContainer from './CardContainer'\r\nimport { ProxyGroup, ProxyManager } from './Proxy'\r\nimport { SQWater } from '../Three/SQWater'\r\n\r\nclass FrontPageManager {\r\n    container: HTMLElement\r\n    renderer: THREE.WebGLRenderer\r\n    scene: THREE.Scene\r\n    stats: Stats\r\n\r\n    // cursor position\r\n    mousePosX: number\r\n    mousePosY: number\r\n    pointer: THREE.Vector2\r\n\r\n    // camera\r\n    camera: THREE.PerspectiveCamera\r\n    cameraBasicLookAt: THREE.Vector3\r\n    cameraTargetPosition: THREE.Vector3\r\n    // controls: OrbitControls\r\n\r\n    // camera animations\r\n    cameraPositionController: CardContainer\r\n    cameraWithMouseRotateFactor: number\r\n\r\n    // intersections\r\n    raycaster: THREE.Raycaster\r\n    intersectObjs: Array<THREE.Mesh>\r\n\r\n    // css\r\n    cssScene: THREE.Scene\r\n    cssRenderer: CustomCSS3DRenderer | undefined\r\n\r\n    // loading manager\r\n    loadingManager: THREE.LoadingManager\r\n\r\n    // scene pausing\r\n    isScenePaused: boolean\r\n\r\n    // cards\r\n    cardContainer: THREE.Object3D\r\n    cardProxyManager: ProxyManager\r\n\r\n    // mouse wheel controls\r\n    lastMouseWheelStartTime: number\r\n    lastMouseWheelTime: number\r\n    lastMouseWheelIsForward: boolean\r\n    lastMouseWheelCount: number\r\n    mouseWheelGapTime: number\r\n    \r\n\r\n    constructor(_container: HTMLElement,\r\n        onLoad?: () => void,\r\n        onProgress?: (url: string, loaded: number, total: number) => void,\r\n        onError?: (url: string) => void,\r\n        onCardFocus?: (index: number) => any,\r\n        onCardRouteJump?: (url: string) => any\r\n    ) {\r\n        // *********** basic settings ***********\r\n        this.container = _container\r\n        this.camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 1, 5000 )\r\n        this.renderer = new THREE.WebGLRenderer( {alpha: true, antialias: true} )\r\n        this.renderer.setClearColor( 0xffffff )\r\n        this.renderer.setPixelRatio( window.devicePixelRatio )\r\n        this.renderer.setSize(window.innerWidth, window.innerHeight)\r\n        this.renderer.domElement.style.position = 'absolute'\r\n        this.renderer.domElement.style.top = '0px'\r\n        this.renderer.domElement.style.left = '0px'\r\n        this.container.appendChild( this.renderer.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        // this.renderer.shadowMap.enabled = true\r\n        // this.renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n        // TODO: (debug stats)\r\n        this.stats = new Stats()\r\n        // this.stats.domElement.style.zIndex = '100'\r\n        this.container.appendChild( this.stats.domElement )\r\n        // this.controls = new OrbitControls(this.camera, this.container)\r\n        this.cameraBasicLookAt = new THREE.Vector3(0)\r\n        this.cameraTargetPosition = new THREE.Vector3(0, 100, 350)\r\n        this.camera.position.copy(this.cameraTargetPosition)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n\r\n        this.scene = new THREE.Scene()\r\n        this.cssScene = new THREE.Scene()\r\n\r\n        // loading manager\r\n        this.loadingManager = new THREE.LoadingManager(() => {\r\n            if (onLoad) {\r\n                onLoad()\r\n                // this.stackCard()\r\n            }\r\n        }, (url: string, loaded: number, total: number) => {\r\n            if (onProgress) {\r\n                onProgress(url, loaded, total)\r\n            }\r\n        }, (url) => {\r\n            if (onError) {\r\n                onError(url)\r\n            }\r\n        })\r\n        if (onLoad) {\r\n            onLoad()\r\n        }\r\n        \r\n        const waterGeometry = new THREE.PlaneGeometry( 2000, 2000 )\r\n        const water = new SQWater( waterGeometry, this.scene, {\r\n            // color: params.color,\r\n            // scale: params.scale,\r\n            color: new THREE.Color(0xffff00),\r\n            flowDirection: new THREE.Vector2( 1, 1 ),\r\n            textureWidth: 1024,\r\n            textureHeight: 1024\r\n        } );\r\n\r\n        water.position.y = -80;\r\n        water.rotation.x = Math.PI * - 0.5;\r\n        this.scene.add( water );\r\n\r\n        //\r\n        this.intersectObjs = []\r\n        this.cardContainer = new THREE.Object3D()\r\n        this.cardProxyManager = new ProxyManager()\r\n        this.scene.add(this.cardContainer)\r\n\r\n\r\n        // *********** raycast intersections ***********\r\n        this.raycaster = new THREE.Raycaster()\r\n        \r\n        \r\n        this.lastMouseWheelStartTime = 0\r\n        this.lastMouseWheelTime = 0\r\n        this.mouseWheelGapTime = 100\r\n        this.lastMouseWheelCount = 0\r\n        this.lastMouseWheelIsForward = true\r\n\r\n        // *********** camera animations ***********\r\n        this.cameraPositionController = new CardContainer(0.01, 0.7, 0.8)\r\n        this.cameraWithMouseRotateFactor = 35\r\n\r\n        // *********** events ***********\r\n        this.mousePosX = 0\r\n        this.mousePosY = 0\r\n        this.pointer = new THREE.Vector2()\r\n\r\n        // *********** animate ***********\r\n        this.isScenePaused = false\r\n        this.resumeScene()\r\n    }\r\n\r\n    animate = () => {\r\n        if (this.isScenePaused) {\r\n            return\r\n        }\r\n        requestAnimationFrame( this.animate )\r\n        this.updateCamera()\r\n        // this.controls.update()\r\n        this.render()\r\n        this.stats.update()\r\n        this.cardProxyManager.update()\r\n        // this.controls.update()\r\n    }\r\n\r\n    render ()\r\n    {\r\n        this.renderer.render(this.scene, this.camera)\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.render(this.cssScene, this.camera)\r\n        }\r\n    }\r\n\r\n    onWindowResize = () => {\r\n        this.camera.aspect = window.innerWidth / window.innerHeight\r\n        this.camera.updateProjectionMatrix()\r\n        this.renderer.setSize( window.innerWidth, window.innerHeight )\r\n        if (this.cssRenderer) {\r\n            this.cssRenderer.setSize( window.innerWidth, window.innerHeight )\r\n        }\r\n    }\r\n\r\n    onMouseWheel = (e: WheelEvent) => {\r\n        const currentTime = Date.now()\r\n        if (currentTime - this.lastMouseWheelTime < this.mouseWheelGapTime) {\r\n            // continue to process last wheel\r\n            if ((e.deltaY > 0 && this.lastMouseWheelIsForward) || (e.deltaY < 0 && !this.lastMouseWheelIsForward)) {\r\n                // moving in the same direction\r\n                if (\r\n                    (currentTime - this.lastMouseWheelStartTime) / this.mouseWheelGapTime > this.lastMouseWheelCount-1\r\n                     && this.lastMouseWheelCount > 1) {\r\n                    console.log('wheel')\r\n                    this.doWheel(e, currentTime)\r\n                }\r\n            } else {\r\n                this.lastMouseWheelStartTime = currentTime\r\n                this.lastMouseWheelCount = 0\r\n                this.doWheel(e, currentTime)\r\n            }\r\n        } else {\r\n            this.lastMouseWheelStartTime = currentTime\r\n            this.lastMouseWheelCount = 0\r\n            this.doWheel(e, currentTime)\r\n        }\r\n    }\r\n\r\n    doWheel (e: WheelEvent, currentTime: number) {\r\n        this.lastMouseWheelTime = currentTime\r\n        this.lastMouseWheelCount += 1\r\n        if (e.deltaY > 0) {\r\n            this.lastMouseWheelIsForward = true\r\n            this.cardProxyManager.focusForward()\r\n        } else {\r\n            this.lastMouseWheelIsForward = false\r\n            this.cardProxyManager.focusBackward()\r\n        }\r\n    }\r\n    \r\n    onMouseMove = (e: MouseEvent) => {\r\n        this.mousePosX = e.clientX\r\n        this.mousePosY = e.clientY\r\n        this.pointer.x = ( e.clientX / window.innerWidth ) * 2 - 1;\r\n\t\tthis.pointer.y = - ( e.clientY / window.innerHeight ) * 2 + 1;\r\n\r\n        // this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        // const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        // if (intersects.length == 1) {\r\n        //     console.log('intersected:', intersects[0])\r\n        // }\r\n    }\r\n\r\n    onClick = (e: MouseEvent) => {\r\n        this.raycaster.setFromCamera( this.pointer, this.camera )\r\n        const intersects = this.raycaster.intersectObjects( this.intersectObjs, false )\r\n        if (intersects.length >= 1) {\r\n            this.cardProxyManager.focusOnCard(intersects[0].object)\r\n        } else {\r\n            this.cardProxyManager.toStatic()\r\n        }\r\n    }\r\n\r\n\r\n    updateCamera() {\r\n        const cameraDist = this.cameraTargetPosition.length()\r\n        const dampPos = (new THREE.Vector3(\r\n            this.pointer.x * this.cameraWithMouseRotateFactor,\r\n            this.pointer.y * this.cameraWithMouseRotateFactor * this.cameraTargetPosition.z / cameraDist,\r\n            -this.pointer.y * this.cameraWithMouseRotateFactor * this.cameraTargetPosition.y / cameraDist,\r\n        )).add(this.cameraTargetPosition)\r\n        this.cameraPositionController.setTargetProxy({\r\n            position: dampPos,\r\n            rotation: new THREE.Euler(0, 0, this.pointer.x * 0.05)\r\n        })\r\n        this.cameraPositionController.update()\r\n        this.camera.position.copy(this.cameraPositionController.p_s)\r\n        this.camera.lookAt(this.cameraBasicLookAt)\r\n        this.camera.rotation.z = this.cameraPositionController.r_s.z\r\n    }\r\n\r\n    pauseScene () {\r\n        this.isScenePaused = true\r\n        const self = this\r\n        window.removeEventListener( 'resize', self.onWindowResize )\r\n        window.removeEventListener( 'wheel', self.onMouseWheel )\r\n        window.removeEventListener('mousemove', self.onMouseMove )\r\n        this.container.removeEventListener( 'click', self.onClick )\r\n    }\r\n    resumeScene () {\r\n        this.isScenePaused = false\r\n        this.animate()\r\n        const self = this\r\n        window.addEventListener( 'resize', self.onWindowResize )\r\n        window.addEventListener( 'wheel', self.onMouseWheel )\r\n        window.addEventListener('mousemove', self.onMouseMove )\r\n        this.container.addEventListener( 'click', self.onClick )\r\n    }\r\n\r\n    registerNewProxyGroup(proxyGroup: ProxyGroup) {\r\n        this.cardProxyManager.registerProxyGroup(proxyGroup)\r\n    }\r\n\r\n    initCards() {\r\n        this.cardProxyManager.initCards(this.cardContainer)\r\n        this.cardProxyManager.cards.forEach(card => {\r\n            this.intersectObjs.push(card.cardMeshFront)\r\n            this.intersectObjs.push(card.cardMeshBack)\r\n        })\r\n        this.cardProxyManager.swapProxyGroup(0)\r\n        this.cardProxyManager.toStatic()\r\n    }\r\n\r\n    swapProxyGroup(left: boolean) {\r\n        if (left) {\r\n            this.cardProxyManager.swapProxyGroup(\r\n                (this.cardProxyManager.currentProxyGroupIndex + this.cardProxyManager.proxyGroups.length - 1) % this.cardProxyManager.proxyGroups.length\r\n            )\r\n        }\r\n        else {\r\n            this.cardProxyManager.swapProxyGroup((this.cardProxyManager.currentProxyGroupIndex + 1) % this.cardProxyManager.proxyGroups.length)\r\n        }\r\n        console.log(this.cardProxyManager.currentProxyGroupIndex)\r\n        if (this.cardProxyManager.currentProxyGroupIndex == 0) {\r\n            this.cameraTargetPosition = new THREE.Vector3(0, 100, 350)\r\n        } else if (this.cardProxyManager.currentProxyGroupIndex == 1) {\r\n            this.cameraTargetPosition = new THREE.Vector3(0, 0, 350)\r\n        } else {\r\n            this.cameraTargetPosition = new THREE.Vector3(0, 300, 350)\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n}\r\n\r\nexport { FrontPageManager }","import * as THREE from 'three'\r\nimport { CardProxyConfig, ContainerProxyConfig } from '../ProxyConfig'\r\nimport { ProxyGroup } from '../Proxy'\r\n\r\nexport function testStyleBigCards3(setText: (t1: string, t2: string) => any) {\r\n    const radius = 100\r\n    const cardHeight = 130\r\n    const cardWidth = 85\r\n    const visibleCardCount = 3\r\n    const angle = 0.3\r\n    const ygap = 15\r\n\r\n    const cardImgUrls = [\r\n        'mw/hermes.jpg',\r\n        'mw/louisvuitton.jpg',\r\n        'mw/chanel.jpg',\r\n    ]\r\n\r\n    const brandList = [\r\n        'Hermès',\r\n        'Louis Vuitton',\r\n        'Chanel'\r\n    ]\r\n\r\n    const cardPositions = [\r\n        new THREE.Vector3(-110, 0, 8),\r\n        new THREE.Vector3(-2, 30, -22),\r\n        new THREE.Vector3(110, 14, 13)\r\n    ]\r\n\r\n    const cardRotations = [\r\n        new THREE.Vector3(-0.29, -0.25, -0.18),\r\n        new THREE.Vector3(-0.4, 0.06, 0.11),\r\n        new THREE.Vector3(-0.33, 0.12, 0.2)\r\n    ]\r\n\r\n    const onStatic = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>) {\r\n        containerProxyConfig.position.set(0, 0, 0)\r\n        containerProxyConfig.rotation.set(0, 0, 0)\r\n        for (let i = 0; i < visibleCardCount; i++) {\r\n            cardProxyConfigs[i].position.copy(cardPositions[i])\r\n            cardProxyConfigs[i].rotation.set(cardRotations[i].x, cardRotations[i].y, cardRotations[i].z)\r\n            cardProxyConfigs[i].scale.set(cardWidth, cardHeight)\r\n            cardProxyConfigs[i].frontColor.set(new THREE.Color(1, i/visibleCardCount, 0))\r\n            cardProxyConfigs[i].backColor.set(0xa0a0a0)\r\n            cardProxyConfigs[i].frontImgUrl = cardImgUrls[i]\r\n            cardProxyConfigs[i].frontImgUrl = cardImgUrls[i]\r\n        }\r\n        setText('This is most wanted', '')\r\n    }\r\n    const onFocusIndex = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>,\r\n        isCurrentFocused: boolean, oldFocusIndex: number, newFocusIndex: number) {\r\n        for (let i = 0; i < visibleCardCount; i++) {\r\n            if (i == newFocusIndex) {\r\n                cardProxyConfigs[i].rotation.set(-0.5, 0, 0)\r\n            } else {\r\n                // cardProxyConfigs[i].position.copy(cardPositions[i])\r\n                cardProxyConfigs[i].rotation.set(cardRotations[i].x, cardRotations[i].y, cardRotations[i].z)\r\n            }\r\n        }\r\n        setText('This is most wanted', brandList[newFocusIndex])\r\n    }\r\n\r\n    return new ProxyGroup(visibleCardCount, false, onStatic, onFocusIndex)\r\n}\r\n\r\nexport class StyleCarousel {\r\n    CAROUSEL_ANGLE: number\r\n    constructor() {\r\n        this.CAROUSEL_ANGLE = 0\r\n    }\r\n    \r\n    testStyleCarousel(setText: (t1: string, t2: string) => any) {\r\n        const radius = 190\r\n        const cardHeight = 110\r\n        const cardWidth = 75\r\n        const visibleCardCount = 10\r\n        const self = this\r\n\r\n        \r\n        const cardImgUrls = [\r\n            'op/1.png',\r\n            'op/2.png',\r\n            'op/3.png',\r\n            'op/4.png',\r\n            'op/5.png',\r\n            'op/6.png',\r\n            'op/7.png',\r\n            'op/8.png',\r\n            'op/9.png',\r\n            'op/10.png'\r\n        ]\r\n\r\n        const t1List = [\r\n            'Dream catcher bag',\r\n            'Silk pouches',\r\n            'Star rosette',\r\n            'Lovebirds key ring',\r\n            'Handbag',\r\n            'Canvas hat','Flat case','Lasso necklace PM','Tea cup candle holder','Silk double tour bracelet'\r\n        ]\r\n\r\n        const onStatic = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>) {\r\n            // CAROUSEL_ANGLE = 0\r\n            containerProxyConfig.position.set(0, 0, 0)\r\n            containerProxyConfig.rotation.set(0, self.CAROUSEL_ANGLE, 0)\r\n            for (let i = 0; i < visibleCardCount; i++) {\r\n                let angle = i*Math.PI*2/visibleCardCount + Math.PI/2\r\n                cardProxyConfigs[i].position.set(Math.cos(angle) * radius, 0, Math.sin(angle) * radius)\r\n                cardProxyConfigs[i].rotation.set(0, -angle + Math.PI / 2, 0)\r\n                cardProxyConfigs[i].scale.set(cardWidth, cardHeight)\r\n                cardProxyConfigs[i].frontColor.set(new THREE.Color(1, i/visibleCardCount, 0))\r\n                cardProxyConfigs[i].backColor.set(0xa0a0a0)\r\n                cardProxyConfigs[i].frontImgUrl = cardImgUrls[i]\r\n                cardProxyConfigs[i].backImgUrl = cardImgUrls[i]\r\n            }\r\n            setText('this is our picks', t1List[0]+'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>')\r\n        }\r\n        const onFocusIndex = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>,\r\n            isCurrentFocused: boolean, oldFocusIndex: number, newFocusIndex: number) {\r\n            console.log(oldFocusIndex, newFocusIndex)\r\n            if (oldFocusIndex < newFocusIndex) {\r\n                oldFocusIndex += visibleCardCount\r\n            }\r\n            self.CAROUSEL_ANGLE += (newFocusIndex - oldFocusIndex)*Math.PI*2/visibleCardCount\r\n            // let containerAngle = newFocusIndex*Math.PI*2/visibleCardCount\r\n            if (oldFocusIndex - newFocusIndex > visibleCardCount / 2) {\r\n                self.CAROUSEL_ANGLE += Math.PI*2\r\n            }\r\n            containerProxyConfig.rotation.set(0, self.CAROUSEL_ANGLE, 0)\r\n            // for (let i = 0; i < visibleCardCount; i++) {\r\n            //     let angle = i*Math.PI*2/visibleCardCount + Math.PI/2\r\n            //     cardProxyConfigs[i].position.set(Math.cos(angle) * radius, 0, Math.sin(angle) * radius)\r\n            //     // cardProxyConfigs[i].frontImgUrl = ''\r\n            //     // cardProxyConfigs[i].rotation.set(0, Math.PI / 2, 0)\r\n            //     if (i == newFocusIndex) {\r\n            //         // cardProxyConfigs[i].frontImgUrl = 'checkerboard.png'\r\n            //         cardProxyConfigs[i].position.set(Math.cos(angle) * (radius + 10), 0, Math.sin(angle) * (radius + 10))\r\n            //     }\r\n            // }\r\n            setText('this is our picks', t1List[newFocusIndex]+'<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>')\r\n        }\r\n\r\n        return new ProxyGroup(visibleCardCount, true, onStatic, onFocusIndex)\r\n    }\r\n}\r\n\r\n\r\nexport function testStyleStairs(setText: (t1: string, t2: string) => any) {\r\n    const radius = 100\r\n    const cardHeight = 60\r\n    const cardWidth = 40\r\n    const visibleCardCount = 7\r\n    const angle = 0.3\r\n    const ygap = 15\r\n    const onStatic = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>) {\r\n        containerProxyConfig.position.set(0, 80, 0)\r\n        containerProxyConfig.rotation.set(0, visibleCardCount * angle / 2, 0)\r\n        for (let i = 0; i < visibleCardCount; i++) {\r\n            let a = i*angle + Math.PI / 2\r\n            cardProxyConfigs[i].position.set(Math.cos(a) * radius, -i*ygap, Math.sin(a) * radius)\r\n            cardProxyConfigs[i].rotation.set(Math.PI/2, Math.PI, -a-Math.PI/2)\r\n            cardProxyConfigs[i].scale.set(cardWidth, cardHeight)\r\n            cardProxyConfigs[i].frontColor.set(new THREE.Color(1, i/visibleCardCount, 0))\r\n            cardProxyConfigs[i].backColor.set(0xa0a0a0)\r\n            cardProxyConfigs[i].frontImgUrl = ''\r\n            cardProxyConfigs[i].backImgUrl = ''\r\n        }\r\n        setText('About us', '')\r\n    }\r\n    const onFocusIndex = function (containerProxyConfig: ContainerProxyConfig, cardProxyConfigs: Array<CardProxyConfig>,\r\n        isCurrentFocused: boolean, oldFocusIndex: number, newFocusIndex: number) {\r\n\r\n        containerProxyConfig.rotation.set(0, (newFocusIndex) * angle, 0)\r\n        for (let i = 0; i < visibleCardCount; i++) {\r\n            let a = i*angle + Math.PI / 2\r\n            cardProxyConfigs[i].position.set(Math.cos(a) * radius, -i*ygap, Math.sin(a) * radius)\r\n            cardProxyConfigs[i].rotation.set(Math.PI/2, Math.PI, -a-Math.PI/2)\r\n            cardProxyConfigs[i].scale.set(cardWidth, cardHeight)\r\n            cardProxyConfigs[i].frontColor.set(new THREE.Color(1, i/visibleCardCount, 0))\r\n            cardProxyConfigs[i].backColor.set(0xa0a0a0)\r\n            cardProxyConfigs[i].frontImgUrl = ''\r\n            // cardProxyConfigs[i].backImgUrl = ''\r\n            // cardProxyConfigs[i].rotation.set(0, Math.PI / 2, 0)\r\n            if (i == newFocusIndex) {\r\n                cardProxyConfigs[i].frontImgUrl = 'checkerboard.png'\r\n                cardProxyConfigs[i].position.set(Math.cos(a) * (radius + 20), -i*ygap, Math.sin(a) * (radius + 20))\r\n            }\r\n        }\r\n    }\r\n\r\n    return new ProxyGroup(visibleCardCount, false, onStatic, onFocusIndex)\r\n}\r\n\r\n","\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\r\nimport * as THREE from 'three'\r\nimport Vue from 'vue'\r\nimport { FrontPageManager } from '../scripts/FrontPage4.0/Scene'\r\n// import ProxyConfig from '../scripts/FrontPage4.0/ProxyConfig'\r\nimport { testStyleBigCards3, StyleCarousel, testStyleStairs } from '../scripts/FrontPage4.0/ProxyStyles/TestStyles'\r\n\r\ntype Data = {\r\n    fpm: FrontPageManager | null,\r\n    loadingStat: {\r\n        loaded: number,\r\n        total: number,\r\n        isLoaded: boolean,\r\n        noLoadingStat: boolean\r\n    },\r\n    t1: string,\r\n    t2: string,\r\n    styleCarousel: StyleCarousel\r\n}\r\n\r\nexport default Vue.extend({\r\n    data(): Data {\r\n        return {\r\n            fpm: null,\r\n            loadingStat: {\r\n                loaded: 0,\r\n                total: 1,\r\n                isLoaded: false,\r\n                noLoadingStat: false\r\n            },\r\n            t1: '',\r\n            t2: '',\r\n            styleCarousel: new StyleCarousel()\r\n        }\r\n    },\r\n    mounted() {\r\n        const self = this\r\n        // for (let i = 0; i < 10; i++) {\r\n        //     this.cardInfos.push(\r\n        //         {\r\n        //             imgUrl: `card${Math.floor(i%3)+1}.jpg`,\r\n        //             url: 'fakeUrl_' + i\r\n        //         }\r\n        //     )\r\n        // }\r\n        if (this.$refs['canvas-container'] instanceof HTMLElement) {\r\n            this.fpm = new FrontPageManager(\r\n                this.$refs['canvas-container'],\r\n                // this.cardInfos,\r\n                () => {\r\n                    console.log('loaded')\r\n                    self.loadingStat.isLoaded = true\r\n                    setTimeout(() => {\r\n                        self.loadingStat.noLoadingStat = true\r\n                    }, 501)\r\n                },\r\n                (_, loaded, total) => {\r\n                    this.loadingStat.loaded = loaded\r\n                    this.loadingStat.total = total\r\n                },\r\n                (url) => {\r\n                    console.error('failed to load asset: ' + url)\r\n                    self.loadingStat.isLoaded = true\r\n                },\r\n                (index) => {\r\n                    console.log('focused on card: ', index)\r\n                }\r\n            )\r\n            // if (this.$refs['dom3d-container'] instanceof HTMLElement && this.$refs['dom3d-test'] instanceof HTMLElement) {\r\n            //     this.fpm.registerCSSCoordinator(this.$refs['dom3d-container'], this.$refs['dom3d-test'], new THREE.Vector3(-200, 200, 0))\r\n            // }\r\n\r\n            this.fpm.registerNewProxyGroup(testStyleBigCards3(this.setText))\r\n            this.fpm.registerNewProxyGroup(this.styleCarousel.testStyleCarousel(this.setText))\r\n            this.fpm.registerNewProxyGroup(testStyleStairs(this.setText))\r\n            this.fpm.initCards()\r\n\r\n        }\r\n    },\r\n    methods: {\r\n        swapLeft() {\r\n            this.styleCarousel.CAROUSEL_ANGLE = 0\r\n            this.fpm?.swapProxyGroup(true)\r\n        },\r\n        swapRight() {\r\n            this.styleCarousel.CAROUSEL_ANGLE = 0\r\n            this.fpm?.swapProxyGroup(false)\r\n        },\r\n        setText(t1: string, t2: string) {\r\n            this.t1 = t1\r\n            this.t2 = t2\r\n        }\r\n    }\r\n})\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--15-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/ts-loader/index.js??ref--15-3!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./ThreeFrontpageTest2.vue?vue&type=template&id=62394b51&scoped=true&\"\nimport script from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nexport * from \"./ThreeFrontpageTest2.vue?vue&type=script&lang=ts&\"\nimport style0 from \"./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=62394b51&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"62394b51\",\n  null\n  \n)\n\nexport default component.exports","var fails = require('../internals/fails');\nvar wellKnownSymbol = require('../internals/well-known-symbol');\nvar V8_VERSION = require('../internals/engine-v8-version');\n\nvar SPECIES = wellKnownSymbol('species');\n\nmodule.exports = function (METHOD_NAME) {\n  // We can't use this feature detection in V8 since it causes\n  // deoptimization and serious performance degradation\n  // https://github.com/zloirock/core-js/issues/677\n  return V8_VERSION >= 51 || !fails(function () {\n    var array = [];\n    var constructor = array.constructor = {};\n    constructor[SPECIES] = function () {\n      return { foo: 1 };\n    };\n    return array[METHOD_NAME](Boolean).foo !== 1;\n  });\n};\n","'use strict';\nvar $ = require('../internals/export');\nvar uncurryThis = require('../internals/function-uncurry-this');\nvar aCallable = require('../internals/a-callable');\nvar toObject = require('../internals/to-object');\nvar lengthOfArrayLike = require('../internals/length-of-array-like');\nvar toString = require('../internals/to-string');\nvar fails = require('../internals/fails');\nvar internalSort = require('../internals/array-sort');\nvar arrayMethodIsStrict = require('../internals/array-method-is-strict');\nvar FF = require('../internals/engine-ff-version');\nvar IE_OR_EDGE = require('../internals/engine-is-ie-or-edge');\nvar V8 = require('../internals/engine-v8-version');\nvar WEBKIT = require('../internals/engine-webkit-version');\n\nvar test = [];\nvar un$Sort = uncurryThis(test.sort);\nvar push = uncurryThis(test.push);\n\n// IE8-\nvar FAILS_ON_UNDEFINED = fails(function () {\n  test.sort(undefined);\n});\n// V8 bug\nvar FAILS_ON_NULL = fails(function () {\n  test.sort(null);\n});\n// Old WebKit\nvar STRICT_METHOD = arrayMethodIsStrict('sort');\n\nvar STABLE_SORT = !fails(function () {\n  // feature detection can be too slow, so check engines versions\n  if (V8) return V8 < 70;\n  if (FF && FF > 3) return;\n  if (IE_OR_EDGE) return true;\n  if (WEBKIT) return WEBKIT < 603;\n\n  var result = '';\n  var code, chr, value, index;\n\n  // generate an array with more 512 elements (Chakra and old V8 fails only in this case)\n  for (code = 65; code < 76; code++) {\n    chr = String.fromCharCode(code);\n\n    switch (code) {\n      case 66: case 69: case 70: case 72: value = 3; break;\n      case 68: case 71: value = 4; break;\n      default: value = 2;\n    }\n\n    for (index = 0; index < 47; index++) {\n      test.push({ k: chr + index, v: value });\n    }\n  }\n\n  test.sort(function (a, b) { return b.v - a.v; });\n\n  for (index = 0; index < test.length; index++) {\n    chr = test[index].k.charAt(0);\n    if (result.charAt(result.length - 1) !== chr) result += chr;\n  }\n\n  return result !== 'DGBEFHACIJK';\n});\n\nvar FORCED = FAILS_ON_UNDEFINED || !FAILS_ON_NULL || !STRICT_METHOD || !STABLE_SORT;\n\nvar getSortCompare = function (comparefn) {\n  return function (x, y) {\n    if (y === undefined) return -1;\n    if (x === undefined) return 1;\n    if (comparefn !== undefined) return +comparefn(x, y) || 0;\n    return toString(x) > toString(y) ? 1 : -1;\n  };\n};\n\n// `Array.prototype.sort` method\n// https://tc39.es/ecma262/#sec-array.prototype.sort\n$({ target: 'Array', proto: true, forced: FORCED }, {\n  sort: function sort(comparefn) {\n    if (comparefn !== undefined) aCallable(comparefn);\n\n    var array = toObject(this);\n\n    if (STABLE_SORT) return comparefn === undefined ? un$Sort(array) : un$Sort(array, comparefn);\n\n    var items = [];\n    var arrayLength = lengthOfArrayLike(array);\n    var itemsLength, index;\n\n    for (index = 0; index < arrayLength; index++) {\n      if (index in array) push(items, array[index]);\n    }\n\n    internalSort(items, getSortCompare(comparefn));\n\n    itemsLength = items.length;\n    index = 0;\n\n    while (index < itemsLength) array[index] = items[index++];\n    while (index < arrayLength) delete array[index++];\n\n    return array;\n  }\n});\n","var userAgent = require('../internals/engine-user-agent');\n\nvar webkit = userAgent.match(/AppleWebKit\\/(\\d+)\\./);\n\nmodule.exports = !!webkit && +webkit[1];\n","export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--7-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--7-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--7-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--1-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./ThreeFrontpageTest2.vue?vue&type=style&index=0&id=62394b51&scoped=true&lang=css&\"","var arraySlice = require('../internals/array-slice-simple');\n\nvar floor = Math.floor;\n\nvar mergeSort = function (array, comparefn) {\n  var length = array.length;\n  var middle = floor(length / 2);\n  return length < 8 ? insertionSort(array, comparefn) : merge(\n    array,\n    mergeSort(arraySlice(array, 0, middle), comparefn),\n    mergeSort(arraySlice(array, middle), comparefn),\n    comparefn\n  );\n};\n\nvar insertionSort = function (array, comparefn) {\n  var length = array.length;\n  var i = 1;\n  var element, j;\n\n  while (i < length) {\n    j = i;\n    element = array[i];\n    while (j && comparefn(array[j - 1], element) > 0) {\n      array[j] = array[--j];\n    }\n    if (j !== i++) array[j] = element;\n  } return array;\n};\n\nvar merge = function (array, left, right, comparefn) {\n  var llength = left.length;\n  var rlength = right.length;\n  var lindex = 0;\n  var rindex = 0;\n\n  while (lindex < llength || rindex < rlength) {\n    array[lindex + rindex] = (lindex < llength && rindex < rlength)\n      ? comparefn(left[lindex], right[rindex]) <= 0 ? left[lindex++] : right[rindex++]\n      : lindex < llength ? left[lindex++] : right[rindex++];\n  } return array;\n};\n\nmodule.exports = mergeSort;\n","var $ = require('../internals/export');\nvar toObject = require('../internals/to-object');\nvar nativeKeys = require('../internals/object-keys');\nvar fails = require('../internals/fails');\n\nvar FAILS_ON_PRIMITIVES = fails(function () { nativeKeys(1); });\n\n// `Object.keys` method\n// https://tc39.es/ecma262/#sec-object.keys\n$({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES }, {\n  keys: function keys(it) {\n    return nativeKeys(toObject(it));\n  }\n});\n","'use strict';\nvar $ = require('../internals/export');\nvar $map = require('../internals/array-iteration').map;\nvar arrayMethodHasSpeciesSupport = require('../internals/array-method-has-species-support');\n\nvar HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('map');\n\n// `Array.prototype.map` method\n// https://tc39.es/ecma262/#sec-array.prototype.map\n// with adding support of @@species\n$({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT }, {\n  map: function map(callbackfn /* , thisArg */) {\n    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);\n  }\n});\n","var UA = require('../internals/engine-user-agent');\n\nmodule.exports = /MSIE|Trident/.test(UA);\n","import {\n\tColor,\n\tMatrix4,\n\tMesh,\n\tPerspectiveCamera,\n\tPlane,\n\tShaderMaterial,\n\tUniformsUtils,\n\tVector3,\n\tVector4,\n\tWebGLRenderTarget\n} from 'three';\n\nclass Reflector extends Mesh {\n\n\tconstructor( geometry, options = {} ) {\n\n\t\tsuper( geometry );\n\n\t\tthis.type = 'Reflector';\n\n\t\tconst scope = this;\n\n\t\tconst color = ( options.color !== undefined ) ? new Color( options.color ) : new Color( 0x7F7F7F );\n\t\tconst textureWidth = options.textureWidth || 512;\n\t\tconst textureHeight = options.textureHeight || 512;\n\t\tconst clipBias = options.clipBias || 0;\n\t\tconst shader = options.shader || Reflector.ReflectorShader;\n\n\t\t//\n\n\t\tconst reflectorPlane = new Plane();\n\t\tconst normal = new Vector3();\n\t\tconst reflectorWorldPosition = new Vector3();\n\t\tconst cameraWorldPosition = new Vector3();\n\t\tconst rotationMatrix = new Matrix4();\n\t\tconst lookAtPosition = new Vector3( 0, 0, - 1 );\n\t\tconst clipPlane = new Vector4();\n\n\t\tconst view = new Vector3();\n\t\tconst target = new Vector3();\n\t\tconst q = new Vector4();\n\n\t\tconst textureMatrix = new Matrix4();\n\t\tconst virtualCamera = new PerspectiveCamera();\n\n\t\tconst renderTarget = new WebGLRenderTarget( textureWidth, textureHeight );\n\n\t\tconst material = new ShaderMaterial( {\n\t\t\tuniforms: UniformsUtils.clone( shader.uniforms ),\n\t\t\tfragmentShader: shader.fragmentShader,\n\t\t\tvertexShader: shader.vertexShader\n\t\t} );\n\n\t\tmaterial.uniforms[ 'tDiffuse' ].value = renderTarget.texture;\n\t\tmaterial.uniforms[ 'color' ].value = color;\n\t\tmaterial.uniforms[ 'textureMatrix' ].value = textureMatrix;\n\n\t\tthis.material = material;\n\n\t\tthis.onBeforeRender = function ( renderer, scene, camera ) {\n\n\t\t\treflectorWorldPosition.setFromMatrixPosition( scope.matrixWorld );\n\t\t\tcameraWorldPosition.setFromMatrixPosition( camera.matrixWorld );\n\n\t\t\trotationMatrix.extractRotation( scope.matrixWorld );\n\n\t\t\tnormal.set( 0, 0, 1 );\n\t\t\tnormal.applyMatrix4( rotationMatrix );\n\n\t\t\tview.subVectors( reflectorWorldPosition, cameraWorldPosition );\n\n\t\t\t// Avoid rendering when reflector is facing away\n\n\t\t\tif ( view.dot( normal ) > 0 ) return;\n\n\t\t\tview.reflect( normal ).negate();\n\t\t\tview.add( reflectorWorldPosition );\n\n\t\t\trotationMatrix.extractRotation( camera.matrixWorld );\n\n\t\t\tlookAtPosition.set( 0, 0, - 1 );\n\t\t\tlookAtPosition.applyMatrix4( rotationMatrix );\n\t\t\tlookAtPosition.add( cameraWorldPosition );\n\n\t\t\ttarget.subVectors( reflectorWorldPosition, lookAtPosition );\n\t\t\ttarget.reflect( normal ).negate();\n\t\t\ttarget.add( reflectorWorldPosition );\n\n\t\t\tvirtualCamera.position.copy( view );\n\t\t\tvirtualCamera.up.set( 0, 1, 0 );\n\t\t\tvirtualCamera.up.applyMatrix4( rotationMatrix );\n\t\t\tvirtualCamera.up.reflect( normal );\n\t\t\tvirtualCamera.lookAt( target );\n\n\t\t\tvirtualCamera.far = camera.far; // Used in WebGLBackground\n\n\t\t\tvirtualCamera.updateMatrixWorld();\n\t\t\tvirtualCamera.projectionMatrix.copy( camera.projectionMatrix );\n\n\t\t\t// Update the texture matrix\n\t\t\ttextureMatrix.set(\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\n\t\t\t\t0.0, 0.0, 0.0, 1.0\n\t\t\t);\n\t\t\ttextureMatrix.multiply( virtualCamera.projectionMatrix );\n\t\t\ttextureMatrix.multiply( virtualCamera.matrixWorldInverse );\n\t\t\ttextureMatrix.multiply( scope.matrixWorld );\n\n\t\t\t// Now update projection matrix with new clip plane, implementing code from: http://www.terathon.com/code/oblique.html\n\t\t\t// Paper explaining this technique: http://www.terathon.com/lengyel/Lengyel-Oblique.pdf\n\t\t\treflectorPlane.setFromNormalAndCoplanarPoint( normal, reflectorWorldPosition );\n\t\t\treflectorPlane.applyMatrix4( virtualCamera.matrixWorldInverse );\n\n\t\t\tclipPlane.set( reflectorPlane.normal.x, reflectorPlane.normal.y, reflectorPlane.normal.z, reflectorPlane.constant );\n\n\t\t\tconst projectionMatrix = virtualCamera.projectionMatrix;\n\n\t\t\tq.x = ( Math.sign( clipPlane.x ) + projectionMatrix.elements[ 8 ] ) / projectionMatrix.elements[ 0 ];\n\t\t\tq.y = ( Math.sign( clipPlane.y ) + projectionMatrix.elements[ 9 ] ) / projectionMatrix.elements[ 5 ];\n\t\t\tq.z = - 1.0;\n\t\t\tq.w = ( 1.0 + projectionMatrix.elements[ 10 ] ) / projectionMatrix.elements[ 14 ];\n\n\t\t\t// Calculate the scaled plane vector\n\t\t\tclipPlane.multiplyScalar( 2.0 / clipPlane.dot( q ) );\n\n\t\t\t// Replacing the third row of the projection matrix\n\t\t\tprojectionMatrix.elements[ 2 ] = clipPlane.x;\n\t\t\tprojectionMatrix.elements[ 6 ] = clipPlane.y;\n\t\t\tprojectionMatrix.elements[ 10 ] = clipPlane.z + 1.0 - clipBias;\n\t\t\tprojectionMatrix.elements[ 14 ] = clipPlane.w;\n\n\t\t\t// Render\n\n\t\t\trenderTarget.texture.encoding = renderer.outputEncoding;\n\n\t\t\tscope.visible = false;\n\n\t\t\tconst currentRenderTarget = renderer.getRenderTarget();\n\n\t\t\tconst currentXrEnabled = renderer.xr.enabled;\n\t\t\tconst currentShadowAutoUpdate = renderer.shadowMap.autoUpdate;\n\n\t\t\trenderer.xr.enabled = false; // Avoid camera modification\n\t\t\trenderer.shadowMap.autoUpdate = false; // Avoid re-computing shadows\n\n\t\t\trenderer.setRenderTarget( renderTarget );\n\n\t\t\trenderer.state.buffers.depth.setMask( true ); // make sure the depth buffer is writable so it can be properly cleared, see #18897\n\n\t\t\tif ( renderer.autoClear === false ) renderer.clear();\n\t\t\trenderer.render( scene, virtualCamera );\n\n\t\t\trenderer.xr.enabled = currentXrEnabled;\n\t\t\trenderer.shadowMap.autoUpdate = currentShadowAutoUpdate;\n\n\t\t\trenderer.setRenderTarget( currentRenderTarget );\n\n\t\t\t// Restore viewport\n\n\t\t\tconst viewport = camera.viewport;\n\n\t\t\tif ( viewport !== undefined ) {\n\n\t\t\t\trenderer.state.viewport( viewport );\n\n\t\t\t}\n\n\t\t\tscope.visible = true;\n\n\t\t};\n\n\t\tthis.getRenderTarget = function () {\n\n\t\t\treturn renderTarget;\n\n\t\t};\n\n\t\tthis.dispose = function () {\n\n\t\t\trenderTarget.dispose();\n\t\t\tscope.material.dispose();\n\n\t\t};\n\n\t}\n\n}\n\nReflector.prototype.isReflector = true;\n\nReflector.ReflectorShader = {\n\n\tuniforms: {\n\n\t\t'color': {\n\t\t\tvalue: null\n\t\t},\n\n\t\t'tDiffuse': {\n\t\t\tvalue: null\n\t\t},\n\n\t\t'textureMatrix': {\n\t\t\tvalue: null\n\t\t}\n\n\t},\n\n\tvertexShader: /* glsl */`\n\t\tuniform mat4 textureMatrix;\n\t\tvarying vec4 vUv;\n\n\t\t#include <common>\n\t\t#include <logdepthbuf_pars_vertex>\n\n\t\tvoid main() {\n\n\t\t\tvUv = textureMatrix * vec4( position, 1.0 );\n\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t\t#include <logdepthbuf_vertex>\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\t\tuniform vec3 color;\n\t\tuniform sampler2D tDiffuse;\n\t\tvarying vec4 vUv;\n\n\t\t#include <logdepthbuf_pars_fragment>\n\n\t\tfloat blendOverlay( float base, float blend ) {\n\n\t\t\treturn( base < 0.5 ? ( 2.0 * base * blend ) : ( 1.0 - 2.0 * ( 1.0 - base ) * ( 1.0 - blend ) ) );\n\n\t\t}\n\n\t\tvec3 blendOverlay( vec3 base, vec3 blend ) {\n\n\t\t\treturn vec3( blendOverlay( base.r, blend.r ), blendOverlay( base.g, blend.g ), blendOverlay( base.b, blend.b ) );\n\n\t\t}\n\n\t\tvoid main() {\n\n\t\t\t#include <logdepthbuf_fragment>\n\n\t\t\tvec4 base = texture2DProj( tDiffuse, vUv );\n\t\t\tgl_FragColor = vec4( blendOverlay( base.rgb, color ), 1.0 );\n\n\t\t}`\n};\n\nexport { Reflector };\n","import {\r\n\tClock,\r\n\tColor,\r\n\tMatrix4,\r\n\tMesh,\r\n\tRepeatWrapping,\r\n\tShaderMaterial,\r\n\tTextureLoader,\r\n\tUniformsLib,\r\n\tUniformsUtils,\r\n\tVector2,\r\n\tVector4,\r\n    BufferGeometry,\r\n    Camera,\r\n    Material,\r\n    Group,\r\n    Scene\r\n} from 'three';\r\nimport { Reflector } from 'three/examples/jsm/objects/Reflector'\r\nimport { Refractor } from 'three/examples/jsm/objects/Refractor'\r\nimport { Water2Options } from 'three/examples/jsm/objects/Water2'\r\n/**\r\n * References:\r\n *\thttps://github.com/mrdoob/three.js/blob/dev/examples/jsm/objects/Water2.js\r\n *\r\n */\r\n\r\nclass SQWater extends Mesh {\r\n\r\n    material: ShaderMaterial\r\n\r\n\tconstructor( geometry: BufferGeometry, reflectionScene: Scene, options: Water2Options = {} ) {\r\n\r\n\t\tsuper( geometry );\r\n\r\n\t\tconst scope = this;\r\n\r\n\t\tconst color = ( options.color !== undefined ) ? new Color( options.color ) : new Color( 0xFFFFFF );\r\n\t\tconst textureWidth = options.textureWidth || 512;\r\n\t\tconst textureHeight = options.textureHeight || 512;\r\n\t\tconst clipBias = options.clipBias || 0;\r\n\t\tconst flowDirection = options.flowDirection || new Vector2( 1, 0 );\r\n\t\tconst flowSpeed = options.flowSpeed || 0.01;\r\n\t\tconst reflectivity = options.reflectivity || 0.5;\r\n\t\tconst scale = options.scale || 1;\r\n\t\tconst shader = WaterShader;\r\n\r\n\t\tconst textureLoader = new TextureLoader();\r\n\r\n\t\tconst normalMap0 = options.normalMap0 || textureLoader.load( './water/Water_1_M_Normal.jpg' );\r\n\t\tconst normalMap1 = options.normalMap1 || textureLoader.load( './water/Water_2_M_Normal.jpg' );\r\n\r\n\t\tconst cycle = 0.15; // a cycle of a flow map phase\r\n\t\tconst halfCycle = cycle * 0.5;\r\n\t\tconst textureMatrix = new Matrix4();\r\n\t\tconst clock = new Clock();\r\n        this.material = new ShaderMaterial()\r\n\t\t// internal components\r\n\r\n\t\tconst reflector = new Reflector( geometry, {\r\n\t\t\ttextureWidth: textureWidth,\r\n\t\t\ttextureHeight: textureHeight,\r\n\t\t\tclipBias: clipBias\r\n\t\t} );\r\n\r\n\t\treflector.matrixAutoUpdate = false\r\n\r\n\t\t// material\r\n\r\n\t\tthis.material = new ShaderMaterial( {\r\n\t\t\tuniforms: UniformsUtils.merge( [\r\n\t\t\t\tUniformsLib[ 'fog' ],\r\n\t\t\t\tshader.uniforms\r\n\t\t\t] ),\r\n\t\t\tvertexShader: shader.vertexShader,\r\n\t\t\tfragmentShader: shader.fragmentShader,\r\n\t\t\ttransparent: true,\r\n\t\t\tfog: true\r\n\t\t} );\r\n\r\n        this.material.uniforms[ 'flowDirection' ].value = flowDirection\r\n\r\n\t\t// maps\r\n\r\n\t\tnormalMap0.wrapS = normalMap0.wrapT = RepeatWrapping;\r\n\t\tnormalMap1.wrapS = normalMap1.wrapT = RepeatWrapping;\r\n\r\n\t\tthis.material.uniforms[ 'tReflectionMap' ].value = reflector.getRenderTarget().texture;\r\n\t\tthis.material.uniforms[ 'tNormalMap0' ].value = normalMap0;\r\n\t\tthis.material.uniforms[ 'tNormalMap1' ].value = normalMap1;\r\n\r\n\t\t// water\r\n\r\n\t\tthis.material.uniforms[ 'reflectivity' ].value = reflectivity;\r\n\t\tthis.material.uniforms[ 'textureMatrix' ].value = textureMatrix;\r\n\r\n\t\t// inital values\r\n\r\n\t\tthis.material.uniforms[ 'config' ].value.x = 0; // flowMapOffset0\r\n\t\tthis.material.uniforms[ 'config' ].value.y = halfCycle; // flowMapOffset1\r\n\t\tthis.material.uniforms[ 'config' ].value.z = halfCycle; // halfCycle\r\n\t\tthis.material.uniforms[ 'config' ].value.w = scale; // scale\r\n\r\n\t\t// functions\r\n\r\n\t\tfunction updateTextureMatrix( camera: Camera ) {\r\n\r\n\t\t\ttextureMatrix.set(\r\n\t\t\t\t0.5, 0.0, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.5, 0.0, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.5, 0.5,\r\n\t\t\t\t0.0, 0.0, 0.0, 1.0\r\n\t\t\t);\r\n\r\n\t\t\ttextureMatrix.multiply( camera.projectionMatrix );\r\n\t\t\ttextureMatrix.multiply( camera.matrixWorldInverse );\r\n\t\t\ttextureMatrix.multiply( scope.matrixWorld );\r\n\r\n\t\t}\r\n\r\n\t\tfunction updateFlow() {\r\n\r\n\t\t\tconst delta = clock.getDelta();\r\n\t\t\tconst config = scope.material.uniforms[ 'config' ];\r\n\r\n\t\t\tconfig.value.x += flowSpeed * delta; // flowMapOffset0\r\n\t\t\tconfig.value.y = config.value.x + halfCycle; // flowMapOffset1\r\n\r\n\t\t\t// Important: The distance between offsets should be always the value of \"halfCycle\".\r\n\t\t\t// Moreover, both offsets should be in the range of [ 0, cycle ].\r\n\t\t\t// This approach ensures a smooth water flow and avoids \"reset\" effects.\r\n\r\n\t\t\tif ( config.value.x >= cycle ) {\r\n\r\n\t\t\t\tconfig.value.x = 0;\r\n\t\t\t\tconfig.value.y = halfCycle;\r\n\r\n\t\t\t} else if ( config.value.y >= cycle ) {\r\n\r\n\t\t\t\tconfig.value.y = config.value.y - cycle;\r\n\r\n\t\t\t}\r\n\r\n\t\t}\r\n\r\n\t\t//\r\n\r\n\t\tthis.onBeforeRender = function ( renderer, scene, camera: Camera, geometry: BufferGeometry, material: Material, group: Group ) {\r\n\r\n\t\t\tupdateTextureMatrix( camera );\r\n\t\t\tupdateFlow();\r\n\r\n\t\t\tscope.visible = false;\r\n\r\n\t\t\treflector.matrixWorld.copy( scope.matrixWorld );\r\n\r\n\t\t\treflector.onBeforeRender( renderer, reflectionScene, camera, geometry, material, group );\r\n\r\n\t\t\tscope.visible = true;\r\n\r\n\t\t};\r\n\r\n\t}\r\n\r\n}\r\n\r\nconst WaterShader = {\r\n\r\n\tuniforms: {\r\n\r\n\t\t'reflectivity': {\r\n\t\t\ttype: 'f',\r\n\t\t\tvalue: 0\r\n\t\t},\r\n\r\n\t\t'tReflectionMap': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tRefractionMap': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tNormalMap0': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'tNormalMap1': {\r\n\t\t\ttype: 't',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'textureMatrix': {\r\n\t\t\ttype: 'm4',\r\n\t\t\tvalue: null\r\n\t\t},\r\n\r\n\t\t'config': {\r\n\t\t\ttype: 'v4',\r\n\t\t\tvalue: new Vector4()\r\n\t\t},\r\n\r\n\t\t'flowDirection': {\r\n            type: 'v2',\r\n            value: new Vector2()\r\n\t\t}\r\n\r\n\t},\r\n\r\n\tvertexShader: /* glsl */`\r\n\r\n\t\t#include <common>\r\n\t\t#include <fog_pars_vertex>\r\n\t\t#include <logdepthbuf_pars_vertex>\r\n\r\n\t\tuniform mat4 textureMatrix;\r\n\r\n\t\tvarying vec4 vCoord;\r\n\t\tvarying vec2 vUv;\r\n\t\tvarying vec3 vToEye;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\tvUv = uv;\r\n\t\t\tvCoord = textureMatrix * vec4( position, 1.0 );\r\n\r\n\t\t\tvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\r\n\t\t\tvToEye = cameraPosition - worldPosition.xyz;\r\n\r\n\t\t\tvec4 mvPosition =  viewMatrix * worldPosition; // used in fog_vertex\r\n\t\t\tgl_Position = projectionMatrix * mvPosition;\r\n\r\n\t\t\t#include <logdepthbuf_vertex>\r\n\t\t\t#include <fog_vertex>\r\n\r\n\t\t}`,\r\n\r\n\tfragmentShader: /* glsl */`\r\n\r\n\t\t#include <common>\r\n\t\t#include <fog_pars_fragment>\r\n\t\t#include <logdepthbuf_pars_fragment>\r\n\r\n\t\tuniform sampler2D tReflectionMap;\r\n\t\tuniform sampler2D tRefractionMap;\r\n\t\tuniform sampler2D tNormalMap0;\r\n\t\tuniform sampler2D tNormalMap1;\r\n\r\n\t\tuniform vec2 flowDirection;\r\n\r\n\t\tuniform float reflectivity;\r\n\t\tuniform vec4 config;\r\n\r\n\t\tvarying vec4 vCoord;\r\n\t\tvarying vec2 vUv;\r\n\t\tvarying vec3 vToEye;\r\n\r\n\t\tvoid main() {\r\n\r\n\t\t\t#include <logdepthbuf_fragment>\r\n\r\n\t\t\tfloat flowMapOffset0 = config.x;\r\n\t\t\tfloat flowMapOffset1 = config.y;\r\n\t\t\tfloat halfCycle = config.z;\r\n\t\t\tfloat scale = config.w;\r\n\r\n\t\t\tvec3 toEye = normalize( vToEye );\r\n\r\n\t\t\t// determine flow direction\r\n\t\t\tvec2 flow;\r\n\t\t\tflow = flowDirection;\r\n\t\t\tflow.x *= - 1.0;\r\n\r\n\t\t\t// sample normal maps (distort uvs with flowdata)\r\n\t\t\tvec4 normalColor0 = texture2D( tNormalMap0, ( vUv * scale ) + flow * flowMapOffset0 );\r\n\t\t\tvec4 normalColor1 = texture2D( tNormalMap1, ( vUv * scale ) + flow * flowMapOffset1 );\r\n\r\n\t\t\t// linear interpolate to get the final normal color\r\n\t\t\tfloat flowLerp = abs( halfCycle - flowMapOffset0 ) / halfCycle;\r\n\t\t\tvec4 normalColor = mix( normalColor0, normalColor1, flowLerp );\r\n\r\n\t\t\t// calculate normal vector\r\n\t\t\tvec3 normal = normalize( vec3( normalColor.r * 2.0 - 1.0, normalColor.b,  normalColor.g * 2.0 - 1.0 ) );\r\n\r\n\t\t\t// calculate the fresnel term to blend reflection and refraction maps\r\n\t\t\tfloat theta = max( dot( toEye, normal ), 0.0 );\r\n\t\t\tfloat reflectance = reflectivity + ( 1.0 - reflectivity ) * pow( ( 1.0 - theta ), 5.0 );\r\n            reflectance = pow(reflectance + 0.3, 4.0);\r\n            // reflectance = floor(reflectance *  2.0) / 4.0;\r\n            vec4 refractColor = vec4(1.0);\r\n\r\n\t\t\t// calculate final uv coords\r\n\t\t\tvec3 coord = vCoord.xyz / vCoord.w;\r\n\t\t\tvec2 uv = coord.xy + coord.z * normal.xz * 0.05;\r\n\r\n\t\t\tvec4 reflectColor = texture2D( tReflectionMap, vec2( 1.0 - uv.x, uv.y ) );\r\n            reflectColor *= vec4(1.0, 1.0, 1.0, 1.0);\r\n\t\t\treflectColor *= 0.5;\r\n\t\t\treflectColor += 0.5;\r\n\r\n\t\t\tgl_FragColor = mix(refractColor, reflectColor, reflectance);\r\n\t\t\t// gl_FragColor = reflectColor;\r\n\r\n\t\t\t#include <tonemapping_fragment>\r\n\t\t\t#include <encodings_fragment>\r\n\t\t\t#include <fog_fragment>\r\n\r\n\t\t}`\r\n\r\n};\r\n\r\nexport { SQWater };"],"sourceRoot":""}