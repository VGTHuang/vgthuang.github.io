{"version":3,"sources":["webpack:///./node_modules/three/examples/jsm/postprocessing/Pass.js","webpack:///./src/scripts/Three/TardisCard.ts","webpack:///./src/scripts/Three/Utils.ts","webpack:///./node_modules/three/examples/jsm/shaders/CopyShader.js","webpack:///./node_modules/three/examples/jsm/postprocessing/MaskPass.js","webpack:///./node_modules/three/examples/jsm/postprocessing/EffectComposer.js","webpack:///./node_modules/three/examples/jsm/postprocessing/ShaderPass.js","webpack:///./node_modules/core-js/modules/es.string.sub.js","webpack:///./src/scripts/Three/ShaderLoader.ts","webpack:///./src/scripts/Three sync ^\\.\\/.*\\/V\\.glsl$","webpack:///./src/scripts/Three/GlassFrontShader/F.glsl","webpack:///./src/scripts/Three/FresnelShader/F.glsl","webpack:///./src/scripts/Three/CardSkyboxShader/V.glsl","webpack:///./node_modules/core-js/internals/create-html.js","webpack:///./src/scripts/Three/FresnelShader/V.glsl","webpack:///./src/scripts/Three sync ^\\.\\/.*\\/F\\.glsl$","webpack:///./src/scripts/Three/CardSkyboxShader/F.glsl","webpack:///./node_modules/three/examples/jsm/postprocessing/RenderPass.js","webpack:///./node_modules/core-js/internals/string-html-forced.js","webpack:///./src/scripts/Three/GlassFrontShader/V.glsl"],"names":["Pass","this","enabled","needsSwap","clear","renderToScreen","console","error","_camera","_geometry","setAttribute","FullScreenQuad","material","_mesh","geometry","dispose","renderer","render","value","TardisCardShape","TardisCard","height","width","stencilId","cardOutsideScene","cardInsideScene","position","rotation","shape","RECT","cardGeometry","cardMaterial","color","stencilWrite","stencilRef","stencilZPass","depthWrite","cardMesh","copy","add","isFocused","frontWallGeom","frontWallMesh","group","_recursiveGetGroupProperty","stencilFunc","setFunc","children","forEach","v","Array","mat","thickness","undefined","positions","indices","points","i","tv","push","setFromPoints","computeVertexNormals","frontWallMat","textureCube","vs","fs","uniforms","type","customMaterial","vertexShader","fragmentShader","side","DampingObjectController","object","damp","attract","velocity","childObjects","target","multiplyScalar","currentPath","sub","obj","DampingVector3Controller","currentVec3","CopyShader","scene","camera","super","inverse","writeBuffer","readBuffer","context","getContext","state","writeValue","clearValue","buffers","setMask","depth","setLocked","stencil","setTest","setOp","REPLACE","ALWAYS","setClear","setRenderTarget","EQUAL","KEEP","renderTarget","parameters","minFilter","magFilter","format","size","getSize","_pixelRatio","getPixelRatio","_width","_height","texture","name","renderTarget1","renderTarget2","clone","passes","ShaderPass","copyPass","clock","tmp","pass","setSize","index","splice","indexOf","passIndex","length","deltaTime","getDelta","currentRenderTarget","getRenderTarget","maskActive","il","isLastEnabledPass","NOTEQUAL","swapBuffers","effectiveWidth","effectiveHeight","pixelRatio","shader","textureID","defines","Object","assign","fsQuad","autoClearColor","autoClearDepth","autoClearStencil","$","createHTML","forcedStringHTMLMethod","proto","forced","loadShader","shaderName","fragShader","err","map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve","module","exports","uncurryThis","requireObjectCoercible","toString","quot","replace","string","tag","attribute","S","p1","RenderPass","overrideMaterial","clearColor","clearAlpha","clearDepth","_oldClearColor","oldAutoClear","autoClear","oldClearAlpha","oldOverrideMaterial","getClearColor","getClearAlpha","setClearColor","fails","METHOD_NAME","test","toLowerCase","split"],"mappings":"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","file":"js/chunk-1744ab30.2e969810.js","sourcesContent":["import {\n\tBufferGeometry,\n\tFloat32BufferAttribute,\n\tOrthographicCamera,\n\tMesh\n} from 'three';\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { Pass, FullScreenQuad };\n","import * as THREE from 'three'\r\nimport { loadShader } from './ShaderLoader'\r\n\r\nexport enum TardisCardShape {\r\n    RECT,\r\n    CIRCLE\r\n}\r\n\r\nexport class TardisCard {\r\n    cardGeometry: THREE.BufferGeometry\r\n    cardMaterial: THREE.Material\r\n    cardMesh: THREE.Mesh\r\n    stencilId: number\r\n    cardOutsideScene: THREE.Scene\r\n    cardInsideScene: THREE.Scene\r\n    isFocused: boolean\r\n    height: number\r\n    width: number\r\n    frontWallGeom: THREE.BufferGeometry\r\n    frontWallMesh: THREE.Mesh\r\n    constructor(height: number = 100, width: number = 100,\r\n        stencilId: number,\r\n        cardOutsideScene: THREE.Scene, cardInsideScene: THREE.Scene,\r\n        position: THREE.Vector3, rotation: THREE.Euler,\r\n        shape: TardisCardShape = TardisCardShape.RECT\r\n        ) {\r\n        this.stencilId = stencilId\r\n        this.height = height\r\n        this.width = width\r\n        if (shape == TardisCardShape.RECT) {\r\n            this.cardGeometry = new THREE.PlaneGeometry(width, height)\r\n        }\r\n        else {\r\n            this.cardGeometry = new THREE.CircleGeometry(width, 64)\r\n        }\r\n        this.cardMaterial = new THREE.MeshBasicMaterial({\r\n            color: 0xf0f0f0,\r\n            // colorWrite: false,\r\n            stencilWrite: true,\r\n            stencilRef: stencilId,\r\n            stencilZPass: THREE.ReplaceStencilOp,  // write if the depth buffer test passes\r\n            depthWrite: false\r\n        })\r\n        this.cardMesh = new THREE.Mesh(this.cardGeometry, this.cardMaterial)\r\n        this.cardMesh['tardis'] = this\r\n        this.cardMesh.position.copy(position)\r\n        this.cardMesh.rotation.copy(rotation)\r\n        this.cardOutsideScene = cardOutsideScene\r\n        this.cardInsideScene = cardInsideScene\r\n        this.cardOutsideScene.add(this.cardMesh)\r\n        this.isFocused = false\r\n        this.frontWallGeom = new THREE.BufferGeometry()\r\n        this.frontWallMesh = new THREE.Mesh()\r\n    }\r\n    /**\r\n     * add group of objects to card that acts as contents that COULD BE VISIBLE FROM THE OUTSIDE\r\n     * @param group\r\n     */\r\n    addVisibleObjectGroup(group: THREE.Group) {\r\n        this._recursiveGetGroupProperty(group, (cardMaterial) => {\r\n            cardMaterial.stencilWrite = true\r\n            cardMaterial.stencilRef = this.stencilId\r\n            cardMaterial.stencilFunc = THREE.EqualStencilFunc\r\n            // cardMaterial.depthTest = false\r\n        })\r\n        this.cardOutsideScene.add(group)\r\n    }\r\n    _recursiveGetGroupProperty( group: THREE.Group, setFunc: {  (cardMesh: THREE.Material): any } ) {\r\n        group.children.forEach(v => {\r\n            if (v instanceof THREE.Mesh) {\r\n                if (v.material instanceof THREE.Material) {\r\n                    setFunc(v.material)\r\n                }\r\n                else if (v.material instanceof Array) {\r\n                    v.material.forEach(mat => {\r\n                        setFunc(mat)\r\n                    })\r\n                }\r\n            }\r\n            else if (v instanceof THREE.Group) {\r\n                this._recursiveGetGroupProperty(v, setFunc)\r\n            }\r\n        })\r\n    }\r\n    addFrontWall(thickness: number = 10, material: THREE.Material | undefined = undefined) {\r\n        const positions = [\r\n            new THREE.Vector3(-this.width/2, -this.height/2, 0),\r\n            new THREE.Vector3(-this.width/2,  this.height/2, 0),\r\n            new THREE.Vector3( this.width/2,  this.height/2, 0),\r\n            new THREE.Vector3( this.width/2, -this.height/2, 0),\r\n            new THREE.Vector3(-this.width/2, -this.height/2, -thickness),\r\n            new THREE.Vector3(-this.width/2,  this.height/2, -thickness),\r\n            new THREE.Vector3( this.width/2,  this.height/2, -thickness),\r\n            new THREE.Vector3( this.width/2, -this.height/2, -thickness)\r\n        ]\r\n\r\n        const indices = [\r\n            1, 0, 4,\r\n            5, 1, 4,\r\n            2, 1, 5,\r\n            6, 2, 5,\r\n            3, 2, 6,\r\n            7, 3, 6,\r\n            0, 3, 7,\r\n            4, 0, 7\r\n        ]\r\n\r\n        const points: Array<THREE.Vector3> = []\r\n        indices.forEach(i => {\r\n            let tv = new THREE.Vector3()\r\n            // tv.multiplyScalar(100)\r\n            tv.copy(positions[i])\r\n            points.push(tv)\r\n        })\r\n        this.frontWallGeom.setFromPoints(points)\r\n        this.frontWallGeom.computeVertexNormals()\r\n        const frontWallMat = (material == undefined) ? new THREE.MeshPhongMaterial({\r\n            color: 0xa0a0a0,\r\n        }) : material\r\n        frontWallMat.stencilWrite = true\r\n        frontWallMat.stencilRef = this.stencilId\r\n        frontWallMat.stencilFunc = THREE.EqualStencilFunc\r\n        this.frontWallMesh = new THREE.Mesh(\r\n            this.frontWallGeom,\r\n            frontWallMat\r\n        )\r\n        this.frontWallMesh.position.copy(this.cardMesh.position)\r\n        this.cardOutsideScene.add(this.frontWallMesh)\r\n    }\r\n    addSkybox(textureCube: THREE.CubeTexture) {\r\n        var [vs, fs] = loadShader('CardSkyboxShader')\r\n        var uniforms = \r\n        {\r\n            \"tCube\":            { type: \"t\", value: textureCube }\r\n        }\r\n        var customMaterial = new THREE.ShaderMaterial( \r\n            {\r\n                uniforms:       uniforms,\r\n                vertexShader:   vs,\r\n                fragmentShader: fs,\r\n                side: THREE.DoubleSide,\r\n                stencilWrite: true,\r\n                stencilRef: this.stencilId,\r\n                stencilZPass: THREE.ReplaceStencilOp,  // write if the depth buffer test passes\r\n            }\r\n        )\r\n        this.cardMaterial = customMaterial\r\n        this.cardMesh.material = this.cardMaterial\r\n    }\r\n}","import { Vector3, Object3D } from 'three'\r\n\r\nexport class DampingObjectController {\r\n    damp: number\r\n    attract: number\r\n    object: Object3D\r\n    velocity: Vector3\r\n    childObjects: Array<Object3D>\r\n    constructor(object: Object3D, damp: number = 0.5, attract: number = 0.5) {\r\n        this.damp = damp\r\n        this.attract = attract\r\n        this.object = object\r\n        this.velocity = new Vector3()\r\n        this.childObjects = []\r\n    }\r\n    addChildObj(object: Object3D) {\r\n        this.childObjects.push(object)\r\n    }\r\n    update(target: Vector3) {\r\n        this.velocity.multiplyScalar(this.damp)\r\n        let currentPath = target.sub(this.object.position)\r\n        this.velocity.add(currentPath.multiplyScalar(this.attract))\r\n        this.object.position.add(this.velocity)\r\n        this.childObjects.forEach(obj => {\r\n            obj.position.copy(this.object.position)\r\n            obj.rotation.copy(this.object.rotation)\r\n        })\r\n    }\r\n}\r\n\r\nexport class DampingVector3Controller {\r\n    damp: number\r\n    attract: number\r\n    velocity: Vector3\r\n    currentVec3: Vector3\r\n    constructor(currentVec3: Vector3, damp: number = 0.5, attract: number = 0.5) {\r\n        this.damp = damp\r\n        this.attract = attract\r\n        this.velocity = new Vector3()\r\n        this.currentVec3 = currentVec3\r\n    }\r\n    update(target: Vector3) {\r\n        this.velocity.multiplyScalar(this.damp)\r\n        let currentPath = target.sub(this.currentVec3)\r\n        this.velocity.add(currentPath.multiplyScalar(this.attract))\r\n        this.currentVec3.add(this.velocity)\r\n    }\r\n}\r\n","/**\n * Full-screen textured quad shader\n */\n\nvar CopyShader = {\n\n\tuniforms: {\n\n\t\t'tDiffuse': { value: null },\n\t\t'opacity': { value: 1.0 }\n\n\t},\n\n\tvertexShader: /* glsl */`\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvUv = uv;\n\t\t\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n\n\t\t}`,\n\n\tfragmentShader: /* glsl */`\n\n\t\tuniform float opacity;\n\n\t\tuniform sampler2D tDiffuse;\n\n\t\tvarying vec2 vUv;\n\n\t\tvoid main() {\n\n\t\t\tvec4 texel = texture2D( tDiffuse, vUv );\n\t\t\tgl_FragColor = opacity * texel;\n\n\t\t}`\n\n};\n\nexport { CopyShader };\n","import { Pass } from './Pass.js';\n\nclass MaskPass extends Pass {\n\n\tconstructor( scene, camera ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.clear = true;\n\t\tthis.needsSwap = false;\n\n\t\tthis.inverse = false;\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst context = renderer.getContext();\n\t\tconst state = renderer.state;\n\n\t\t// don't update color or depth\n\n\t\tstate.buffers.color.setMask( false );\n\t\tstate.buffers.depth.setMask( false );\n\n\t\t// lock buffers\n\n\t\tstate.buffers.color.setLocked( true );\n\t\tstate.buffers.depth.setLocked( true );\n\n\t\t// set up stencil\n\n\t\tlet writeValue, clearValue;\n\n\t\tif ( this.inverse ) {\n\n\t\t\twriteValue = 0;\n\t\t\tclearValue = 1;\n\n\t\t} else {\n\n\t\t\twriteValue = 1;\n\t\t\tclearValue = 0;\n\n\t\t}\n\n\t\tstate.buffers.stencil.setTest( true );\n\t\tstate.buffers.stencil.setOp( context.REPLACE, context.REPLACE, context.REPLACE );\n\t\tstate.buffers.stencil.setFunc( context.ALWAYS, writeValue, 0xffffffff );\n\t\tstate.buffers.stencil.setClear( clearValue );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t\t// draw into the stencil buffer\n\n\t\trenderer.setRenderTarget( readBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\trenderer.setRenderTarget( writeBuffer );\n\t\tif ( this.clear ) renderer.clear();\n\t\trenderer.render( this.scene, this.camera );\n\n\t\t// unlock color and depth buffer for subsequent rendering\n\n\t\tstate.buffers.color.setLocked( false );\n\t\tstate.buffers.depth.setLocked( false );\n\n\t\t// only render where stencil is set to 1\n\n\t\tstate.buffers.stencil.setLocked( false );\n\t\tstate.buffers.stencil.setFunc( context.EQUAL, 1, 0xffffffff ); // draw if == 1\n\t\tstate.buffers.stencil.setOp( context.KEEP, context.KEEP, context.KEEP );\n\t\tstate.buffers.stencil.setLocked( true );\n\n\t}\n\n}\n\nclass ClearMaskPass extends Pass {\n\n\tconstructor() {\n\n\t\tsuper();\n\n\t\tthis.needsSwap = false;\n\n\t}\n\n\trender( renderer /*, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\trenderer.state.buffers.stencil.setLocked( false );\n\t\trenderer.state.buffers.stencil.setTest( false );\n\n\t}\n\n}\n\nexport { MaskPass, ClearMaskPass };\n","import {\n\tBufferGeometry,\n\tClock,\n\tFloat32BufferAttribute,\n\tLinearFilter,\n\tMesh,\n\tOrthographicCamera,\n\tRGBAFormat,\n\tVector2,\n\tWebGLRenderTarget\n} from 'three';\nimport { CopyShader } from '../shaders/CopyShader.js';\nimport { ShaderPass } from './ShaderPass.js';\nimport { MaskPass } from './MaskPass.js';\nimport { ClearMaskPass } from './MaskPass.js';\n\nclass EffectComposer {\n\n\tconstructor( renderer, renderTarget ) {\n\n\t\tthis.renderer = renderer;\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst parameters = {\n\t\t\t\tminFilter: LinearFilter,\n\t\t\t\tmagFilter: LinearFilter,\n\t\t\t\tformat: RGBAFormat\n\t\t\t};\n\n\t\t\tconst size = renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = new WebGLRenderTarget( this._width * this._pixelRatio, this._height * this._pixelRatio, parameters );\n\t\t\trenderTarget.texture.name = 'EffectComposer.rt1';\n\n\t\t} else {\n\n\t\t\tthis._pixelRatio = 1;\n\t\t\tthis._width = renderTarget.width;\n\t\t\tthis._height = renderTarget.height;\n\n\t\t}\n\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\t\tthis.renderTarget2.texture.name = 'EffectComposer.rt2';\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t\tthis.renderToScreen = true;\n\n\t\tthis.passes = [];\n\n\t\t// dependencies\n\n\t\tif ( CopyShader === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on CopyShader' );\n\n\t\t}\n\n\t\tif ( ShaderPass === undefined ) {\n\n\t\t\tconsole.error( 'THREE.EffectComposer relies on ShaderPass' );\n\n\t\t}\n\n\t\tthis.copyPass = new ShaderPass( CopyShader );\n\n\t\tthis.clock = new Clock();\n\n\t}\n\n\tswapBuffers() {\n\n\t\tconst tmp = this.readBuffer;\n\t\tthis.readBuffer = this.writeBuffer;\n\t\tthis.writeBuffer = tmp;\n\n\t}\n\n\taddPass( pass ) {\n\n\t\tthis.passes.push( pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tinsertPass( pass, index ) {\n\n\t\tthis.passes.splice( index, 0, pass );\n\t\tpass.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t}\n\n\tremovePass( pass ) {\n\n\t\tconst index = this.passes.indexOf( pass );\n\n\t\tif ( index !== - 1 ) {\n\n\t\t\tthis.passes.splice( index, 1 );\n\n\t\t}\n\n\t}\n\n\tisLastEnabledPass( passIndex ) {\n\n\t\tfor ( let i = passIndex + 1; i < this.passes.length; i ++ ) {\n\n\t\t\tif ( this.passes[ i ].enabled ) {\n\n\t\t\t\treturn false;\n\n\t\t\t}\n\n\t\t}\n\n\t\treturn true;\n\n\t}\n\n\trender( deltaTime ) {\n\n\t\t// deltaTime value is in seconds\n\n\t\tif ( deltaTime === undefined ) {\n\n\t\t\tdeltaTime = this.clock.getDelta();\n\n\t\t}\n\n\t\tconst currentRenderTarget = this.renderer.getRenderTarget();\n\n\t\tlet maskActive = false;\n\n\t\tfor ( let i = 0, il = this.passes.length; i < il; i ++ ) {\n\n\t\t\tconst pass = this.passes[ i ];\n\n\t\t\tif ( pass.enabled === false ) continue;\n\n\t\t\tpass.renderToScreen = ( this.renderToScreen && this.isLastEnabledPass( i ) );\n\t\t\tpass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime, maskActive );\n\n\t\t\tif ( pass.needsSwap ) {\n\n\t\t\t\tif ( maskActive ) {\n\n\t\t\t\t\tconst context = this.renderer.getContext();\n\t\t\t\t\tconst stencil = this.renderer.state.buffers.stencil;\n\n\t\t\t\t\t//context.stencilFunc( context.NOTEQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.NOTEQUAL, 1, 0xffffffff );\n\n\t\t\t\t\tthis.copyPass.render( this.renderer, this.writeBuffer, this.readBuffer, deltaTime );\n\n\t\t\t\t\t//context.stencilFunc( context.EQUAL, 1, 0xffffffff );\n\t\t\t\t\tstencil.setFunc( context.EQUAL, 1, 0xffffffff );\n\n\t\t\t\t}\n\n\t\t\t\tthis.swapBuffers();\n\n\t\t\t}\n\n\t\t\tif ( MaskPass !== undefined ) {\n\n\t\t\t\tif ( pass instanceof MaskPass ) {\n\n\t\t\t\t\tmaskActive = true;\n\n\t\t\t\t} else if ( pass instanceof ClearMaskPass ) {\n\n\t\t\t\t\tmaskActive = false;\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t}\n\n\t\tthis.renderer.setRenderTarget( currentRenderTarget );\n\n\t}\n\n\treset( renderTarget ) {\n\n\t\tif ( renderTarget === undefined ) {\n\n\t\t\tconst size = this.renderer.getSize( new Vector2() );\n\t\t\tthis._pixelRatio = this.renderer.getPixelRatio();\n\t\t\tthis._width = size.width;\n\t\t\tthis._height = size.height;\n\n\t\t\trenderTarget = this.renderTarget1.clone();\n\t\t\trenderTarget.setSize( this._width * this._pixelRatio, this._height * this._pixelRatio );\n\n\t\t}\n\n\t\tthis.renderTarget1.dispose();\n\t\tthis.renderTarget2.dispose();\n\t\tthis.renderTarget1 = renderTarget;\n\t\tthis.renderTarget2 = renderTarget.clone();\n\n\t\tthis.writeBuffer = this.renderTarget1;\n\t\tthis.readBuffer = this.renderTarget2;\n\n\t}\n\n\tsetSize( width, height ) {\n\n\t\tthis._width = width;\n\t\tthis._height = height;\n\n\t\tconst effectiveWidth = this._width * this._pixelRatio;\n\t\tconst effectiveHeight = this._height * this._pixelRatio;\n\n\t\tthis.renderTarget1.setSize( effectiveWidth, effectiveHeight );\n\t\tthis.renderTarget2.setSize( effectiveWidth, effectiveHeight );\n\n\t\tfor ( let i = 0; i < this.passes.length; i ++ ) {\n\n\t\t\tthis.passes[ i ].setSize( effectiveWidth, effectiveHeight );\n\n\t\t}\n\n\t}\n\n\tsetPixelRatio( pixelRatio ) {\n\n\t\tthis._pixelRatio = pixelRatio;\n\n\t\tthis.setSize( this._width, this._height );\n\n\t}\n\n}\n\n\nclass Pass {\n\n\tconstructor() {\n\n\t\t// if set to true, the pass is processed by the composer\n\t\tthis.enabled = true;\n\n\t\t// if set to true, the pass indicates to swap read and write buffer after rendering\n\t\tthis.needsSwap = true;\n\n\t\t// if set to true, the pass clears its buffer before rendering\n\t\tthis.clear = false;\n\n\t\t// if set to true, the result of the pass is rendered to screen. This is set automatically by EffectComposer.\n\t\tthis.renderToScreen = false;\n\n\t}\n\n\tsetSize( /* width, height */ ) {}\n\n\trender( /* renderer, writeBuffer, readBuffer, deltaTime, maskActive */ ) {\n\n\t\tconsole.error( 'THREE.Pass: .render() must be implemented in derived pass.' );\n\n\t}\n\n}\n\n// Helper for passes that need to fill the viewport with a single quad.\n\nconst _camera = new OrthographicCamera( - 1, 1, 1, - 1, 0, 1 );\n\n// https://github.com/mrdoob/three.js/pull/21358\n\nconst _geometry = new BufferGeometry();\n_geometry.setAttribute( 'position', new Float32BufferAttribute( [ - 1, 3, 0, - 1, - 1, 0, 3, - 1, 0 ], 3 ) );\n_geometry.setAttribute( 'uv', new Float32BufferAttribute( [ 0, 2, 0, 0, 2, 0 ], 2 ) );\n\nclass FullScreenQuad {\n\n\tconstructor( material ) {\n\n\t\tthis._mesh = new Mesh( _geometry, material );\n\n\t}\n\n\tdispose() {\n\n\t\tthis._mesh.geometry.dispose();\n\n\t}\n\n\trender( renderer ) {\n\n\t\trenderer.render( this._mesh, _camera );\n\n\t}\n\n\tget material() {\n\n\t\treturn this._mesh.material;\n\n\t}\n\n\tset material( value ) {\n\n\t\tthis._mesh.material = value;\n\n\t}\n\n}\n\nexport { EffectComposer, Pass, FullScreenQuad };\n","import {\n\tShaderMaterial,\n\tUniformsUtils\n} from 'three';\nimport { Pass, FullScreenQuad } from './Pass.js';\n\nclass ShaderPass extends Pass {\n\n\tconstructor( shader, textureID ) {\n\n\t\tsuper();\n\n\t\tthis.textureID = ( textureID !== undefined ) ? textureID : 'tDiffuse';\n\n\t\tif ( shader instanceof ShaderMaterial ) {\n\n\t\t\tthis.uniforms = shader.uniforms;\n\n\t\t\tthis.material = shader;\n\n\t\t} else if ( shader ) {\n\n\t\t\tthis.uniforms = UniformsUtils.clone( shader.uniforms );\n\n\t\t\tthis.material = new ShaderMaterial( {\n\n\t\t\t\tdefines: Object.assign( {}, shader.defines ),\n\t\t\t\tuniforms: this.uniforms,\n\t\t\t\tvertexShader: shader.vertexShader,\n\t\t\t\tfragmentShader: shader.fragmentShader\n\n\t\t\t} );\n\n\t\t}\n\n\t\tthis.fsQuad = new FullScreenQuad( this.material );\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tif ( this.uniforms[ this.textureID ] ) {\n\n\t\t\tthis.uniforms[ this.textureID ].value = readBuffer.texture;\n\n\t\t}\n\n\t\tthis.fsQuad.material = this.material;\n\n\t\tif ( this.renderToScreen ) {\n\n\t\t\trenderer.setRenderTarget( null );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t} else {\n\n\t\t\trenderer.setRenderTarget( writeBuffer );\n\t\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\t\tthis.fsQuad.render( renderer );\n\n\t\t}\n\n\t}\n\n}\n\nexport { ShaderPass };\n","'use strict';\nvar $ = require('../internals/export');\nvar createHTML = require('../internals/create-html');\nvar forcedStringHTMLMethod = require('../internals/string-html-forced');\n\n// `String.prototype.sub` method\n// https://tc39.es/ecma262/#sec-string.prototype.sub\n$({ target: 'String', proto: true, forced: forcedStringHTMLMethod('sub') }, {\n  sub: function sub() {\n    return createHTML(this, 'sub', '', '');\n  }\n});\n","export function loadShader(shaderName: string): Array<string> {\r\n    try {\r\n        var vertexShader = require('./' + shaderName + '/V.glsl')\r\n        var fragShader = require('./' + shaderName + '/F.glsl')\r\n        return [vertexShader, fragShader]\r\n    }\r\n    catch(err) {\r\n        console.error('failed to fetch shader', err)\r\n        return ['', '']\r\n    }\r\n}","var map = {\n\t\"./CardSkyboxShader/V.glsl\": \"8437\",\n\t\"./FresnelShader/V.glsl\": \"8c9f\",\n\t\"./GlassFrontShader/V.glsl\": \"c182\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"5d16\";","module.exports = \"uniform vec2 resolution;\\r\\nuniform sampler2D tBackground;\\r\\nuniform sampler2D tBackDepth;\\r\\n\\r\\nvarying vec2 vUv;\\r\\nvarying vec3 vNormal;\\r\\nvarying vec3 vCameraRay;\\r\\nvarying vec4 vWorldPosition;\\r\\nvarying mat4 vProjectionMatrix;\\r\\n\\r\\nfloat near = 0.1;\\r\\nfloat far  = 20000.0; \\r\\n\\r\\nfloat LinearizeDepth(float depth) \\r\\n{\\r\\n    float z = depth * 2.0 - 1.0; // back to NDC \\r\\n    return (2.0 * near * far) / (far + near - z * (far - near));\\t\\r\\n}\\r\\n\\r\\nfloat refractionFactor = 1.49; // glass\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n\\r\\n    float backDepth = float(texture2D( tBackDepth, vec2( gl_FragCoord.x / resolution.x, gl_FragCoord.y / resolution.y ) ).x);\\r\\n    float frontDepth = gl_FragCoord.z;\\r\\n\\r\\n    float backDepthlinear = LinearizeDepth(backDepth);\\r\\n    float frontDepthlinear = LinearizeDepth(frontDepth);\\r\\n    \\r\\n    float backToFrontDepth = backDepthlinear - frontDepthlinear;\\r\\n    backToFrontDepth *= 0.005;\\r\\n    \\r\\n    vec3 vRefract = refract( vCameraRay, vNormal, 1.0 / refractionFactor );\\r\\n    vec4 vOriginalPos = vWorldPosition + vec4(vCameraRay, 0.0);\\r\\n    vec4 vRefractedPos = vWorldPosition + vec4(vRefract, 0.0);\\r\\n    // vRefractedPos = vOriginalPos; //vWorldPosition + vec4(vRefract, 0.0);\\r\\n    vec4 vOriginalProjectedPos = vProjectionMatrix * vOriginalPos;\\r\\n    vec4 vRefractedProjectedPos = vProjectionMatrix * vRefractedPos;\\r\\n    vec4 offset = normalize(vRefractedProjectedPos - vOriginalProjectedPos);\\r\\n\\r\\n    // snell's law\\r\\n    float cosTheta1 = dot(vCameraRay, vNormal);\\r\\n    float sinTheta1 = 1.0 - cosTheta1 * cosTheta1;\\r\\n    float sinTheta2 = sinTheta1 / refractionFactor;\\r\\n    float theta2 = asin(sinTheta2);\\r\\n    offset *= theta2;\\r\\n\\r\\n    float samplePointX = gl_FragCoord.x / resolution.x + backToFrontDepth * offset.x;\\r\\n    float samplePointY = gl_FragCoord.y / resolution.y + backToFrontDepth * offset.y;\\r\\n    \\r\\n    vec3 backColor = texture2D( tBackground, vec2( samplePointX, samplePointY ) ).xyz;\\r\\n    // vec4 vNewSample = projectionMatrix * (vec4(vRefract, 0.0) + worldPosition);\\r\\n    // vRefractOffset = vNewSample.xy / vNewSample.w;\\r\\n    // // vNormal = normal;\\r\\n    // vec3 vRefractOffsetT = vRefract + 0.5;\\r\\n    // gl_FragColor = vec4(backColor * 0.5 + vNormal * 0.2 + depthColor * 0.1, 1.0);\\r\\n    gl_FragColor = vec4(backColor, 1.0);\\r\\n    // gl_FragColor = vec4(vec3(backToFrontDepth) * 100.0, 1.0);\\r\\n    // gl_FragColor = vec4(offset.xy / offset.w + 0.5, 0.0, 1.0);\\r\\n    // gl_FragColor = vec4(vec3(theta2), 1.0);\\r\\n\\r\\n    // gl_FragColor = vec4(vec3(gl_FragCoord.z / gl_FragCoord.w - fragColor2.x * 10.0) / 2000.0, 1.0);\\r\\n}\"","module.exports = \"uniform samplerCube tCube;\\r\\nvarying vec3 vReflect;\\r\\nvarying vec3 vRefract[3];\\r\\nvarying float vReflectionFactor;\\r\\nvarying vec2 vUv;\\r\\n\\r\\nuniform sampler2D tNormal;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n    vec4 reflectedColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\\r\\n    vec4 refractedColor = vec4( 1.0 );\\r\\n\\r\\n    vec3 tnm = vec3(texture2D(tNormal, vUv));\\r\\n    tnm = tnm * 2.0 - 1.0;\\r\\n    tnm = 0.0 * tnm;\\r\\n    // tnm *= 0.01;\\r\\n    refractedColor.r = textureCube( tCube, vec3( -vRefract[0].x, vRefract[0].yz ) - tnm ).r;\\r\\n    refractedColor.g = textureCube( tCube, vec3( -vRefract[1].x, vRefract[1].yz ) - tnm ).g;\\r\\n    refractedColor.b = textureCube( tCube, vec3( -vRefract[2].x, vRefract[2].yz ) - tnm ).b;\\r\\n\\r\\n    gl_FragColor = mix( refractedColor, reflectedColor, clamp( vReflectionFactor, 0.0, 1.0 ) );\\r\\n}\"","module.exports = \"varying vec3 vPos;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\r\\n    gl_Position = projectionMatrix * mvPosition;\\r\\n    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\\r\\n    vPos = worldPosition.xyz - cameraPosition;\\r\\n}\\r\\n\"","var uncurryThis = require('../internals/function-uncurry-this');\nvar requireObjectCoercible = require('../internals/require-object-coercible');\nvar toString = require('../internals/to-string');\n\nvar quot = /\"/g;\nvar replace = uncurryThis(''.replace);\n\n// `CreateHTML` abstract operation\n// https://tc39.es/ecma262/#sec-createhtml\nmodule.exports = function (string, tag, attribute, value) {\n  var S = toString(requireObjectCoercible(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + replace(toString(value), quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\n","module.exports = \"uniform float mRefractionRatio;\\r\\nuniform float mFresnelBias;\\r\\nuniform float mFresnelScale;\\r\\nuniform float mFresnelPower;\\r\\n\\r\\nvarying vec3 vReflect;\\r\\nvarying vec3 vRefract[3];\\r\\nvarying float vReflectionFactor;\\r\\nvarying vec2 vUv;\\r\\n\\r\\nvoid main() {\\r\\n\\r\\n    vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\\r\\n    vec4 worldPosition = modelMatrix * vec4( position, 1.0 );\\r\\n\\r\\n    vec3 worldNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\r\\n\\r\\n    vec3 I = worldPosition.xyz - cameraPosition;\\r\\n\\r\\n    vReflect = reflect( I, worldNormal );\\r\\n    vRefract[0] = refract( normalize( I ), worldNormal, mRefractionRatio );\\r\\n    vRefract[1] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.99 );\\r\\n    vRefract[2] = refract( normalize( I ), worldNormal, mRefractionRatio * 0.98 );\\r\\n    vReflectionFactor = mFresnelBias + mFresnelScale * pow( 1.0 + dot( normalize( I ), worldNormal ), mFresnelPower );\\r\\n\\r\\n    gl_Position = projectionMatrix * mvPosition;\\r\\n    vUv = uv;\\r\\n\\r\\n}\\r\\n\"","var map = {\n\t\"./CardSkyboxShader/F.glsl\": \"91bc\",\n\t\"./FresnelShader/F.glsl\": \"7bcb\",\n\t\"./GlassFrontShader/F.glsl\": \"71cc\"\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = \"8e1c\";","module.exports = \"uniform samplerCube tCube;\\r\\nvarying vec3 vPos;\\r\\n\\r\\nvoid main() {\\r\\n    vec4 reflectedColor = textureCube( tCube, vec3(-vPos.x, vPos.yz) );\\r\\n    gl_FragColor = reflectedColor;\\r\\n}\"","import {\n\tColor\n} from 'three';\nimport { Pass } from './Pass.js';\n\nclass RenderPass extends Pass {\n\n\tconstructor( scene, camera, overrideMaterial, clearColor, clearAlpha ) {\n\n\t\tsuper();\n\n\t\tthis.scene = scene;\n\t\tthis.camera = camera;\n\n\t\tthis.overrideMaterial = overrideMaterial;\n\n\t\tthis.clearColor = clearColor;\n\t\tthis.clearAlpha = ( clearAlpha !== undefined ) ? clearAlpha : 0;\n\n\t\tthis.clear = true;\n\t\tthis.clearDepth = false;\n\t\tthis.needsSwap = false;\n\t\tthis._oldClearColor = new Color();\n\n\t}\n\n\trender( renderer, writeBuffer, readBuffer /*, deltaTime, maskActive */ ) {\n\n\t\tconst oldAutoClear = renderer.autoClear;\n\t\trenderer.autoClear = false;\n\n\t\tlet oldClearAlpha, oldOverrideMaterial;\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\toldOverrideMaterial = this.scene.overrideMaterial;\n\n\t\t\tthis.scene.overrideMaterial = this.overrideMaterial;\n\n\t\t}\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.getClearColor( this._oldClearColor );\n\t\t\toldClearAlpha = renderer.getClearAlpha();\n\n\t\t\trenderer.setClearColor( this.clearColor, this.clearAlpha );\n\n\t\t}\n\n\t\tif ( this.clearDepth ) {\n\n\t\t\trenderer.clearDepth();\n\n\t\t}\n\n\t\trenderer.setRenderTarget( this.renderToScreen ? null : readBuffer );\n\n\t\t// TODO: Avoid using autoClear properties, see https://github.com/mrdoob/three.js/pull/15571#issuecomment-465669600\n\t\tif ( this.clear ) renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );\n\t\trenderer.render( this.scene, this.camera );\n\n\t\tif ( this.clearColor ) {\n\n\t\t\trenderer.setClearColor( this._oldClearColor, oldClearAlpha );\n\n\t\t}\n\n\t\tif ( this.overrideMaterial !== undefined ) {\n\n\t\t\tthis.scene.overrideMaterial = oldOverrideMaterial;\n\n\t\t}\n\n\t\trenderer.autoClear = oldAutoClear;\n\n\t}\n\n}\n\nexport { RenderPass };\n","var fails = require('../internals/fails');\n\n// check the existence of a method, lowercase\n// of a tag and escaping quotes in arguments\nmodule.exports = function (METHOD_NAME) {\n  return fails(function () {\n    var test = ''[METHOD_NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  });\n};\n","module.exports = \"varying vec2 vUv;\\r\\nvarying vec3 vNormal;\\r\\nvarying vec3 vCameraRay;\\r\\nvarying vec4 vWorldPosition;\\r\\nvarying mat4 vProjectionMatrix;\\r\\n// varying vec3 vRefract;\\r\\n// varying vec2 vRefractOffset;\\r\\n\\r\\n\\r\\nvoid main() {\\r\\n    vWorldPosition = modelMatrix * vec4( position, 1.0 );\\r\\n    vec4 mvPosition = viewMatrix * vWorldPosition;\\r\\n    gl_Position = projectionMatrix * mvPosition;\\r\\n    vUv = uv;\\r\\n\\r\\n    vNormal = normalize( mat3( modelMatrix[0].xyz, modelMatrix[1].xyz, modelMatrix[2].xyz ) * normal );\\r\\n    vCameraRay = normalize(vWorldPosition.xyz - cameraPosition);\\r\\n\\r\\n    vProjectionMatrix = projectionMatrix * modelViewMatrix;\\r\\n}\\r\\n\""],"sourceRoot":""}